[{"filePath":"/Users/groot/Documents/code/checkers/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/next-env.d.ts","messages":[{"ruleId":"@typescript-eslint/triple-slash-reference","severity":2,"message":"Do not use a triple slash reference for ./.next/types/routes.d.ts, use `import` style instead.","line":3,"column":1,"nodeType":"Line","messageId":"tripleSlashReference","endLine":3,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n/// <reference path=\"./.next/types/routes.d.ts\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/postcss.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":1,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":5,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/prettier.config.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":2,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":4,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').PluginOptions} */\nexport default {\n  plugins: [\"prettier-plugin-tailwindcss\"],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/prisma/seed-games.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":11,"column":16,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":11,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":383,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":383,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11406,11408],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":411,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":413,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PrismaClient } from \"@prisma/client\";\nimport type { GameVariantEnum } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\n// Helper function to generate a realistic board state\nfunction generateBoardState(moveCount: number, winner: string | null) {\n  // Create a standard 8x8 checkers board\n  const board = Array(8)\n    .fill(null)\n    .map(() => Array(8).fill(null));\n\n  if (winner) {\n    // End game state - winner has more pieces\n    if (winner === \"red\") {\n      // Red wins - place more red pieces\n      board[0][1] = { type: \"king\", color: \"red\" };\n      board[0][3] = { type: \"king\", color: \"red\" };\n      board[1][2] = { type: \"regular\", color: \"red\" };\n      board[2][3] = { type: \"regular\", color: \"red\" };\n      board[7][6] = { type: \"regular\", color: \"black\" };\n    } else if (winner === \"black\") {\n      // Black wins - place more black pieces\n      board[7][2] = { type: \"king\", color: \"black\" };\n      board[7][4] = { type: \"king\", color: \"black\" };\n      board[6][3] = { type: \"regular\", color: \"black\" };\n      board[5][2] = { type: \"regular\", color: \"black\" };\n      board[0][1] = { type: \"regular\", color: \"red\" };\n    }\n  } else if (moveCount < 10) {\n    // Early game - most pieces still on board\n    // Red pieces (top)\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 8; col++) {\n        if ((row + col) % 2 === 1) {\n          board[row][col] = { type: \"regular\", color: \"red\" };\n        }\n      }\n    }\n    // Black pieces (bottom)\n    for (let row = 5; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if ((row + col) % 2 === 1) {\n          board[row][col] = { type: \"regular\", color: \"black\" };\n        }\n      }\n    }\n  } else {\n    // Mid to late game - fewer pieces, some kings\n    const positions = [\n      { row: 0, col: 1, piece: { type: \"king\", color: \"red\" } },\n      { row: 1, col: 2, piece: { type: \"regular\", color: \"red\" } },\n      { row: 2, col: 3, piece: { type: \"regular\", color: \"red\" } },\n      { row: 3, col: 4, piece: { type: \"regular\", color: \"red\" } },\n      { row: 7, col: 6, piece: { type: \"king\", color: \"black\" } },\n      { row: 6, col: 5, piece: { type: \"regular\", color: \"black\" } },\n      { row: 5, col: 4, piece: { type: \"regular\", color: \"black\" } },\n      { row: 4, col: 3, piece: { type: \"regular\", color: \"black\" } },\n    ];\n\n    // Place pieces based on move count\n    const piecesToPlace = Math.max(4, 12 - Math.floor(moveCount / 10));\n    for (let i = 0; i < Math.min(piecesToPlace, positions.length); i++) {\n      const pos = positions[i];\n      if (pos) {\n        board[pos.row][pos.col] = pos.piece;\n      }\n    }\n  }\n\n  return JSON.stringify(board);\n}\n\n// Helper to generate game moves\nfunction generateGameMoves(gameId: string, moveCount: number) {\n  const moves = [];\n  for (let i = 0; i < moveCount; i++) {\n    const isRedMove = i % 2 === 0;\n    const fromRow = isRedMove\n      ? Math.floor(Math.random() * 3)\n      : 5 + Math.floor(Math.random() * 3);\n    const fromCol = Math.floor(Math.random() * 8);\n    const toRow = isRedMove ? fromRow + 1 : fromRow - 1;\n    const toCol = fromCol + (Math.random() > 0.5 ? 1 : -1);\n\n    // Occasional captures\n    const captures =\n      Math.random() > 0.7\n        ? JSON.stringify([\n            { row: (fromRow + toRow) / 2, col: (fromCol + toCol) / 2 },\n          ])\n        : null;\n\n    moves.push({\n      gameId,\n      moveIndex: i,\n      fromRow: Math.max(0, Math.min(7, fromRow)),\n      fromCol: Math.max(0, Math.min(7, fromCol)),\n      toRow: Math.max(0, Math.min(7, toRow)),\n      toCol: Math.max(0, Math.min(7, toCol)),\n      captures,\n    });\n  }\n  return moves;\n}\n\nasync function main() {\n  console.log(\"üéÆ Starting game history seeding...\");\n\n  // Find supertester and testuser2\n  const superTester = await prisma.user.findUnique({\n    where: { email: \"supertester@example.com\" },\n  });\n\n  const testUser2 = await prisma.user.findUnique({\n    where: { email: \"testuser2@example.com\" },\n  });\n\n  if (!superTester || !testUser2) {\n    console.error(\n      \"‚ùå Could not find supertester or testuser2. Please run the main seed script first.\",\n    );\n    process.exit(1);\n  }\n\n  console.log(`Found users: ${superTester.username} and ${testUser2.username}`);\n\n  // Create PlayerRating records for both users\n  const variants: GameVariantEnum[] = [\n    \"AMERICAN\",\n    \"INTERNATIONAL\",\n    \"BRAZILIAN\",\n  ];\n\n  for (const variant of variants) {\n    // Create rating for supertester\n    const existingSuperRating = await prisma.playerRating.findUnique({\n      where: {\n        userId_variant_playMode: {\n          userId: superTester.id,\n          variant: variant,\n          playMode: \"CASUAL\",\n        },\n      },\n    });\n\n    if (!existingSuperRating) {\n      await prisma.playerRating.create({\n        data: {\n          userId: superTester.id,\n          variant: variant,\n          playMode: \"CASUAL\",\n          rating: 1450 + Math.floor(Math.random() * 100), // Higher rating for super tester\n          gamesPlayed: 0,\n          wins: 0,\n          losses: 0,\n          draws: 0,\n          provisional: false,\n          peakRating: 1550,\n        },\n      });\n    }\n\n    // Create rating for testuser2\n    const existingUser2Rating = await prisma.playerRating.findUnique({\n      where: {\n        userId_variant_playMode: {\n          userId: testUser2.id,\n          variant: variant,\n          playMode: \"CASUAL\",\n        },\n      },\n    });\n\n    if (!existingUser2Rating) {\n      await prisma.playerRating.create({\n        data: {\n          userId: testUser2.id,\n          variant: variant,\n          playMode: \"CASUAL\",\n          rating: 1250 + Math.floor(Math.random() * 100),\n          gamesPlayed: 0,\n          wins: 0,\n          losses: 0,\n          draws: 0,\n          provisional: false,\n          peakRating: 1350,\n        },\n      });\n    }\n  }\n\n  // Generate 30 games with varied outcomes\n  const games = [];\n  const now = new Date();\n\n  console.log(\"\\nüìä Creating game history...\");\n\n  for (let i = 0; i < 30; i++) {\n    // Vary game outcomes:\n    // - 40% supertester wins\n    // - 30% testuser2 wins\n    // - 20% ongoing games\n    // - 10% draws\n    let winner = null;\n    let currentPlayer = \"red\";\n\n    const rand = Math.random();\n    if (rand < 0.4) {\n      winner = \"red\"; // supertester wins (playing as red)\n    } else if (rand < 0.7) {\n      winner = \"black\"; // testuser2 wins (playing as black)\n    } else if (rand < 0.8) {\n      winner = \"draw\";\n    } else {\n      // Ongoing game\n      winner = null;\n      currentPlayer = i % 2 === 0 ? \"red\" : \"black\";\n    }\n\n    const moveCount = winner\n      ? 20 + Math.floor(Math.random() * 40)\n      : 10 + Math.floor(Math.random() * 20);\n    const gameStartTime = new Date(\n      now.getTime() - (30 - i) * 24 * 60 * 60 * 1000,\n    ); // Spread over last 30 days\n    const variant = variants[Math.floor(Math.random() * variants.length)];\n\n    const game = await prisma.game.create({\n      data: {\n        board: generateBoardState(moveCount, winner),\n        currentPlayer,\n        moveCount,\n        gameMode: \"online\",\n        gameStartTime,\n        winner,\n        player1Id: superTester.id,\n        player2Id: testUser2.id,\n        variant,\n        playMode: \"CASUAL\",\n        boardSize: 8,\n        gameConfig: JSON.stringify({\n          variant,\n          boardSize: 8,\n          captureRequired: true,\n          flyingKings: variant === \"INTERNATIONAL\",\n        }),\n        timeControl: JSON.stringify({\n          type: \"rapid\",\n          initialTime: 600000, // 10 minutes\n          increment: 5000, // 5 second increment\n        }),\n        notation: JSON.stringify([]), // Would contain algebraic notation in real game\n      },\n    });\n\n    // Create game moves\n    const moves = generateGameMoves(game.id, moveCount);\n    await prisma.gameMove.createMany({\n      data: moves,\n    });\n\n    // Create some game events\n    await prisma.gameEvent.create({\n      data: {\n        gameId: game.id,\n        eventType: \"GAME_STARTED\",\n        eventData: JSON.stringify({\n          players: [superTester.username, testUser2.username],\n        }),\n        userId: superTester.id,\n        gameVersion: 1,\n      },\n    });\n\n    if (winner) {\n      await prisma.gameEvent.create({\n        data: {\n          gameId: game.id,\n          eventType: \"GAME_ENDED\",\n          eventData: JSON.stringify({\n            winner,\n            reason: winner === \"draw\" ? \"agreement\" : \"checkmate\",\n          }),\n          userId: winner === \"red\" ? superTester.id : testUser2.id,\n          gameVersion: 1,\n        },\n      });\n    }\n\n    games.push(game);\n\n    const gameStatus = winner ? `${winner} wins` : \"ongoing\";\n    console.log(\n      `‚úÖ Created game ${i + 1}/30: ${variant} - ${gameStatus} (${moveCount} moves)`,\n    );\n  }\n\n  // Update player ratings based on games\n  console.log(\"\\nüìà Updating player statistics...\");\n\n  for (const variant of variants) {\n    const variantGames = games.filter((g) => g.variant === variant);\n\n    const superTesterStats = {\n      wins: variantGames.filter((g) => g.winner === \"red\").length,\n      losses: variantGames.filter((g) => g.winner === \"black\").length,\n      draws: variantGames.filter((g) => g.winner === \"draw\").length,\n      gamesPlayed: variantGames.filter((g) => g.winner !== null).length,\n    };\n\n    const testUser2Stats = {\n      wins: variantGames.filter((g) => g.winner === \"black\").length,\n      losses: variantGames.filter((g) => g.winner === \"red\").length,\n      draws: variantGames.filter((g) => g.winner === \"draw\").length,\n      gamesPlayed: variantGames.filter((g) => g.winner !== null).length,\n    };\n\n    // Update supertester rating\n    await prisma.playerRating.update({\n      where: {\n        userId_variant_playMode: {\n          userId: superTester.id,\n          variant: variant,\n          playMode: \"CASUAL\",\n        },\n      },\n      data: {\n        wins: superTesterStats.wins,\n        losses: superTesterStats.losses,\n        draws: superTesterStats.draws,\n        gamesPlayed: superTesterStats.gamesPlayed,\n        lastGameDate: now,\n        rating: 1450 + superTesterStats.wins * 10 - superTesterStats.losses * 8,\n      },\n    });\n\n    // Update testuser2 rating\n    await prisma.playerRating.update({\n      where: {\n        userId_variant_playMode: {\n          userId: testUser2.id,\n          variant: variant,\n          playMode: \"CASUAL\",\n        },\n      },\n      data: {\n        wins: testUser2Stats.wins,\n        losses: testUser2Stats.losses,\n        draws: testUser2Stats.draws,\n        gamesPlayed: testUser2Stats.gamesPlayed,\n        lastGameDate: now,\n        rating: 1250 + testUser2Stats.wins * 10 - testUser2Stats.losses * 8,\n      },\n    });\n\n    console.log(`Updated ${variant} stats:`);\n    console.log(\n      `  ${superTester.username}: ${superTesterStats.wins}W/${superTesterStats.losses}L/${superTesterStats.draws}D`,\n    );\n    console.log(\n      `  ${testUser2.username}: ${testUser2Stats.wins}W/${testUser2Stats.losses}L/${testUser2Stats.draws}D`,\n    );\n  }\n\n  // Create some messages between the players\n  console.log(\"\\nüí¨ Creating chat messages...\");\n\n  const messages = [\n    \"Good game!\",\n    \"Nice move!\",\n    \"Want to play again?\",\n    \"That was a tough match\",\n    \"You're getting better!\",\n    \"I didn't see that coming\",\n    \"Rematch?\",\n    \"Well played!\",\n  ];\n\n  for (let i = 0; i < 8; i++) {\n    await prisma.message.create({\n      data: {\n        content: messages[i] || \"GG\",\n        senderId: i % 2 === 0 ? superTester.id : testUser2.id,\n        receiverId: i % 2 === 0 ? testUser2.id : superTester.id,\n        read: true,\n        createdAt: new Date(now.getTime() - (8 - i) * 2 * 60 * 60 * 1000), // Spread over last 16 hours\n      },\n    });\n  }\n\n  console.log(\"‚úÖ Created 8 chat messages between players\");\n\n  console.log(\"\\nüéâ Game history seeding completed successfully!\");\n  console.log(`\\nSummary:`);\n  console.log(\n    `- Created 30 games between ${superTester.username} and ${testUser2.username}`,\n  );\n  console.log(\n    `- Generated ${games.reduce((acc, g) => acc + g.moveCount, 0)} total moves`,\n  );\n  console.log(`- Updated player ratings for 3 variants`);\n  console.log(`- Added chat history between players`);\n}\n\nmain()\n  .catch((e) => {\n    console.error(\"‚ùå Error during game seeding:\", e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/prisma/seed.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":25,"column":3,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":30,"endColumn":4,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[876,1022],"text":"// Also check by username\nmainUser ??= await prisma.user.findUnique({\n      where: { username: \"Grootenberg\" },\n    });"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":201,"column":12,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":203,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PrismaClient } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\n\nconst prisma = new PrismaClient();\n\nconst avatarUrls = [\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=Oliver\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=Emma\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=William\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=Sophia\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=James\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=Isabella\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=Benjamin\",\n  \"https://api.dicebear.com/9.x/avataaars/svg?seed=Mia\",\n];\n\nasync function main() {\n  console.log(\"üå± Starting database seeding...\");\n\n  // First, check if the main user exists (chris6rock@gmail.com / Grootenberg)\n  let mainUser = await prisma.user.findUnique({\n    where: { email: \"chris6rock@gmail.com\" },\n  });\n\n  if (!mainUser) {\n    // Also check by username\n    mainUser = await prisma.user.findUnique({\n      where: { username: \"Grootenberg\" },\n    });\n  }\n\n  if (!mainUser) {\n    console.log(\"Creating main user (chris6rock@gmail.com / Grootenberg)...\");\n    const hashedPassword = await bcrypt.hash(\"password123\", 10);\n    mainUser = await prisma.user.create({\n      data: {\n        email: \"chris6rock@gmail.com\",\n        username: \"Grootenberg\",\n        name: \"Chris Grootenberg\",\n        password: hashedPassword,\n        emailVerified: new Date(),\n      },\n    });\n  }\n\n  console.log(`Main user found/created: ${mainUser.username} (${mainUser.id})`);\n\n  // Create 15 test users\n  const testUsers = [];\n  for (let i = 1; i <= 15; i++) {\n    // Special naming for testuser1\n    const username = i === 1 ? \"supertester\" : `testuser${i}`;\n    const email =\n      i === 1 ? \"supertester@example.com\" : `testuser${i}@example.com`;\n    const name = i === 1 ? \"Super Tester\" : `Test User ${i}`;\n\n    // Check if user already exists\n    let user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      const hashedPassword = await bcrypt.hash(`password${i}`, 10);\n\n      // Half of the users (8 out of 15) get avatar images\n      const avatarData =\n        i <= 8\n          ? {\n              image: avatarUrls[i - 1],\n              avatarKey: `avatar-${username}`,\n            }\n          : {};\n\n      user = await prisma.user.create({\n        data: {\n          email,\n          username,\n          name,\n          password: hashedPassword,\n          emailVerified: new Date(),\n          ...avatarData,\n        },\n      });\n      console.log(`‚úÖ Created user: ${username}`);\n    } else {\n      console.log(`‚è© User already exists: ${username}`);\n    }\n\n    testUsers.push(user);\n  }\n\n  // Create friendships between all test users and the main user\n  console.log(\"\\nü§ù Creating friendships with main user...\");\n\n  for (const testUser of testUsers) {\n    // Check if friendship already exists (in either direction)\n    const existingFriendship = await prisma.friendship.findFirst({\n      where: {\n        OR: [\n          { senderId: mainUser.id, receiverId: testUser.id },\n          { senderId: testUser.id, receiverId: mainUser.id },\n        ],\n      },\n    });\n\n    if (!existingFriendship) {\n      // Create accepted friendship\n      await prisma.friendship.create({\n        data: {\n          senderId: mainUser.id,\n          receiverId: testUser.id,\n          status: \"ACCEPTED\",\n        },\n      });\n      console.log(\n        `‚úÖ Created friendship: ${mainUser.username} <-> ${testUser.username}`,\n      );\n    } else {\n      console.log(\n        `‚è© Friendship already exists: ${mainUser.username} <-> ${testUser.username}`,\n      );\n    }\n  }\n\n  // Create some additional friendships between test users for a more realistic network\n  console.log(\"\\nüîó Creating additional friendships between test users...\");\n\n  // Create friendships between consecutive test users\n  for (let i = 0; i < testUsers.length - 1; i++) {\n    const user1 = testUsers[i];\n    const user2 = testUsers[i + 1];\n\n    if (!user1 || !user2) continue;\n\n    const existingFriendship = await prisma.friendship.findFirst({\n      where: {\n        OR: [\n          { senderId: user1.id, receiverId: user2.id },\n          { senderId: user2.id, receiverId: user1.id },\n        ],\n      },\n    });\n\n    if (!existingFriendship) {\n      await prisma.friendship.create({\n        data: {\n          senderId: user1.id,\n          receiverId: user2.id,\n          status: \"ACCEPTED\",\n        },\n      });\n      console.log(\n        `‚úÖ Created friendship: ${user1.username} <-> ${user2.username}`,\n      );\n    }\n  }\n\n  // Create some random additional friendships\n  for (let i = 0; i < 10; i++) {\n    const randomIndex1 = Math.floor(Math.random() * testUsers.length);\n    const randomIndex2 = Math.floor(Math.random() * testUsers.length);\n\n    if (randomIndex1 === randomIndex2) continue;\n\n    const user1 = testUsers[randomIndex1];\n    const user2 = testUsers[randomIndex2];\n\n    if (!user1 || !user2) continue;\n\n    const existingFriendship = await prisma.friendship.findFirst({\n      where: {\n        OR: [\n          { senderId: user1.id, receiverId: user2.id },\n          { senderId: user2.id, receiverId: user1.id },\n        ],\n      },\n    });\n\n    if (!existingFriendship) {\n      await prisma.friendship.create({\n        data: {\n          senderId: user1.id,\n          receiverId: user2.id,\n          status: Math.random() > 0.2 ? \"ACCEPTED\" : \"PENDING\", // 80% accepted, 20% pending\n        },\n      });\n      console.log(\n        `‚úÖ Created friendship: ${user1.username} <-> ${user2.username}`,\n      );\n    }\n  }\n\n  console.log(\"\\n‚úÖ Database seeding completed successfully!\");\n}\n\nmain()\n  .catch((e) => {\n    console.error(\"‚ùå Error during seeding:\", e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/AIDifficultySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Board-multi-config.test.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'variant' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":73},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'variant' is defined but never used. Allowed unused args must match /^_/u.","line":144,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":74},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'variant' is defined but never used. Allowed unused args must match /^_/u.","line":188,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":70},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'variant' is defined but never used. Allowed unused args must match /^_/u.","line":227,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":15},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'variant' is defined but never used. Allowed unused args must match /^_/u.","line":265,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":32},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'variant' is defined but never used. Allowed unused args must match /^_/u.","line":303,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { render, fireEvent } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Board } from \"./Board\";\nimport type { BoardVariant } from \"~/lib/game/variants\";\nimport { createInitialBoard } from \"~/lib/game/logic\";\nimport type { Board as BoardType } from \"~/lib/game/logic\";\n\ndescribe(\"Board Component - Multiple Configurations\", () => {\n  const mockOnSquareClick = vi.fn();\n  const mockOnDragStart = vi.fn();\n  const mockOnDragEnd = vi.fn();\n  const mockOnDrop = vi.fn();\n\n  const variants: BoardVariant[] = [\"american\", \"international\", \"canadian\"];\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe.each(variants)(\"Board rendering - %s\", (variant) => {\n    const board = createInitialBoard();\n    const size = 8; // Board component currently only supports 8x8, regardless of variant\n\n    const defaultProps = {\n      board,\n      selectedPosition: null,\n      draggingPosition: null,\n      validMoves: [],\n      mustCapturePositions: [],\n      currentPlayer: \"red\" as const,\n      size,\n      onSquareClick: mockOnSquareClick,\n      onDragStart: mockOnDragStart,\n      onDragEnd: mockOnDragEnd,\n      onDrop: mockOnDrop,\n    };\n\n    it(`should render ${size * size} squares for ${variant}`, () => {\n      render(<Board {...defaultProps} />);\n\n      const squares = document.querySelectorAll(\".aspect-square\");\n      expect(squares).toHaveLength(size * size);\n    });\n\n    it(`should have correct grid layout for ${size}x${size} board`, () => {\n      render(<Board {...defaultProps} />);\n\n      const gridContainer = document.querySelector(\".grid\");\n      expect(gridContainer).toBeInTheDocument();\n\n      // Check if the grid style is applied\n      const style = window.getComputedStyle(gridContainer!);\n      expect(style.gridTemplateColumns).toContain(`repeat(${size}`);\n    });\n\n    it(`should render correct number of pieces for ${variant}`, () => {\n      render(<Board {...defaultProps} />);\n\n      const pieceRows = Math.floor(size / 2) - 1;\n      const expectedPiecesPerSide = Math.floor((size * pieceRows) / 2);\n      const totalExpectedPieces = expectedPiecesPerSide * 2;\n\n      // Count draggable pieces (current player) and non-draggable (opponent)\n      const allPieces = document.querySelectorAll(\"[draggable]\");\n      expect(allPieces).toHaveLength(totalExpectedPieces);\n\n      // Count red pieces (draggable when currentPlayer is 'red')\n      const draggablePieces = document.querySelectorAll('[draggable=\"true\"]');\n      expect(draggablePieces).toHaveLength(expectedPiecesPerSide);\n    });\n\n    it(`should position pieces correctly on ${size}x${size} board`, () => {\n      render(<Board {...defaultProps} />);\n\n      // Check that pieces are only on dark squares\n      const squares = document.querySelectorAll(\".aspect-square\");\n      squares.forEach((square, index) => {\n        const row = Math.floor(index / size);\n        const col = index % size;\n        const isDark = (row + col) % 2 === 1;\n\n        const hasPiece = square.querySelector(\"[draggable]\");\n        if (hasPiece) {\n          // Pieces should only be on dark squares\n          expect(isDark).toBe(true);\n\n          // Pieces should be in correct rows\n          const pieceRows = Math.floor(size / 2) - 1;\n          const inTopRows = row < pieceRows;\n          const inBottomRows = row >= size - pieceRows;\n          expect(inTopRows || inBottomRows).toBe(true);\n        }\n      });\n    });\n  });\n\n  describe(\"Board interactions with different configs\", () => {\n    it.each(variants)(\"should handle clicks on %s board\", async (variant) => {\n      const board = createInitialBoard();\n      const size = 8; // Board component currently only supports 8x8\n\n      const props = {\n        board,\n        selectedPosition: null,\n        draggingPosition: null,\n        validMoves: [],\n        mustCapturePositions: [],\n        currentPlayer: \"red\" as const,\n        size,\n        onSquareClick: mockOnSquareClick,\n        onDragStart: mockOnDragStart,\n        onDragEnd: mockOnDragEnd,\n        onDrop: mockOnDrop,\n      };\n\n      render(<Board {...props} />);\n\n      const squares = document.querySelectorAll(\".aspect-square\");\n\n      // Click on different positions based on board size\n      const testPositions = [\n        0, // First square\n        size - 1, // Last square in first row\n        size * size - 1, // Last square\n        Math.floor((size * size) / 2), // Middle square\n      ];\n\n      for (const pos of testPositions) {\n        if (squares[pos]) {\n          await userEvent.click(squares[pos]);\n\n          const expectedRow = Math.floor(pos / size);\n          const expectedCol = pos % size;\n\n          expect(mockOnSquareClick).toHaveBeenCalledWith({\n            row: expectedRow,\n            col: expectedCol,\n          });\n        }\n      }\n    });\n\n    it.each(variants)(\"should handle drag and drop on %s board\", (variant) => {\n      const board = createInitialBoard();\n      const size = 8; // Board component currently only supports 8x8\n\n      // Test drag and drop functionality\n\n      const props = {\n        board,\n        selectedPosition: null,\n        draggingPosition: null,\n        validMoves: [],\n        mustCapturePositions: [],\n        currentPlayer: \"red\" as const,\n        size,\n        onSquareClick: mockOnSquareClick,\n        onDragStart: mockOnDragStart,\n        onDragEnd: mockOnDragEnd,\n        onDrop: mockOnDrop,\n      };\n\n      render(<Board {...props} />);\n\n      const pieces = document.querySelectorAll('[draggable=\"true\"]');\n      expect(pieces.length).toBeGreaterThan(0);\n\n      if (pieces[0]) {\n        const mockDataTransfer = {\n          effectAllowed: \"\",\n          setData: vi.fn(),\n        };\n\n        fireEvent.dragStart(pieces[0], {\n          dataTransfer: mockDataTransfer,\n        });\n\n        expect(mockOnDragStart).toHaveBeenCalled();\n\n        fireEvent.dragEnd(pieces[0]);\n        expect(mockOnDragEnd).toHaveBeenCalled();\n      }\n    });\n  });\n\n  describe(\"Board display features\", () => {\n    it.each(variants)(\"should show valid moves on %s board\", (variant) => {\n      const board = createInitialBoard();\n      const size = 8; // Board component currently only supports 8x8\n\n      const midRow = Math.floor(size / 2);\n      const midCol = Math.floor(size / 2);\n\n      const props = {\n        board,\n        selectedPosition: null,\n        draggingPosition: null,\n        validMoves: [\n          {\n            from: { row: midRow, col: midCol },\n            to: { row: midRow - 1, col: midCol - 1 },\n          },\n          {\n            from: { row: midRow, col: midCol },\n            to: { row: midRow - 1, col: midCol + 1 },\n          },\n        ],\n        mustCapturePositions: [],\n        currentPlayer: \"red\" as const,\n        size,\n        onSquareClick: mockOnSquareClick,\n        onDragStart: mockOnDragStart,\n        onDragEnd: mockOnDragEnd,\n        onDrop: mockOnDrop,\n      };\n\n      render(<Board {...props} />);\n\n      // Check for move indicators\n      const indicators = document.querySelectorAll(\".animate-pulse\");\n      expect(indicators).toHaveLength(2);\n    });\n\n    it.each(variants)(\n      \"should highlight selected square on %s board\",\n      (variant) => {\n        const board = createInitialBoard();\n        const size = 8; // Board component currently only supports 8x8\n\n        const selectedPos = {\n          row: Math.floor(size / 2),\n          col: Math.floor(size / 2),\n        };\n\n        const props = {\n          board,\n          selectedPosition: selectedPos,\n          draggingPosition: null,\n          validMoves: [],\n          mustCapturePositions: [],\n          currentPlayer: \"red\" as const,\n          size,\n          onSquareClick: mockOnSquareClick,\n          onDragStart: mockOnDragStart,\n          onDragEnd: mockOnDragEnd,\n          onDrop: mockOnDrop,\n        };\n\n        render(<Board {...props} />);\n\n        const squares = document.querySelectorAll(\".aspect-square\");\n        const selectedIndex = selectedPos.row * size + selectedPos.col;\n        const selectedSquare = squares[selectedIndex];\n\n        // Check for selection styling (box shadow in this case)\n        const style = window.getComputedStyle(selectedSquare!);\n        expect(style.boxShadow).toContain(\"inset\");\n      },\n    );\n  });\n\n  describe(\"Performance and edge cases\", () => {\n    it(\"should handle empty board for all configs\", () => {\n      variants.forEach((variant) => {\n        const size = 8; // Board component currently only supports 8x8\n        const createEmptyBoard = (size: number): BoardType => {\n          return Array.from({ length: size }, () =>\n            Array.from({ length: size }, () => null),\n          );\n        };\n        const emptyBoard = createEmptyBoard(size);\n\n        const props = {\n          board: emptyBoard,\n          selectedPosition: null,\n          draggingPosition: null,\n          validMoves: [],\n          mustCapturePositions: [],\n          currentPlayer: \"red\" as const,\n          size,\n          onSquareClick: mockOnSquareClick,\n          onDragStart: mockOnDragStart,\n          onDragEnd: mockOnDragEnd,\n          onDrop: mockOnDrop,\n        };\n\n        const { container } = render(<Board {...props} />);\n\n        // Should render without errors\n        expect(container).toBeInTheDocument();\n\n        // Should have all squares but no pieces\n        const squares = container.querySelectorAll(\".aspect-square\");\n        expect(squares).toHaveLength(size * size);\n\n        const pieces = container.querySelectorAll(\"[draggable]\");\n        expect(pieces).toHaveLength(0);\n      });\n    });\n\n    it(\"should handle maximum piece configurations\", () => {\n      variants.forEach((variant) => {\n        const size = 8; // Board component currently only supports 8x8\n        const createMaxBoard = (size: number): BoardType => {\n          return Array.from({ length: size }, () =>\n            Array.from({ length: size }, () => null),\n          );\n        };\n        const maxBoard = createMaxBoard(size);\n\n        // Fill all dark squares with pieces\n        for (let row = 0; row < size; row++) {\n          for (let col = 0; col < size; col++) {\n            if ((row + col) % 2 === 1) {\n              maxBoard[row]![col] = {\n                color: row < size / 2 ? \"black\" : \"red\",\n                type: \"regular\",\n              };\n            }\n          }\n        }\n\n        const props = {\n          board: maxBoard,\n          selectedPosition: null,\n          draggingPosition: null,\n          validMoves: [],\n          mustCapturePositions: [],\n          currentPlayer: \"red\" as const,\n          size,\n          onSquareClick: mockOnSquareClick,\n          onDragStart: mockOnDragStart,\n          onDragEnd: mockOnDragEnd,\n          onDrop: mockOnDrop,\n        };\n\n        const { container } = render(<Board {...props} />);\n\n        // Should handle maximum pieces without errors\n        const pieces = container.querySelectorAll(\"[draggable]\");\n        const maxPossiblePieces = Math.floor((size * size) / 2);\n        expect(pieces).toHaveLength(maxPossiblePieces);\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Board.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Board.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'effectiveFocus' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5844,5847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5844,5847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `any` value.","line":189,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  type Board as BoardType,\n  type Position,\n  type Move,\n} from \"~/lib/game/logic\";\nimport { getBoardGridStyleFromSize } from \"~/app/(checkers)/_lib/board-style\";\nimport { Square } from \"./Square.motion\";\nimport { Piece } from \"./Piece\";\nimport { MoveSequenceArrows } from \"./MoveSequenceArrows\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\ninterface BoardProps {\n  board: BoardType;\n  selectedPosition: Position | null;\n  draggingPosition: Position | null;\n  validMoves: Move[];\n  mustCapturePositions: Position[];\n  currentPlayer: \"red\" | \"black\";\n  keyboardFocusPosition?: Position | null;\n  size?: number;\n  shouldFlip?: boolean;\n  replayMode?: boolean;\n  onSquareClick: (position: Position, event?: React.MouseEvent) => void;\n  onDragStart: (position: Position) => void;\n  onDragEnd: () => void;\n  onDrop: (position: Position) => void;\n}\n\nexport function Board({\n  board,\n  selectedPosition,\n  draggingPosition,\n  validMoves,\n  mustCapturePositions,\n  currentPlayer,\n  keyboardFocusPosition,\n  size,\n  shouldFlip = false,\n  replayMode = false,\n  onSquareClick,\n  onDragStart,\n  onDragEnd,\n  onDrop,\n}: BoardProps) {\n  const boardSize = size ?? board.length;\n  const [internalFocus, setInternalFocus] = useState<Position | null>(\n    keyboardFocusPosition ?? selectedPosition ?? { row: 0, col: 0 },\n  );\n  const effectiveFocus: Position | null =\n    keyboardFocusPosition ?? internalFocus;\n\n  const squareRefs = useRef<Map<string, HTMLDivElement>>(new Map());\n  const setSquareRef = useCallback(\n    (key: string, node: HTMLDivElement | null) => {\n      if (!node) {\n        squareRefs.current.delete(key);\n      } else {\n        squareRefs.current.set(key, node);\n      }\n    },\n    [],\n  );\n\n  const focusSquare = useCallback((pos: Position | null) => {\n    if (!pos) return;\n    setInternalFocus(pos);\n    const k = `${pos.row}-${pos.col}`;\n    const node = squareRefs.current.get(k);\n    if (node) {\n      queueMicrotask(() => node.focus());\n    }\n  }, []);\n\n  useEffect(() => {\n    if (selectedPosition) {\n      focusSquare(selectedPosition);\n    }\n  }, [selectedPosition, focusSquare]);\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  // Find multi-jump moves for arrow display\n  const multiJumpMoves = validMoves.filter(\n    (move) => move.path && move.path.length > 2,\n  );\n\n  // Helper function to transform positions when board is flipped\n  const transformPosition = (pos: Position): Position => {\n    if (!shouldFlip) return pos;\n    const boardSize = size ?? board.length;\n    return {\n      row: boardSize - 1 - pos.row,\n      col: boardSize - 1 - pos.col,\n    };\n  };\n\n  // Transform positions for rendering when board is flipped\n  const renderBoard = shouldFlip\n    ? [...board].reverse().map((row) => [...row].reverse())\n    : board;\n\n  const moveFocus = useCallback(\n    (from: Position, dRow: number, dCol: number): Position => {\n      const mult = shouldFlip ? -1 : 1;\n      const nextRow = Math.min(\n        Math.max(from.row + dRow * mult, 0),\n        boardSize - 1,\n      );\n      const nextCol = Math.min(\n        Math.max(from.col + dCol * mult, 0),\n        boardSize - 1,\n      );\n      return { row: nextRow, col: nextCol };\n    },\n    [boardSize, shouldFlip],\n  );\n\n  const moveFocusTab = useCallback(\n    (from: Position, reverse: boolean): Position | null => {\n      let r = from.row;\n      let c = from.col + (reverse ? -1 : 1);\n      if (c < 0) {\n        c = boardSize - 1;\n        r -= 1;\n      } else if (c >= boardSize) {\n        c = 0;\n        r += 1;\n      }\n      if (r < 0 || r >= boardSize) return null;\n      return { row: r, col: c };\n    },\n    [boardSize],\n  );\n\n  return (\n    <div\n      className=\"relative box-border grid h-full w-full gap-0 overflow-hidden rounded-lg border-8 shadow-2xl\"\n      role=\"grid\"\n      aria-label=\"Checkers board\"\n      style={{\n        borderColor: \"var(--board-border)\",\n        backgroundColor: \"var(--board-border)\",\n        ...getBoardGridStyleFromSize(boardSize),\n      }}\n    >\n      {renderBoard.map((row, rowIndex) =>\n        row.map((piece, colIndex) => {\n          // Calculate actual position (accounting for flip)\n          const actualRow = shouldFlip ? board.length - 1 - rowIndex : rowIndex;\n          const actualCol = shouldFlip ? board.length - 1 - colIndex : colIndex;\n          const position = { row: actualRow, col: actualCol };\n          const isBlack = (actualRow + actualCol) % 2 === 1;\n          const isSelected =\n            selectedPosition?.row === actualRow &&\n            selectedPosition?.col === actualCol;\n          const isDragging =\n            draggingPosition?.row === actualRow &&\n            draggingPosition?.col === actualCol;\n          const isKeyboardFocused =\n            keyboardFocusPosition?.row === actualRow &&\n            keyboardFocusPosition?.col === actualCol;\n          const isPossibleMove = validMoves.some(\n            (move) => move.to.row === actualRow && move.to.col === actualCol,\n          );\n          const mustCapture = mustCapturePositions.some(\n            (pos) => pos.row === actualRow && pos.col === actualCol,\n          );\n          const isDraggable = !replayMode && piece?.color === currentPlayer;\n          const key = `${actualRow}-${actualCol}`;\n\n          return (\n            <Square\n              key={`${rowIndex}-${colIndex}`}\n              position={position}\n              isBlack={isBlack}\n              isHighlighted={false}\n              isSelected={isSelected}\n              isPossibleMove={isPossibleMove}\n              isKeyboardFocused={isKeyboardFocused}\n              onKeyDown={(e) => {\n                if (replayMode) return;\n                if (\n                  e.key === \"Enter\" ||\n                  e.key === \" \" ||\n                  e.key === \"Spacebar\" ||\n                  (e as any).code === \"Space\"\n                ) {\n                  e.preventDefault();\n                  onSquareClick(position);\n                  return;\n                }\n                if (e.key === \"ArrowUp\") {\n                  e.preventDefault();\n                  const next = moveFocus(position, -1, 0);\n                  focusSquare(next);\n                } else if (e.key === \"ArrowDown\") {\n                  e.preventDefault();\n                  const next = moveFocus(position, 1, 0);\n                  focusSquare(next);\n                } else if (e.key === \"ArrowLeft\") {\n                  e.preventDefault();\n                  const next = moveFocus(position, 0, -1);\n                  focusSquare(next);\n                } else if (e.key === \"ArrowRight\") {\n                  e.preventDefault();\n                  const next = moveFocus(position, 0, 1);\n                  focusSquare(next);\n                } else if (e.key === \"Tab\") {\n                  const next = moveFocusTab(position, e.shiftKey);\n                  if (next) {\n                    e.preventDefault();\n                    focusSquare(next);\n                  }\n                }\n              }}\n              onFocus={() => {\n                if (!isKeyboardFocused) setInternalFocus(position);\n              }}\n              tabIndex={isKeyboardFocused ? 0 : -1}\n              role=\"gridcell\"\n              ariaLabel={`Square ${actualRow + 1}, ${actualCol + 1}`}\n              ariaSelected={isSelected}\n              ref={(node) => setSquareRef(key, node)}\n              onDrop={\n                replayMode\n                  ? undefined\n                  : (e) => {\n                      e.preventDefault();\n                      onDrop(position);\n                    }\n              }\n              onDragOver={replayMode ? undefined : handleDragOver}\n            >\n              {piece && (\n                <Piece\n                  piece={piece}\n                  isDraggable={isDraggable}\n                  isDragging={isDragging}\n                  mustCapture={mustCapture}\n                  hasOtherMustCapture={mustCapturePositions.length > 0}\n                  onDragStart={\n                    replayMode\n                      ? undefined\n                      : (e: React.DragEvent) => {\n                          e.dataTransfer.effectAllowed = \"move\";\n                          onDragStart(position);\n                        }\n                  }\n                  onDragEnd={\n                    replayMode\n                      ? undefined\n                      : (_e: React.DragEvent) => {\n                          // ignore event, just delegate to parent\n                          onDragEnd();\n                        }\n                  }\n                />\n              )}\n            </Square>\n          );\n        }),\n      )}\n\n      {/* Arrow overlays for multi-jump sequences */}\n      {selectedPosition &&\n        multiJumpMoves.map((move, index) => {\n          const transformedPath =\n            shouldFlip && move.path\n              ? move.path.map((pos) => transformPosition(pos))\n              : (move.path ?? []);\n\n          return (\n            <MoveSequenceArrows\n              key={`arrow-${index}`}\n              sequence={transformedPath}\n              show={\n                selectedPosition.row === move.from.row &&\n                selectedPosition.col === move.from.col\n              }\n              boardSize={size ?? board.length}\n            />\n          );\n        })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/BoardPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/BoardVariantSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an error typed value.","line":74,"column":19,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":74,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Progress } from \"~/components/ui/progress\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Activity, Award, AlertTriangle, Brain } from \"lucide-react\";\nimport type { GameAnalysis } from \"~/lib/types/move-analysis\";\nimport {\n  MOVE_INDICATORS,\n  formatEvaluation,\n  getEvaluationBarWidth,\n  getPlayerAdvantage,\n} from \"~/lib/types/move-analysis\";\nimport { cn } from \"~/lib/utils\";\n\ninterface GameAnalysisProps {\n  analysis: GameAnalysis | null;\n  currentMoveIndex: number;\n  isAnalyzing?: boolean;\n  onMoveClick?: (moveIndex: number) => void;\n}\n\nexport function GameAnalysis({\n  analysis,\n  currentMoveIndex,\n  isAnalyzing = false,\n  onMoveClick,\n}: GameAnalysisProps) {\n  const [selectedTab, setSelectedTab] = useState<\n    \"overview\" | \"moves\" | \"graph\"\n  >(\"overview\");\n\n  if (!analysis && !isAnalyzing) {\n    return (\n      <Card className=\"h-full border-blue-300 bg-gradient-to-br from-blue-50 to-blue-100\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-sm text-blue-900\">\n            <Brain className=\"h-4 w-4\" />\n            Game Analysis\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex h-32 items-center justify-center\">\n          <p className=\"text-sm text-gray-500\">No analysis available</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isAnalyzing) {\n    return (\n      <Card className=\"h-full border-blue-300 bg-gradient-to-br from-blue-50 to-blue-100\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-sm text-blue-900\">\n            <Brain className=\"h-4 w-4 animate-pulse\" />\n            Analyzing Game...\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex h-32 flex-col items-center justify-center gap-2\">\n          <div className=\"w-full max-w-xs\">\n            <Progress value={33} className=\"w-full\" />\n          </div>\n          <p className=\"text-xs text-gray-600\">Computing best moves...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!analysis) return null;\n\n  const currentMove = analysis.moves[currentMoveIndex];\n  const currentEval = currentMove?.positionEvalAfter ?? 0;\n  const { player: advantagePlayer, advantage } =\n    getPlayerAdvantage(currentEval);\n\n  // Calculate stats\n  const redBrilliant = Object.entries(analysis.moveQualityCount.red)\n    .filter(([cat]) => cat === \"brilliant\" || cat === \"excellent\")\n    .reduce((sum, [_, count]) => sum + count, 0);\n\n  const blackBrilliant = Object.entries(analysis.moveQualityCount.black)\n    .filter(([cat]) => cat === \"brilliant\" || cat === \"excellent\")\n    .reduce((sum, [_, count]) => sum + count, 0);\n\n  return (\n    <Card className=\"flex h-full flex-col border-blue-300 bg-gradient-to-br from-blue-50 to-blue-100\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"flex items-center justify-between text-sm text-blue-900\">\n          <div className=\"flex items-center gap-2\">\n            <Brain className=\"h-4 w-4\" />\n            Game Analysis\n          </div>\n          <div className=\"flex gap-1\">\n            <Button\n              size=\"sm\"\n              variant={selectedTab === \"overview\" ? \"default\" : \"ghost\"}\n              className=\"h-6 px-2 text-xs\"\n              onClick={() => setSelectedTab(\"overview\")}\n            >\n              Overview\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={selectedTab === \"moves\" ? \"default\" : \"ghost\"}\n              className=\"h-6 px-2 text-xs\"\n              onClick={() => setSelectedTab(\"moves\")}\n            >\n              Moves\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={selectedTab === \"graph\" ? \"default\" : \"ghost\"}\n              className=\"h-6 px-2 text-xs\"\n              onClick={() => setSelectedTab(\"graph\")}\n            >\n              Graph\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex min-h-0 flex-1 flex-col gap-3 p-3\">\n        {/* Current Position Evaluation Bar */}\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"font-medium\">Position Evaluation</span>\n            <span\n              className={cn(\n                \"font-bold\",\n                advantagePlayer === \"red\" ? \"text-red-600\" : \"text-gray-800\",\n              )}\n            >\n              {formatEvaluation(currentEval)}\n            </span>\n          </div>\n          <div className=\"relative h-6 overflow-hidden rounded-full bg-gray-800\">\n            <div\n              className=\"absolute top-0 left-0 h-full bg-white transition-all duration-300\"\n              style={{ width: `${getEvaluationBarWidth(currentEval)}%` }}\n            />\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-xs font-medium text-gray-400\">\n                {advantage > 10\n                  ? `${advantagePlayer === \"red\" ? \"Red\" : \"Black\"} advantage`\n                  : \"Equal\"}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {selectedTab === \"overview\" && (\n          <div className=\"flex-1 space-y-3 overflow-y-auto\">\n            {/* Accuracy Scores */}\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div className=\"rounded-lg bg-white/50 p-2\">\n                <div className=\"mb-1 flex items-center justify-between\">\n                  <span className=\"text-xs font-medium text-red-700\">Red</span>\n                  <span className=\"text-sm font-bold\">\n                    {analysis.averageAccuracy.red}%\n                  </span>\n                </div>\n                <Progress\n                  value={analysis.averageAccuracy.red}\n                  className=\"h-1\"\n                />\n              </div>\n              <div className=\"rounded-lg bg-white/50 p-2\">\n                <div className=\"mb-1 flex items-center justify-between\">\n                  <span className=\"text-xs font-medium text-gray-700\">\n                    Black\n                  </span>\n                  <span className=\"text-sm font-bold\">\n                    {analysis.averageAccuracy.black}%\n                  </span>\n                </div>\n                <Progress\n                  value={analysis.averageAccuracy.black}\n                  className=\"h-1\"\n                />\n              </div>\n            </div>\n\n            {/* Special Moves */}\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div className=\"flex items-center gap-2 rounded-lg bg-white/50 p-2\">\n                <Award className=\"h-4 w-4 text-cyan-600\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-xs text-gray-600\">Brilliant/Excellent</p>\n                  <p className=\"text-sm font-bold\">\n                    {redBrilliant} / {blackBrilliant}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2 rounded-lg bg-white/50 p-2\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-xs text-gray-600\">Blunders</p>\n                  <p className=\"text-sm font-bold\">\n                    {analysis.blunders.length}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Game Sharpness */}\n            <div className=\"rounded-lg bg-white/50 p-2\">\n              <div className=\"mb-1 flex items-center justify-between\">\n                <div className=\"flex items-center gap-1\">\n                  <Activity className=\"h-3 w-3 text-orange-600\" />\n                  <span className=\"text-xs font-medium\">Game Sharpness</span>\n                </div>\n                <span className=\"text-sm font-bold\">\n                  {analysis.gameSharpness}%\n                </span>\n              </div>\n              <Progress value={analysis.gameSharpness} className=\"h-1\" />\n              <p className=\"mt-1 text-xs text-gray-600\">\n                {analysis.gameSharpness > 60\n                  ? \"Highly tactical\"\n                  : analysis.gameSharpness > 30\n                    ? \"Balanced\"\n                    : \"Positional\"}\n              </p>\n            </div>\n\n            {/* Critical Moments */}\n            {analysis.criticalMoments.length > 0 && (\n              <div className=\"rounded-lg bg-white/50 p-2\">\n                <p className=\"mb-1 text-xs font-medium\">Critical Moments</p>\n                <div className=\"flex flex-wrap gap-1\">\n                  {analysis.criticalMoments.slice(0, 5).map((moveIdx) => (\n                    <Badge\n                      key={moveIdx}\n                      variant=\"outline\"\n                      className=\"cursor-pointer text-xs hover:bg-blue-100\"\n                      onClick={() => onMoveClick?.(moveIdx)}\n                    >\n                      Move {moveIdx + 1}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {selectedTab === \"moves\" && (\n          <div className=\"flex-1 space-y-1 overflow-y-auto\">\n            {currentMove && (\n              <div className=\"mb-2 rounded-lg border-2 border-blue-400 bg-white/70 p-2\">\n                <div className=\"mb-1 flex items-center justify-between\">\n                  <span className=\"text-xs font-medium\">Current Move</span>\n                  <Badge\n                    variant=\"outline\"\n                    style={{\n                      backgroundColor: `${MOVE_INDICATORS[currentMove.category].color}20`,\n                      borderColor: MOVE_INDICATORS[currentMove.category].color,\n                    }}\n                  >\n                    {MOVE_INDICATORS[currentMove.category].icon}{\" \"}\n                    {currentMove.category}\n                  </Badge>\n                </div>\n                {currentMove.explanation && (\n                  <p className=\"text-xs text-gray-600\">\n                    {currentMove.explanation}\n                  </p>\n                )}\n              </div>\n            )}\n\n            {/* Recent moves with quality */}\n            <div className=\"space-y-1\">\n              {analysis.moves\n                .slice(Math.max(0, currentMoveIndex - 2), currentMoveIndex + 3)\n                .map((move, idx) => {\n                  const actualIdx = Math.max(0, currentMoveIndex - 2) + idx;\n                  const isCurrentMove = actualIdx === currentMoveIndex;\n                  const indicator = MOVE_INDICATORS[move.category];\n\n                  return (\n                    <div\n                      key={actualIdx}\n                      className={cn(\n                        \"flex cursor-pointer items-center gap-2 rounded p-1 transition-colors\",\n                        isCurrentMove\n                          ? \"bg-blue-200\"\n                          : \"bg-white/50 hover:bg-white/70\",\n                      )}\n                      onClick={() => onMoveClick?.(actualIdx)}\n                    >\n                      <span className=\"w-8 font-mono text-xs\">\n                        {actualIdx + 1}.\n                      </span>\n                      <span\n                        className=\"w-6 text-center text-lg\"\n                        title={indicator.description}\n                      >\n                        {indicator.icon || \"‚Ä¢\"}\n                      </span>\n                      <div className=\"flex-1\">\n                        <span\n                          className={cn(\n                            \"text-xs font-medium\",\n                            move.category === \"blunder\" && \"text-red-600\",\n                            move.category === \"mistake\" && \"text-orange-600\",\n                            move.category === \"brilliant\" && \"text-cyan-600\",\n                            move.category === \"excellent\" && \"text-yellow-600\",\n                          )}\n                        >\n                          {indicator.label}\n                        </span>\n                      </div>\n                      <span className=\"text-xs text-gray-500\">\n                        {formatEvaluation(move.positionEvalAfter)}\n                      </span>\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n        )}\n\n        {selectedTab === \"graph\" && (\n          <div className=\"flex flex-1 items-center justify-center\">\n            <div className=\"h-32 w-full rounded-lg bg-white/50 p-2\">\n              <svg viewBox=\"0 0 400 100\" className=\"h-full w-full\">\n                {/* Evaluation graph line */}\n                <polyline\n                  fill=\"none\"\n                  stroke=\"rgb(59, 130, 246)\"\n                  strokeWidth=\"2\"\n                  points={analysis.evaluationGraph\n                    .map((point, idx) => {\n                      const x =\n                        (idx /\n                          Math.max(1, analysis.evaluationGraph.length - 1)) *\n                          380 +\n                        10;\n                      const y = 50 - point.evaluation / 2; // Convert -100 to +100 to 0-100 for Y\n                      return `${x},${y}`;\n                    })\n                    .join(\" \")}\n                />\n\n                {/* Zero line */}\n                <line\n                  x1=\"10\"\n                  y1=\"50\"\n                  x2=\"390\"\n                  y2=\"50\"\n                  stroke=\"gray\"\n                  strokeWidth=\"1\"\n                  strokeDasharray=\"5,5\"\n                />\n\n                {/* Current position indicator */}\n                {currentMoveIndex >= 0 &&\n                  currentMoveIndex < analysis.evaluationGraph.length && (\n                    <circle\n                      cx={\n                        (currentMoveIndex /\n                          Math.max(1, analysis.evaluationGraph.length - 1)) *\n                          380 +\n                        10\n                      }\n                      cy={\n                        50 -\n                        analysis.evaluationGraph[currentMoveIndex]!.evaluation /\n                          2\n                      }\n                      r=\"4\"\n                      fill=\"rgb(239, 68, 68)\"\n                    />\n                  )}\n              </svg>\n              <div className=\"mt-1 flex justify-between text-xs text-gray-500\">\n                <span>Start</span>\n                <span>Move {currentMoveIndex + 1}</span>\n                <span>End</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameConfiguration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameController.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":52,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1333,1419],"text":"\n            The game you&apos;re looking for doesn't exist or has been deleted.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1333,1419],"text":"\n            The game you&lsquo;re looking for doesn't exist or has been deleted.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1333,1419],"text":"\n            The game you&#39;re looking for doesn't exist or has been deleted.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1333,1419],"text":"\n            The game you&rsquo;re looking for doesn't exist or has been deleted.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":52,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1333,1419],"text":"\n            The game you're looking for doesn&apos;t exist or has been deleted.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1333,1419],"text":"\n            The game you're looking for doesn&lsquo;t exist or has been deleted.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1333,1419],"text":"\n            The game you're looking for doesn&#39;t exist or has been deleted.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1333,1419],"text":"\n            The game you're looking for doesn&rsquo;t exist or has been deleted.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":2,"message":"Do not use an `<a>` element to navigate to `/game/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":54,"column":11,"nodeType":"JSXOpeningElement","endLine":57,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { GameProvider } from \"~/lib/game/state/game-context\";\nimport { GameScreen } from \"~/app/(checkers)/_components/game/GameScreen\";\nimport { api } from \"~/trpc/react\";\nimport TextSpinnerLoader from \"~/components/ui/text-spinner-loader\";\n\ninterface GameControllerProps {\n  gameId?: string;\n}\n\nexport function GameController({ gameId }: GameControllerProps) {\n  // If no gameId, create a new local game by default\n  if (!gameId) {\n    return (\n      <GameProvider gameId={undefined} initialConfig={null}>\n        <GameScreen />\n      </GameProvider>\n    );\n  }\n\n  // Fetch game data from the database\n  const {\n    data: gameData,\n    isLoading,\n    error,\n  } = api.game.getById.useQuery(\n    { id: gameId },\n    {\n      retry: false,\n      refetchOnWindowFocus: false,\n    },\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <TextSpinnerLoader />\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !gameData) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"mb-2 text-xl font-semibold text-gray-900\">\n            Game Not Found\n          </h2>\n          <p className=\"text-gray-600\">\n            The game you're looking for doesn't exist or has been deleted.\n          </p>\n          <a\n            href=\"/game\"\n            className=\"mt-4 inline-block text-amber-600 hover:text-amber-700\"\n          >\n            Return to Game Menu\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  // Pass the fetched game configuration to the GameProvider\n  return (\n    <GameProvider gameId={gameId} initialConfig={gameData}>\n      <GameScreen />\n    </GameProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameReplayController.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'mustCapturePositions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":250,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":29},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":296,"column":77,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":296,"endColumn":79}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { api } from \"~/trpc/react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Slider } from \"~/components/ui/slider\";\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"~/components/ui/alert\";\nimport { Separator } from \"~/components/ui/separator\";\nimport { Board } from \"./Board\";\nimport type {\n  Board as BoardType,\n  Move,\n  Position,\n  PieceColor,\n} from \"~/lib/game/logic\";\nimport {\n  createInitialBoard,\n  getValidMoves,\n  makeMove as applyMove,\n  getMustCapturePositions,\n} from \"~/lib/game/logic\";\nimport {\n  Play,\n  Pause,\n  SkipBack,\n  SkipForward,\n  ChevronLeft,\n  ChevronRight,\n  TrendingUp,\n  AlertCircle,\n  Zap,\n  Target,\n  Trophy,\n} from \"lucide-react\";\n\ninterface GameReplayControllerProps {\n  gameId: string;\n  userId: string;\n  analysisMode?: boolean;\n}\n\ninterface GameAnalysis {\n  evaluation: number; // -100 to 100, negative favors black, positive favors red\n  bestMove?: Move;\n  blunder?: boolean;\n  missed?: boolean;\n  brilliant?: boolean;\n  critical?: boolean;\n}\n\nexport default function GameReplayController({\n  gameId,\n  userId,\n  analysisMode = false,\n}: GameReplayControllerProps) {\n  const {\n    data: gameData,\n    isLoading,\n    error,\n  } = api.game.getGameWithMoves.useQuery({ gameId });\n\n  const [currentMoveIndex, setCurrentMoveIndex] = useState(0);\n  const [board, setBoard] = useState<BoardType>(() => createInitialBoard());\n  const [currentPlayer, setCurrentPlayer] = useState<PieceColor>(\"red\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1000); // ms between moves\n  const [analysis, setAnalysis] = useState<GameAnalysis | null>(null);\n  const [selectedPosition, setSelectedPosition] = useState<Position | null>(\n    null,\n  );\n  const [validMoves, setValidMoves] = useState<Move[]>([]);\n\n  // Reconstruct board state up to current move\n  useEffect(() => {\n    if (!gameData?.moves) return;\n\n    let reconstructedBoard: BoardType = createInitialBoard();\n    let player: PieceColor = \"red\";\n\n    // Apply moves up to currentMoveIndex\n    for (let i = 0; i < currentMoveIndex && i < gameData.moves.length; i++) {\n      const move = gameData.moves[i];\n      if (move) {\n        const gameMove: Move = {\n          from: { row: move.fromRow, col: move.fromCol },\n          to: { row: move.toRow, col: move.toCol },\n          captures: move.captures\n            ? (JSON.parse(move.captures) as Position[])\n            : [],\n        };\n\n        reconstructedBoard = applyMove(reconstructedBoard, gameMove);\n        player = player === \"red\" ? \"black\" : \"red\";\n      }\n    }\n\n    setBoard(reconstructedBoard);\n    setCurrentPlayer(player);\n\n    // Analyze current position if in analysis mode\n    if (analysisMode) {\n      analyzePosition(reconstructedBoard, player);\n    }\n  }, [currentMoveIndex, gameData, analysisMode]);\n\n  // Auto-play functionality\n  useEffect(() => {\n    if (!isPlaying || !gameData?.moves) return;\n\n    const timer = setTimeout(() => {\n      if (currentMoveIndex < gameData.moves.length) {\n        setCurrentMoveIndex((prev) => prev + 1);\n      } else {\n        setIsPlaying(false);\n      }\n    }, playbackSpeed);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentMoveIndex, playbackSpeed, gameData]);\n\n  const analyzePosition = (board: BoardType, player: PieceColor) => {\n    // Simple evaluation function for demonstration\n    let evaluation = 0;\n    let redPieces = 0;\n    let blackPieces = 0;\n    let redKings = 0;\n    let blackKings = 0;\n\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row]?.[col];\n        if (piece) {\n          if (piece.color === \"red\") {\n            redPieces++;\n            if (piece.type === \"king\") redKings++;\n          } else {\n            blackPieces++;\n            if (piece.type === \"king\") blackKings++;\n          }\n        }\n      }\n    }\n\n    // Simple material evaluation\n    evaluation = (redPieces - blackPieces) * 10 + (redKings - blackKings) * 5;\n\n    // Get valid moves for analysis - get all moves for all pieces of current player\n    const allMoves: Move[] = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row]?.[col];\n        if (piece && piece.color === player) {\n          const pieceMoves = getValidMoves(board, { row, col }, player);\n          allMoves.push(...pieceMoves);\n        }\n      }\n    }\n    const bestMove = allMoves[0]; // In a real implementation, this would use minimax\n\n    setAnalysis({\n      evaluation,\n      bestMove,\n      blunder: false, // Would need move comparison to determine\n      missed: false,\n      brilliant: false,\n      critical: Math.abs(evaluation) > 50,\n    });\n  };\n\n  const handleNextMove = () => {\n    if (gameData?.moves && currentMoveIndex < gameData.moves.length) {\n      setCurrentMoveIndex((prev) => prev + 1);\n    }\n  };\n\n  const handlePreviousMove = () => {\n    if (currentMoveIndex > 0) {\n      setCurrentMoveIndex((prev) => prev - 1);\n    }\n  };\n\n  const handleReset = () => {\n    setCurrentMoveIndex(0);\n    setIsPlaying(false);\n  };\n\n  const handleMoveClick = (index: number) => {\n    setCurrentMoveIndex(index + 1);\n    setIsPlaying(false);\n  };\n\n  const handleSquareClick = (position: Position) => {\n    const piece = board[position.row]?.[position.col];\n\n    if (piece && analysisMode) {\n      setSelectedPosition(position);\n      const moves = getValidMoves(board, position, currentPlayer);\n      setValidMoves(moves);\n    } else {\n      setSelectedPosition(null);\n      setValidMoves([]);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-12 w-64\" />\n        <Skeleton className=\"h-96 w-full\" />\n        <Skeleton className=\"h-24 w-full\" />\n      </div>\n    );\n  }\n\n  if (error || !gameData) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          Failed to load game data. Please try again.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  const moves = gameData.moves ?? [];\n  const currentMove = moves[currentMoveIndex - 1];\n  const playerColor = gameData.player1Id === userId ? \"red\" : \"black\";\n  // const isUserTurn = currentPlayer === playerColor;\n\n  const getPlayerName = (color: PieceColor) => {\n    if (gameData.gameMode === \"ai\") {\n      return color === \"red\" ? \"Player\" : \"AI\";\n    }\n    if (color === \"red\") {\n      return gameData.player1?.name ?? gameData.player1?.username ?? \"Player 1\";\n    }\n    return gameData.player2?.name ?? gameData.player2?.username ?? \"Player 2\";\n  };\n\n  const mustCapturePositions = getMustCapturePositions(board, currentPlayer);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Game Replay</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            {getPlayerName(\"red\")} vs {getPlayerName(\"black\")} ‚Ä¢{\" \"}\n            {new Date(gameData.gameStartTime).toLocaleDateString()}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {analysisMode && (\n            <Badge variant=\"secondary\" className=\"gap-1\">\n              <TrendingUp className=\"h-3 w-3\" />\n              Analysis Mode\n            </Badge>\n          )}\n          {gameData.winner && (\n            <Badge\n              variant={\n                gameData.winner === playerColor ? \"default\" : \"destructive\"\n              }\n            >\n              {gameData.winner === \"draw\"\n                ? \"Draw\"\n                : gameData.winner === playerColor\n                  ? \"You Won!\"\n                  : \"You Lost\"}\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        {/* Game Board */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-center\">\n                <div className=\"board-fit-max relative aspect-square min-h-0 w-full lg:max-w-[855px]\">\n                  <Board\n                    board={board}\n                    currentPlayer={currentPlayer}\n                    onSquareClick={analysisMode ? handleSquareClick : () => {}}\n                    selectedPosition={analysisMode ? selectedPosition : null}\n                    validMoves={analysisMode ? validMoves : []}\n                    onDragStart={() => {\n                      /* No-op in replay mode */\n                    }}\n                    onDragEnd={() => {\n                      /* No-op in replay mode */\n                    }}\n                    onDrop={() => {\n                      /* No-op in replay mode */\n                    }}\n                    draggingPosition={null}\n                    mustCapturePositions={[]}\n                    replayMode={true}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Playback Controls */}\n          <Card className=\"mt-4\">\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-4\">\n                {/* Progress Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"text-muted-foreground flex justify-between text-sm\">\n                    <span>\n                      Move {currentMoveIndex} of {moves.length}\n                    </span>\n                    <span>\n                      {currentPlayer === \"red\" ? \"Red\" : \"Black\"} to move\n                    </span>\n                  </div>\n                  <Slider\n                    value={[currentMoveIndex]}\n                    max={moves.length}\n                    step={1}\n                    onValueChange={(value) =>\n                      setCurrentMoveIndex(value[0] ?? 0)\n                    }\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"flex items-center justify-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleReset}\n                    disabled={currentMoveIndex === 0}\n                  >\n                    <SkipBack className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handlePreviousMove}\n                    disabled={currentMoveIndex === 0}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"default\"\n                    size=\"icon\"\n                    onClick={() => setIsPlaying(!isPlaying)}\n                    disabled={currentMoveIndex >= moves.length}\n                  >\n                    {isPlaying ? (\n                      <Pause className=\"h-4 w-4\" />\n                    ) : (\n                      <Play className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={handleNextMove}\n                    disabled={currentMoveIndex >= moves.length}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => setCurrentMoveIndex(moves.length)}\n                    disabled={currentMoveIndex >= moves.length}\n                  >\n                    <SkipForward className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                {/* Playback Speed */}\n                <div className=\"flex items-center justify-center gap-4\">\n                  <span className=\"text-muted-foreground text-sm\">Speed:</span>\n                  <div className=\"flex gap-1\">\n                    {[0.5, 1, 2, 3].map((speed) => (\n                      <Button\n                        key={speed}\n                        variant={\n                          playbackSpeed === 1000 / speed ? \"default\" : \"outline\"\n                        }\n                        size=\"sm\"\n                        onClick={() => setPlaybackSpeed(1000 / speed)}\n                      >\n                        {speed}x\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Side Panel */}\n        <div className=\"space-y-4\">\n          {/* Analysis Panel */}\n          {analysisMode && analysis && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Position Analysis\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Evaluation Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Black</span>\n                    <span>Red</span>\n                  </div>\n                  <div className=\"relative h-4 overflow-hidden rounded-full bg-black\">\n                    <div\n                      className=\"absolute h-full bg-red-600 transition-all duration-300\"\n                      style={{ width: `${50 + analysis.evaluation / 2}%` }}\n                    />\n                  </div>\n                  <p className=\"text-muted-foreground text-center text-sm\">\n                    {analysis.evaluation > 0 ? \"+\" : \"\"}\n                    {analysis.evaluation / 10}\n                  </p>\n                </div>\n\n                {/* Move Quality */}\n                {currentMove && (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Move Quality</p>\n                    <div className=\"flex gap-2\">\n                      {analysis.brilliant && (\n                        <Badge variant=\"default\" className=\"gap-1\">\n                          <Zap className=\"h-3 w-3\" />\n                          Brilliant!\n                        </Badge>\n                      )}\n                      {analysis.blunder && (\n                        <Badge variant=\"destructive\" className=\"gap-1\">\n                          <AlertCircle className=\"h-3 w-3\" />\n                          Blunder\n                        </Badge>\n                      )}\n                      {!analysis.brilliant && !analysis.blunder && (\n                        <Badge variant=\"secondary\">Good Move</Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Best Move Suggestion */}\n                {analysis.bestMove && (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Engine Suggestion</p>\n                    <p className=\"text-muted-foreground text-sm\">\n                      {String.fromCharCode(97 + analysis.bestMove.from.col)}\n                      {8 - analysis.bestMove.from.row} ‚Üí{\" \"}\n                      {String.fromCharCode(97 + analysis.bestMove.to.col)}\n                      {8 - analysis.bestMove.to.row}\n                    </p>\n                  </div>\n                )}\n\n                {analysis.critical && (\n                  <Alert>\n                    <Target className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Critical position! The game outcome may depend on the next\n                      moves.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Move List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Move List</CardTitle>\n              <CardDescription>\n                Click on any move to jump to that position\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-96 space-y-1 overflow-y-auto\">\n                {moves.length === 0 ? (\n                  <p className=\"text-muted-foreground text-sm\">No moves yet</p>\n                ) : (\n                  moves.map((move, index) => {\n                    const moveNotation = move\n                      ? `${String.fromCharCode(97 + move.fromCol)}${8 - move.fromRow} ‚Üí ${String.fromCharCode(97 + move.toCol)}${8 - move.toRow}`\n                      : \"Invalid move\";\n\n                    return (\n                      <Button\n                        key={index}\n                        variant={\n                          currentMoveIndex === index + 1 ? \"default\" : \"ghost\"\n                        }\n                        size=\"sm\"\n                        className=\"w-full justify-start font-mono text-xs\"\n                        onClick={() => handleMoveClick(index)}\n                      >\n                        <span className=\"mr-2 font-bold\">\n                          {Math.floor(index / 2) + 1}.\n                        </span>\n                        {index % 2 === 0 ? (\n                          <span className=\"text-red-600\">Red: </span>\n                        ) : (\n                          <span>Black: </span>\n                        )}\n                        {moveNotation}\n                        {move?.captures &&\n                          (JSON.parse(move.captures) as Position[]).length >\n                            0 && (\n                            <Badge variant=\"outline\" className=\"ml-auto\">\n                              x\n                              {(JSON.parse(move.captures) as Position[]).length}\n                            </Badge>\n                          )}\n                      </Button>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Game Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Game Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Mode:</span>\n                <Badge variant=\"outline\">{gameData.gameMode}</Badge>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Total Moves:</span>\n                <span>{moves.length}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Result:</span>\n                <span className=\"font-medium\">\n                  {gameData.winner === \"draw\"\n                    ? \"Draw\"\n                    : gameData.winner === \"red\"\n                      ? \"Red wins\"\n                      : gameData.winner === \"black\"\n                        ? \"Black wins\"\n                        : \"In progress\"}\n                </span>\n              </div>\n              {gameData.winner && gameData.winner !== \"draw\" && (\n                <>\n                  <Separator />\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Winner:</span>\n                    <span className=\"flex items-center gap-1\">\n                      <Trophy className=\"h-3 w-3\" />\n                      {getPlayerName(gameData.winner as PieceColor)}\n                    </span>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameScreen.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'playStartGame', 'state.moveCount', and 'state.winner'. Either include them or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [playStartGame, state.moveCount, state.winner]","fix":{"range":[1939,1941],"text":"[playStartGame, state.moveCount, state.winner]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameSettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'volumeMotion'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [settings.sfxVolume, volumeMotion]","fix":{"range":[1579,1599],"text":"[settings.sfxVolume, volumeMotion]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport {\n  m,\n  useMotionValue,\n  useTransform,\n  animate,\n  useMotionValueEvent,\n} from \"framer-motion\";\nimport { Settings, Palette } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"~/components/ui/dialog\";\nimport { Button } from \"~/components/ui/button\";\nimport { Slider } from \"~/components/ui/slider\";\nimport { Switch } from \"~/components/ui/switch\";\nimport { Label } from \"~/components/ui/label\";\nimport { SkinSelector } from \"~/components/SkinSelector\";\nimport { useSettings } from \"~/contexts/settings-context\";\n\ninterface GameSettingsProps {\n  className?: string;\n  variant?: \"icon\" | \"text-with-icon\";\n}\n\nexport function GameSettings({\n  className,\n  variant = \"icon\",\n}: GameSettingsProps) {\n  const { settings, updateSettings } = useSettings();\n  const [open, setOpen] = useState(false);\n\n  // Animated number for SFX volume display\n  const volumeMotion = useMotionValue(settings.sfxVolume);\n  const roundedVolume = useTransform(volumeMotion, (v) => Math.round(v));\n  const [displayedVolume, setDisplayedVolume] = useState(settings.sfxVolume);\n\n  useMotionValueEvent(roundedVolume, \"change\", (v) => {\n    // v can be number or string; ensure number\n    const next = typeof v === \"number\" ? v : Number(v);\n    if (!Number.isNaN(next)) setDisplayedVolume(next);\n  });\n\n  useEffect(() => {\n    const controls = animate(volumeMotion, settings.sfxVolume, {\n      duration: 0.3,\n      ease: \"easeOut\",\n    });\n    return () => controls.stop();\n  }, [settings.sfxVolume]);\n\n  const handleSoundToggle = (enabled: boolean) => {\n    updateSettings({ soundEffectsEnabled: enabled });\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    updateSettings({ sfxVolume: value[0] ?? 50 });\n  };\n\n  const handleReducedMotionToggle = (enabled: boolean) => {\n    updateSettings({ reducedMotion: enabled });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {variant === \"text-with-icon\" ? (\n          <Button variant=\"outline\" className={className}>\n            <Settings className=\"h-4 w-4\" />\n            Settings\n          </Button>\n        ) : (\n          <Button variant=\"outline\" size=\"icon\" className={className}>\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-sm p-4\">\n        <DialogHeader className=\"pb-2\">\n          <DialogTitle className=\"flex items-center gap-2 text-base\">\n            <Settings className=\"h-4 w-4\" />\n            Game Settings\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-3 py-2\">\n          {/* Sound Effects Section (dense) */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"sound-toggle\" className=\"text-sm\">\n                Sound Effects\n              </Label>\n              <Switch\n                id=\"sound-toggle\"\n                checked={settings.soundEffectsEnabled}\n                onCheckedChange={handleSoundToggle}\n              />\n            </div>\n            <div\n              className={`flex items-center gap-3 ${!settings.soundEffectsEnabled ? \"pointer-events-none opacity-50\" : \"\"}`}\n              aria-disabled={!settings.soundEffectsEnabled}\n            >\n              <Label\n                htmlFor=\"volume-slider\"\n                className=\"text-muted-foreground text-xs\"\n              >\n                Volume\n              </Label>\n              <Slider\n                id=\"volume-slider\"\n                value={[settings.sfxVolume]}\n                onValueChange={handleVolumeChange}\n                max={100}\n                step={5}\n                className=\"flex-1\"\n                disabled={!settings.soundEffectsEnabled}\n              />\n              <m.span className=\"text-xs tabular-nums\" aria-live=\"polite\">\n                {displayedVolume}%\n              </m.span>\n            </div>\n          </div>\n\n          {/* Visual Effects Section (single row) */}\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"reduced-motion\" className=\"text-sm\">\n              Reduced Motion\n            </Label>\n            <Switch\n              id=\"reduced-motion\"\n              checked={settings.reducedMotion}\n              onCheckedChange={handleReducedMotionToggle}\n            />\n          </div>\n\n          {/* Board Themes Section (compact) */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Palette className=\"h-4 w-4\" />\n              <span>Board Theme</span>\n            </div>\n            <div className=\"\">\n              <SkinSelector size=\"sm\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Footer removed to save space; dialog can be closed via ESC/backdrop */}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameStats.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/GameStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MotionColorSelector.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'selectedIndex' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { m, AnimatePresence, LayoutGroup } from \"framer-motion\";\nimport { Label } from \"~/components/ui/label\";\nimport { Shuffle } from \"lucide-react\";\n\ninterface MotionColorSelectorProps {\n  value: \"red\" | \"black\" | \"random\";\n  onChange: (value: \"red\" | \"black\" | \"random\") => void;\n}\n\n/**\n * Animated color selector with smooth swapping transitions\n * Inspired by Framer Motion swapping elements example\n */\nexport function MotionColorSelector({\n  value,\n  onChange,\n}: MotionColorSelectorProps) {\n  const [isHovering, setIsHovering] = useState<string | null>(null);\n\n  const colors = [\n    { id: \"red\", label: \"Red\", color: \"bg-red-600\", border: \"border-red-700\" },\n    {\n      id: \"black\",\n      label: \"Black\",\n      color: \"bg-gray-800\",\n      border: \"border-gray-900\",\n    },\n    { id: \"random\", label: \"Random\", icon: true },\n  ] as const;\n\n  const selectedIndex = colors.findIndex((c) => c.id === value);\n\n  return (\n    <div>\n      <Label className=\"mb-2 block text-sm text-gray-700\">Your Color</Label>\n\n      <LayoutGroup>\n        <div\n          className=\"grid grid-cols-3 gap-1 rounded-lg bg-gray-100 p-1\"\n          style={{ minHeight: \"44px\" }}\n        >\n          {/* Color options */}\n          {colors.map((color) => (\n            <div key={color.id} className=\"relative\">\n              {/* Animated background for selected item */}\n              {value === color.id && (\n                <m.div\n                  layoutId=\"colorSelector\"\n                  className=\"absolute inset-0 rounded-md border border-gray-200 bg-white shadow-sm\"\n                  initial={false}\n                  transition={{\n                    duration: 0.2,\n                    ease: \"easeInOut\",\n                  }}\n                />\n              )}\n              <m.button\n                onClick={() => onChange(color.id)}\n                onHoverStart={() => setIsHovering(color.id)}\n                onHoverEnd={() => setIsHovering(null)}\n                className=\"relative z-10 flex w-full items-center justify-center gap-1 rounded-md px-2 py-2 sm:gap-2 sm:px-3\"\n                whileTap={{ scale: 0.98 }}\n              >\n                <AnimatePresence mode=\"wait\">\n                  {color.icon ? (\n                    <m.div\n                      key=\"random-icon\"\n                      initial={{ scale: 0, rotate: -180 }}\n                      animate={{\n                        scale: 1,\n                        rotate: 0,\n                        transition: {\n                          type: \"spring\",\n                          stiffness: 300,\n                          damping: 20,\n                        },\n                      }}\n                      exit={{ scale: 0, rotate: 180 }}\n                    >\n                      <Shuffle\n                        className={`h-5 w-5 transition-colors ${\n                          value === \"random\" ? \"text-blue-600\" : \"text-gray-600\"\n                        }`}\n                      />\n                    </m.div>\n                  ) : (\n                    <m.div\n                      key={`${color.id}-piece`}\n                      className=\"relative\"\n                      layout\n                      initial={{ scale: 0, rotate: -180 }}\n                      animate={{\n                        scale: 1,\n                        rotate: 0,\n                      }}\n                      exit={{ scale: 0, rotate: 180 }}\n                      transition={{\n                        type: \"spring\",\n                        stiffness: 300,\n                        damping: 20,\n                      }}\n                    >\n                      <m.div\n                        className={`h-5 w-5 rounded-full ${color.color} border-2 ${color.border}`}\n                        animate={{\n                          scale:\n                            isHovering === color.id\n                              ? 1.2\n                              : value === color.id\n                                ? 1.1\n                                : 1,\n                          y: value === color.id ? -2 : 0,\n                        }}\n                        transition={{\n                          type: \"spring\",\n                          stiffness: 400,\n                          damping: 25,\n                        }}\n                      />\n                      {value === color.id && (\n                        <m.div\n                          className={`absolute inset-0 rounded-full ${color.color} opacity-30`}\n                          initial={{ scale: 0.8 }}\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            opacity: [0.3, 0, 0.3],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\",\n                          }}\n                        />\n                      )}\n                      {/* Crown icon for selected piece */}\n                      <AnimatePresence>\n                        {value === color.id && (\n                          <m.div\n                            className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                            initial={{ scale: 0, y: 10, opacity: 0 }}\n                            animate={{\n                              scale: 0.7,\n                              y: -6,\n                              opacity: 1,\n                              rotate: [0, -10, 10, -10, 10, 0],\n                            }}\n                            exit={{ scale: 0, y: 10, opacity: 0 }}\n                            transition={{\n                              rotate: {\n                                delay: 0.3,\n                                duration: 0.5,\n                                ease: \"easeInOut\",\n                              },\n                              default: {\n                                type: \"spring\",\n                                stiffness: 400,\n                                damping: 25,\n                              },\n                            }}\n                          >\n                            <span className=\"text-yellow-500\">üëë</span>\n                          </m.div>\n                        )}\n                      </AnimatePresence>\n                    </m.div>\n                  )}\n                </AnimatePresence>\n\n                <m.span\n                  className={`text-xs font-medium transition-colors sm:text-sm ${\n                    value === color.id ? \"text-gray-900\" : \"text-gray-600\"\n                  }`}\n                  animate={{\n                    y: value === color.id ? -1 : 0,\n                  }}\n                  transition={{\n                    duration: 0.2,\n                    ease: \"easeInOut\",\n                  }}\n                >\n                  {color.label}\n                </m.span>\n              </m.button>\n            </div>\n          ))}\n        </div>\n      </LayoutGroup>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MoveArrow.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'angle' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { type Position } from \"~/lib/game/logic\";\n\ninterface MoveArrowProps {\n  from: Position;\n  to: Position;\n  boardSize?: number; // Size of the board container for coordinate calculation\n}\n\nexport function MoveArrow({ from, to, boardSize = 8 }: MoveArrowProps) {\n  // Calculate the center coordinates of each square\n  const squareSize = 100 / boardSize; // Percentage size of each square\n\n  const fromCenterX = (from.col + 0.5) * squareSize;\n  const fromCenterY = (from.row + 0.5) * squareSize;\n  const toCenterX = (to.col + 0.5) * squareSize;\n  const toCenterY = (to.row + 0.5) * squareSize;\n\n  // Calculate arrow direction\n  const dx = toCenterX - fromCenterX;\n  const dy = toCenterY - fromCenterY;\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n\n  // Normalize direction vector\n  const unitX = dx / length;\n  const unitY = dy / length;\n\n  // Offset the start and end points by 25% of square size from center\n  const offset = squareSize * 0.1;\n\n  // Calculate actual arrow start and end points (offset from center)\n  const fromX = fromCenterX + unitX * offset;\n  const fromY = fromCenterY + unitY * offset;\n  const toX = toCenterX - unitX * offset;\n  const toY = toCenterY - unitY * offset;\n\n  // Arrow dimensions as percentages of board size\n  const arrowHeadSize = squareSize * 0.3;\n  const strokeWidth = squareSize * 0.1;\n\n  return (\n    <div\n      className=\"pointer-events-none absolute inset-0 z-10\"\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        viewBox=\"0 0 100 100\"\n        className=\"absolute inset-0\"\n      >\n        <defs>\n          {/* Glow filter */}\n          <filter id=\"arrow-glow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            <feMorphology operator=\"dilate\" radius=\"1\" />\n            <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\" />\n            <feMerge>\n              <feMergeNode in=\"coloredBlur\" />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n\n          {/* Arrowhead marker */}\n          <marker\n            id=\"arrowhead\"\n            markerWidth={arrowHeadSize}\n            markerHeight={arrowHeadSize}\n            refX={arrowHeadSize * 0.8}\n            refY={arrowHeadSize * 0.5}\n            orient=\"auto\"\n            markerUnits=\"userSpaceOnUse\"\n          >\n            <polygon\n              points={`0,0 ${arrowHeadSize},${arrowHeadSize / 2} 0,${arrowHeadSize}`}\n              style={{\n                fill: \"var(--board-arrow-fill)\",\n                stroke: \"var(--board-arrow-stroke)\",\n                strokeWidth: strokeWidth * 0.5,\n              }}\n            />\n          </marker>\n        </defs>\n\n        {/* Arrow line with glow effect */}\n        <line\n          x1={fromX}\n          y1={fromY}\n          x2={toX}\n          y2={toY}\n          style={{\n            stroke: \"var(--board-arrow-glow)\",\n            strokeWidth: strokeWidth * 2,\n            opacity: 0.3,\n          }}\n          filter=\"url(#arrow-glow)\"\n        />\n\n        {/* Main arrow line */}\n        <line\n          x1={fromX}\n          y1={fromY}\n          x2={toX}\n          y2={toY}\n          style={{\n            stroke: \"var(--board-arrow-stroke)\",\n            strokeWidth: strokeWidth,\n            strokeLinecap: \"round\",\n          }}\n          markerEnd=\"url(#arrowhead)\"\n        />\n\n        {/* Animated pulse effect */}\n        <line\n          x1={fromX}\n          y1={fromY}\n          x2={toX}\n          y2={toY}\n          style={{\n            stroke: \"var(--board-arrow-fill)\",\n            strokeWidth: strokeWidth * 0.5,\n            strokeLinecap: \"round\",\n            opacity: 0.8,\n          }}\n          className=\"animate-pulse\"\n        />\n      </svg>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MoveHistory.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'board' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":64,"column":11,"nodeType":"VariableDeclarator","messageId":"unsafeAssignment","endLine":66,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":66,"column":18,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":66,"endColumn":45},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":67,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  ChevronFirst,\n  ChevronLeft,\n  ChevronRight,\n  ChevronLast,\n  Play,\n  Pause,\n  Copy,\n} from \"lucide-react\";\nimport type { Move, Board, PieceColor } from \"~/lib/game/logic\";\nimport type { GameAnalysis } from \"~/lib/types/move-analysis\";\nimport { MOVE_INDICATORS } from \"~/lib/types/move-analysis\";\nimport {\n  moveToNotation,\n  formatGameHistory,\n  historyToString,\n  type NotatedMove,\n} from \"~/lib/game/checkers-notation\";\nimport { cn } from \"~/lib/utils\";\n\ninterface MoveHistoryProps {\n  moves: Move[];\n  currentMoveIndex: number;\n  board: Board;\n  boardSize: number;\n  currentPlayer: PieceColor;\n  onNavigateToMove: (moveIndex: number) => void;\n  winner: PieceColor | \"draw\" | null;\n  analysis?: GameAnalysis | null;\n  showAnalysis?: boolean;\n}\n\nexport function MoveHistory({\n  moves,\n  currentMoveIndex,\n  board,\n  boardSize,\n  currentPlayer,\n  onNavigateToMove,\n  winner,\n  analysis,\n  showAnalysis = false,\n}: MoveHistoryProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1000); // ms per move\n  const playbackIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const currentMoveRef = useRef<HTMLDivElement>(null);\n  const lastMoveIndexRef = useRef<number>(-1);\n  // Keep a stable reference to onNavigateToMove to avoid effect churn\n  const navigateToMoveRef = useRef(onNavigateToMove);\n  useEffect(() => {\n    navigateToMoveRef.current = onNavigateToMove;\n  }, [onNavigateToMove]);\n\n  // Convert moves to notated format (memoize to prevent recalculation)\n  const notatedMoves: NotatedMove[] = useMemo(() => {\n    // We pass an empty board since moveToNotation only uses it for piece info which we don't need for basic notation\n    const emptyBoard: Board = Array(boardSize)\n      .fill(null)\n      .map(() => Array(boardSize).fill(null));\n    return moves.map((move, index) => {\n      // For simplicity, we're not tracking kinging in this implementation\n      // You could enhance this by comparing board states before/after each move\n      return moveToNotation(move, emptyBoard, boardSize, false);\n    });\n  }, [moves, boardSize]); // Don't include board to prevent excessive recalculation\n\n  // Format into game history entries (pairs of moves)\n  const gameHistory = useMemo(\n    () => formatGameHistory(notatedMoves),\n    [notatedMoves],\n  );\n\n  // Auto-scroll to current move when it changes\n  useEffect(() => {\n    // Only proceed if we actually need to scroll\n    if (currentMoveIndex === lastMoveIndexRef.current) {\n      return;\n    }\n\n    // Update the ref to prevent multiple triggers\n    lastMoveIndexRef.current = currentMoveIndex;\n\n    // Check if we should scroll (new move or navigating)\n    const shouldScrollToMove =\n      currentMoveIndex >= 0 || currentMoveIndex === moves.length - 1;\n\n    if (!shouldScrollToMove) return;\n\n    // Use requestAnimationFrame to ensure DOM is updated\n    const scrollTimeout = requestAnimationFrame(() => {\n      if (currentMoveRef.current && scrollAreaRef.current) {\n        const viewport = scrollAreaRef.current;\n        const element = currentMoveRef.current;\n\n        const elementTop = element.offsetTop;\n        const elementHeight = element.offsetHeight;\n        const viewportHeight = viewport.clientHeight;\n        const currentScroll = viewport.scrollTop;\n\n        const elementBottom = elementTop + elementHeight;\n        const viewportBottom = currentScroll + viewportHeight;\n\n        if (elementTop < currentScroll || elementBottom > viewportBottom) {\n          const targetScroll =\n            elementTop - viewportHeight / 2 + elementHeight / 2;\n          viewport.scrollTo({\n            top: Math.max(0, targetScroll),\n            behavior: \"smooth\",\n          });\n        }\n      }\n    });\n\n    return () => {\n      cancelAnimationFrame(scrollTimeout);\n    };\n  }, [currentMoveIndex, moves.length]);\n\n  // Playback functionality\n  useEffect(() => {\n    if (isPlaying && currentMoveIndex < moves.length - 1) {\n      playbackIntervalRef.current = setTimeout(() => {\n        navigateToMoveRef.current(currentMoveIndex + 1);\n      }, playbackSpeed);\n    } else if (isPlaying && currentMoveIndex >= moves.length - 1) {\n      // Reached the end\n      setIsPlaying(false);\n    }\n\n    return () => {\n      if (playbackIntervalRef.current) {\n        clearTimeout(playbackIntervalRef.current);\n      }\n    };\n  }, [isPlaying, currentMoveIndex, moves.length, playbackSpeed]);\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleSpeedChange = () => {\n    // Cycle through speeds: 0.5s, 1s, 2s\n    setPlaybackSpeed((current) => {\n      if (current === 500) return 1000;\n      if (current === 1000) return 2000;\n      return 500;\n    });\n  };\n\n  const handleFirst = () => {\n    setIsPlaying(false);\n    onNavigateToMove(-1); // Before first move\n  };\n\n  const handlePrevious = () => {\n    setIsPlaying(false);\n    if (currentMoveIndex >= 0) {\n      onNavigateToMove(currentMoveIndex - 1);\n    }\n  };\n\n  const handleNext = () => {\n    setIsPlaying(false);\n    if (currentMoveIndex < moves.length - 1) {\n      onNavigateToMove(currentMoveIndex + 1);\n    }\n  };\n\n  const handleLast = () => {\n    setIsPlaying(false);\n    onNavigateToMove(moves.length - 1);\n  };\n\n  const handleMoveClick = (moveIndex: number) => {\n    setIsPlaying(false);\n    onNavigateToMove(moveIndex);\n  };\n\n  const handleExport = () => {\n    const historyString = historyToString(gameHistory);\n    void navigator.clipboard.writeText(historyString);\n    // You could also trigger a download here\n  };\n\n  const handleCopyNotation = (notation: string) => {\n    void navigator.clipboard.writeText(notation);\n  };\n\n  return (\n    <Card className=\"flex h-full min-h-0 flex-col\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"flex items-center justify-between text-sm text-amber-900\">\n          <span>Move History</span>\n          {moves.length > 0 && (\n            <span className=\"text-xs font-normal text-amber-700\">\n              Move {currentMoveIndex + 1} of {moves.length}\n            </span>\n          )}\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex min-h-0 flex-1 flex-col gap-2 p-3\">\n        {/* Navigation Controls - Always Visible */}\n        {\n          <div className=\"flex flex-col gap-1\">\n            <div className=\"flex items-center gap-1\">\n              <Button\n                onClick={handleFirst}\n                disabled={currentMoveIndex < 0 || moves.length === 0}\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\"h-7 w-7\", currentMoveIndex < 0 && \"opacity-30\")}\n                title=\"Start position\"\n              >\n                <ChevronFirst className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                onClick={handlePrevious}\n                disabled={currentMoveIndex < 0}\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\"h-7 w-7\", currentMoveIndex < 0 && \"opacity-30\")}\n                title=\"Previous move\"\n              >\n                <ChevronLeft className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                onClick={handlePlayPause}\n                disabled={\n                  currentMoveIndex >= moves.length - 1 || winner !== null\n                }\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\n                  \"h-7 w-7\",\n                  (currentMoveIndex >= moves.length - 1 || winner !== null) &&\n                    \"opacity-30\",\n                )}\n                title={isPlaying ? \"Pause\" : \"Auto-play\"}\n              >\n                {isPlaying ? (\n                  <Pause className=\"h-3 w-3\" />\n                ) : (\n                  <Play className=\"h-3 w-3\" />\n                )}\n              </Button>\n              <Button\n                onClick={handleNext}\n                disabled={currentMoveIndex >= moves.length - 1}\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\n                  \"h-7 w-7\",\n                  currentMoveIndex >= moves.length - 1 && \"opacity-30\",\n                )}\n                title=\"Next move\"\n              >\n                <ChevronRight className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                onClick={handleLast}\n                disabled={currentMoveIndex >= moves.length - 1}\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\n                  \"h-7 w-7\",\n                  currentMoveIndex >= moves.length - 1 && \"opacity-30\",\n                )}\n                title=\"Latest position\"\n              >\n                <ChevronLast className=\"h-3 w-3\" />\n              </Button>\n\n              <div className=\"flex-1 text-center\">\n                <span className=\"text-xs text-gray-500\">\n                  {/* {currentMoveIndex === -1 ? \"Start\" : `Move ${currentMoveIndex + 1}/${moves.length}`} */}\n                </span>\n              </div>\n\n              <Button\n                onClick={handleExport}\n                disabled={moves.length === 0}\n                variant=\"ghost\"\n                size=\"icon\"\n                className={cn(\"h-7 w-7\", moves.length === 0 && \"opacity-30\")}\n                title=\"Copy notation\"\n              >\n                <Copy className=\"h-3 w-3\" />\n              </Button>\n            </div>\n\n            {/* Playback Speed */}\n            {isPlaying && (\n              <Button\n                onClick={handleSpeedChange}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"mt-1 h-6 text-xs\"\n              >\n                Speed: {playbackSpeed / 1000}s\n              </Button>\n            )}\n          </div>\n        }\n\n        {/* Move List */}\n        <div\n          className=\"min-h-0 flex-1 overflow-y-auto rounded-md border bg-white/50\"\n          ref={scrollAreaRef}\n        >\n          <div className=\"space-y-1 p-2 pr-3\">\n            {gameHistory.length === 0 ? (\n              <p className=\"py-4 text-center text-xs text-gray-500\">\n                No moves yet\n              </p>\n            ) : (\n              gameHistory.map((entry, entryIndex) => {\n                const redMoveIndex = entryIndex * 2;\n                const blackMoveIndex = entryIndex * 2 + 1;\n\n                return (\n                  <div\n                    key={entry.moveNumber}\n                    className=\"flex items-center gap-1 font-mono text-xs\"\n                  >\n                    {/* Move number */}\n                    <span className=\"w-6 text-right text-gray-500\">\n                      {entry.moveNumber}.\n                    </span>\n\n                    {/* Red move */}\n                    {entry.redMove && (\n                      <div\n                        ref={\n                          currentMoveIndex === redMoveIndex\n                            ? currentMoveRef\n                            : null\n                        }\n                        className={cn(\n                          \"flex flex-1 cursor-pointer items-center gap-1 rounded px-1 py-0.5 transition-colors hover:bg-amber-100\",\n                          currentMoveIndex === redMoveIndex &&\n                            \"bg-amber-200 font-bold\",\n                          redMoveIndex > currentMoveIndex && \"opacity-40\",\n                        )}\n                        onClick={() => handleMoveClick(redMoveIndex)}\n                        onDoubleClick={() =>\n                          handleCopyNotation(entry.redMove!.notation)\n                        }\n                        title=\"Click to jump to this move\"\n                      >\n                        {showAnalysis && analysis?.moves[redMoveIndex] && (\n                          <span\n                            className=\"w-4 text-xs\"\n                            title={\n                              MOVE_INDICATORS[\n                                analysis.moves[redMoveIndex].category\n                              ].description\n                            }\n                          >\n                            {\n                              MOVE_INDICATORS[\n                                analysis.moves[redMoveIndex].category\n                              ].icon\n                            }\n                          </span>\n                        )}\n                        <span\n                          className={cn(\n                            entry.redMove.isCapture && \"text-red-700\",\n                            entry.redMove.isKinging && \"font-bold\",\n                          )}\n                        >\n                          {entry.redMove.notation}\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Black move */}\n                    {entry.blackMove && (\n                      <div\n                        ref={\n                          currentMoveIndex === blackMoveIndex\n                            ? currentMoveRef\n                            : null\n                        }\n                        className={cn(\n                          \"flex flex-1 cursor-pointer items-center gap-1 rounded px-1 py-0.5 transition-colors hover:bg-amber-100\",\n                          currentMoveIndex === blackMoveIndex &&\n                            \"bg-amber-200 font-bold\",\n                          blackMoveIndex > currentMoveIndex && \"opacity-40\",\n                        )}\n                        onClick={() => handleMoveClick(blackMoveIndex)}\n                        onDoubleClick={() =>\n                          handleCopyNotation(entry.blackMove!.notation)\n                        }\n                        title=\"Click to jump to this move\"\n                      >\n                        {showAnalysis && analysis?.moves[blackMoveIndex] && (\n                          <span\n                            className=\"w-4 text-xs\"\n                            title={\n                              MOVE_INDICATORS[\n                                analysis.moves[blackMoveIndex].category\n                              ].description\n                            }\n                          >\n                            {\n                              MOVE_INDICATORS[\n                                analysis.moves[blackMoveIndex].category\n                              ].icon\n                            }\n                          </span>\n                        )}\n                        <span\n                          className={cn(\n                            entry.blackMove.isCapture && \"text-gray-900\",\n                            entry.blackMove.isKinging && \"font-bold\",\n                          )}\n                        >\n                          {entry.blackMove.notation}\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Placeholder for missing black move */}\n                    {!entry.blackMove && entry.redMove && (\n                      <div className=\"flex-1 px-1 py-0.5\">\n                        {currentPlayer === \"black\" &&\n                          currentMoveIndex === redMoveIndex && (\n                            <span className=\"animate-pulse text-gray-400\">\n                              ...\n                            </span>\n                          )}\n                      </div>\n                    )}\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </div>\n\n        {/* Position indicator */}\n        {currentMoveIndex < moves.length - 1 && moves.length > 0 && (\n          <div className=\"rounded bg-amber-50 px-2 py-1 text-center text-[10px] text-amber-600\">\n            Viewing position after move {currentMoveIndex + 1}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MoveSequenceArrows.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MustCaptureArrow.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'boardSize'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [show, fromPosition, toPosition, boardSize]","fix":{"range":[1524,1556],"text":"[show, fromPosition, toPosition, boardSize]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { cn } from \"~/lib/utils\";\nimport { type Position } from \"~/lib/game/logic\";\n\ninterface MustCaptureArrowProps {\n  show: boolean;\n  fromPosition?: { x: number; y: number };\n  toPosition?: Position;\n  boardSize?: number;\n}\n\nexport function MustCaptureArrow({\n  show,\n  fromPosition,\n  toPosition,\n  boardSize = 8,\n}: MustCaptureArrowProps) {\n  const [arrowPath, setArrowPath] = useState<{\n    x1: number;\n    y1: number;\n    x2: number;\n    y2: number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (show && fromPosition && toPosition) {\n      // Calculate the target square's position on the board\n      const board = document.querySelector(`[class*=\"grid-cols-${boardSize}\"]`);\n      if (!board) return;\n\n      const squares = board.querySelectorAll('[class*=\"aspect-square\"]');\n      const targetSquareIndex = toPosition.row * boardSize + toPosition.col;\n      const targetSquare = squares[targetSquareIndex] as HTMLElement;\n\n      if (targetSquare) {\n        const rect = targetSquare.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n\n        // Start point is the click position\n        const startX = fromPosition.x;\n        const startY = fromPosition.y;\n\n        // Calculate arrow path\n        setArrowPath({\n          x1: startX,\n          y1: startY,\n          x2: centerX,\n          y2: centerY,\n        });\n      }\n    } else {\n      setArrowPath(null);\n    }\n  }, [show, fromPosition, toPosition]);\n\n  if (!show || !arrowPath) return null;\n\n  // Calculate angle for arrow head\n  const angle = Math.atan2(\n    arrowPath.y2 - arrowPath.y1,\n    arrowPath.x2 - arrowPath.x1,\n  );\n  const arrowLength = 15;\n  const arrowAngle = 0.5; // radians\n\n  return (\n    <svg\n      className={cn(\n        \"pointer-events-none fixed inset-0 z-40\",\n        \"transition-opacity duration-300\",\n        show ? \"opacity-100\" : \"opacity-0\",\n      )}\n      style={{ width: \"100vw\", height: \"100vh\" }}\n    >\n      {/* Arrow line */}\n      <line\n        x1={arrowPath.x1}\n        y1={arrowPath.y1}\n        x2={arrowPath.x2}\n        y2={arrowPath.y2}\n        stroke=\"rgb(251 146 60)\"\n        strokeWidth=\"3\"\n        strokeDasharray=\"5,5\"\n        className=\"animate-pulse\"\n      />\n\n      {/* Arrow head */}\n      <polygon\n        points={`\n          ${arrowPath.x2},${arrowPath.y2}\n          ${arrowPath.x2 - arrowLength * Math.cos(angle - arrowAngle)},${arrowPath.y2 - arrowLength * Math.sin(angle - arrowAngle)}\n          ${arrowPath.x2 - arrowLength * Math.cos(angle + arrowAngle)},${arrowPath.y2 - arrowLength * Math.sin(angle + arrowAngle)}\n        `}\n        fill=\"rgb(251 146 60)\"\n        className=\"animate-pulse\"\n      />\n\n      {/* Pulsing circle at target */}\n      <circle\n        cx={arrowPath.x2}\n        cy={arrowPath.y2}\n        r=\"25\"\n        fill=\"none\"\n        stroke=\"rgb(251 146 60)\"\n        strokeWidth=\"2\"\n        className=\"animate-ping\"\n      />\n    </svg>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MustCaptureToast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/MustCaptureTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Piece.motion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Piece.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Piece.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/PlayerCard.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'position' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":11},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'winRate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Badge } from \"~/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"~/components/ui/avatar\";\nimport { Bot, Crown } from \"lucide-react\";\nimport { type PieceColor } from \"~/lib/game/logic\";\nimport { type PlayerInfo } from \"~/lib/game/player-types\";\n// PlayerCard is strictly the profile display; timers are handled by containers\n\ninterface PlayerCardProps {\n  player: PlayerInfo;\n  color?: PieceColor;\n  position?: \"top\" | \"bottom\";\n  isActive?: boolean;\n  className?: string;\n  context?: \"game\" | \"profile\";\n}\n\nconst difficultyConfig = {\n  easy: { icon: \"üü¢\", label: \"Easy\" },\n  medium: { icon: \"üü°\", label: \"Medium\" },\n  hard: { icon: \"üü†\", label: \"Hard\" },\n  expert: { icon: \"üî¥\", label: \"Expert\" },\n};\n\nexport function PlayerCard({\n  player,\n  color,\n  position,\n  isActive = false,\n  className = \"\",\n  context,\n}: PlayerCardProps) {\n  // Safely calculate stats with fallbacks\n  const wins = Math.max(0, player.stats?.wins ?? 0);\n  const draws = Math.max(0, player.stats?.draws ?? 0);\n  const losses = Math.max(0, player.stats?.losses ?? 0);\n  const totalGames = wins + draws + losses;\n  const winRate = totalGames > 0 ? Math.round((wins / totalGames) * 100) : 0;\n\n  // Sanitize player name - use generic fallback when no color context\n  const displayName = player.name?.trim()\n    ? player.name.trim()\n    : color\n      ? `${color === \"red\" ? \"Red\" : \"Black\"} Player`\n      : \"Player\";\n\n  const getInitials = (name: string) => {\n    if (!name || typeof name !== \"string\") {\n      return color ? (color === \"red\" ? \"R\" : \"B\") : \"U\";\n    }\n\n    const words = name\n      .trim()\n      .split(/\\s+/)\n      .filter((word) => word.length > 0);\n    if (words.length === 0) {\n      return color ? (color === \"red\" ? \"R\" : \"B\") : \"U\";\n    }\n\n    return words\n      .map((word) => word.charAt(0).toUpperCase())\n      .join(\"\")\n      .slice(0, 2);\n  };\n\n  const getAccentColor = (color?: PieceColor) => {\n    if (!color) return \"bg-blue-600\"; // Default neutral color for non-game contexts\n    return color === \"red\" ? \"bg-red-600\" : \"bg-gray-800\";\n  };\n\n  const accentColor = getAccentColor(color);\n  const activeClasses = isActive ? \"\" : \"\";\n\n  return (\n    <div\n      className={`${activeClasses} transition-all duration-200 ${className}`}\n    >\n      <div className=\"flex items-center gap-2 px-2\">\n        {/* Avatar */}\n        <div className=\"relative flex-shrink-0\">\n          <Avatar className=\"h-8 w-8 border border-gray-200\">\n            <AvatarImage src={player.avatar} alt={displayName} />\n            <AvatarFallback\n              className={`${accentColor} text-xs font-semibold text-white`}\n            >\n              {player.isAI ? (\n                <Bot className=\"h-3 w-3\" />\n              ) : (\n                getInitials(displayName)\n              )}\n            </AvatarFallback>\n          </Avatar>\n\n          {/* Color indicator - only show in game context */}\n          {color && (\n            <div\n              className={`absolute -right-0.5 -bottom-0.5 h-3 w-3 rounded-full ${accentColor} border border-white shadow-sm`}\n            />\n          )}\n        </div>\n\n        {/* Player Info */}\n        <div className=\"min-w-0 flex-1\">\n          <div className=\"flex items-center gap-1.5\">\n            {/* Show appropriate name based on player type */}\n            <h3 className=\"truncate text-sm font-medium text-gray-900\">\n              {player.isAI\n                ? \"AI Player\"\n                : player.isGuest\n                  ? \"Guest\"\n                  : displayName}\n            </h3>\n\n            {player.isAI && player.aiDifficulty ? (\n              <Badge variant=\"secondary\" className=\"px-1.5 py-0 text-xs\">\n                {difficultyConfig[player.aiDifficulty].label}\n              </Badge>\n            ) : null}\n\n            {player.isCurrentUser && !player.isAI && (\n              <Crown className=\"h-3 w-3 flex-shrink-0 text-yellow-600\" />\n            )}\n          </div>\n\n          {/* Win/Loss/Draw record for players with stats */}\n          {!player.isAI && player.stats && totalGames > 0 && (\n            <div className=\"mt-0.5 text-xs text-gray-500\">\n              {wins} / {losses} / {draws}\n            </div>\n          )}\n        </div>\n\n        {/* No timer here; timers are rendered alongside by the container */}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/PlayerCardServer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/PlayerCardSkeleton.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'position' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Skeleton } from \"~/components/ui/skeleton\";\nimport { type PieceColor } from \"~/lib/game/logic\";\n\ninterface PlayerCardSkeletonProps {\n  color: PieceColor;\n  position: \"top\" | \"bottom\";\n  className?: string;\n}\n\nexport function PlayerCardSkeleton({\n  color,\n  position,\n  className = \"\",\n}: PlayerCardSkeletonProps) {\n  const getAccentColor = (color: PieceColor) => {\n    return color === \"red\" ? \"bg-red-600\" : \"bg-gray-800\";\n  };\n\n  const accentColor = getAccentColor(color);\n\n  return (\n    <div className={`transition-all duration-200 ${className}`}>\n      <div className=\"flex items-center gap-2 px-2\">\n        {/* Avatar Skeleton */}\n        <div className=\"relative flex-shrink-0\">\n          <Skeleton className=\"h-8 w-8 rounded-full border border-gray-200\" />\n\n          {/* Color indicator - static since we know the color */}\n          <div\n            className={`absolute -right-0.5 -bottom-0.5 h-3 w-3 rounded-full ${accentColor} border border-white shadow-sm`}\n          />\n        </div>\n\n        {/* Player Info Skeleton */}\n        <div className=\"min-w-0 flex-1\">\n          <div className=\"flex items-center gap-1.5\">\n            {/* Player name skeleton - matches text-sm */}\n            <Skeleton className=\"h-4 w-20 rounded\" />\n\n            {/* Badge skeleton (for Guest or AI difficulty) - shown ~50% of time */}\n            {Math.random() > 0.5 && (\n              <Skeleton className=\"h-4 w-12 rounded-full\" />\n            )}\n          </div>\n\n          {/* W/L/D stats skeleton - shown occasionally for non-AI players */}\n          {Math.random() > 0.6 && (\n            <div className=\"mt-0.5\">\n              <Skeleton className=\"h-3 w-16 rounded\" />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/PostGameAnalysis.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'winner' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":9},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setShowGraph' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Progress } from \"~/components/ui/progress\";\nimport { Separator } from \"~/components/ui/separator\";\nimport { Brain, Play } from \"lucide-react\";\nimport type { GameAnalysis } from \"~/lib/types/move-analysis\";\nimport { cn } from \"~/lib/utils\";\nimport type { PieceColor } from \"~/lib/game/logic\";\n\ninterface PostGameAnalysisProps {\n  analysis: GameAnalysis | null;\n  winner: PieceColor | \"draw\" | null;\n  isAnalyzing?: boolean;\n  analyzeProgress?: number;\n  onStartReview?: () => void;\n  onPlayAgain?: () => void;\n  playerNames?: {\n    red: string;\n    black: string;\n  };\n}\n\ninterface PlayerStats {\n  accuracy: number;\n  brilliant: number;\n  excellent: number;\n  best: number;\n  good: number;\n  book: number;\n  inaccuracy: number;\n  mistake: number;\n  miss: number;\n  blunder: number;\n}\n\nexport function PostGameAnalysis({\n  analysis,\n  winner,\n  isAnalyzing = false,\n  analyzeProgress = 0,\n  onStartReview,\n  onPlayAgain,\n  playerNames = { red: \"Player 1\", black: \"Player 2\" },\n}: PostGameAnalysisProps) {\n  const [showGraph, setShowGraph] = useState(true);\n\n  // Calculate player statistics\n  const getPlayerStats = (player: \"red\" | \"black\"): PlayerStats => {\n    if (!analysis) {\n      return {\n        accuracy: 0,\n        brilliant: 0,\n        excellent: 0,\n        best: 0,\n        good: 0,\n        book: 0,\n        inaccuracy: 0,\n        mistake: 0,\n        miss: 0,\n        blunder: 0,\n      };\n    }\n\n    const moveQuality = analysis.moveQualityCount[player];\n\n    return {\n      accuracy: analysis.averageAccuracy[player],\n      brilliant: moveQuality.brilliant ?? 0,\n      excellent: moveQuality.excellent ?? 0,\n      best: moveQuality.best ?? 0,\n      good: moveQuality.good ?? 0,\n      book: 0, // Would need to track opening book moves\n      inaccuracy: moveQuality.inaccuracy ?? 0,\n      mistake: moveQuality.mistake ?? 0,\n      miss: 0, // Could track missed wins\n      blunder: moveQuality.blunder ?? 0,\n    };\n  };\n\n  const redStats = getPlayerStats(\"red\");\n  const blackStats = getPlayerStats(\"black\");\n\n  // Move category display configuration\n  const categoryConfig: Array<{\n    key: keyof PlayerStats;\n    label: string;\n    icon: string;\n    color: string;\n  }> = [\n    {\n      key: \"brilliant\",\n      label: \"Brilliant\",\n      icon: \"!!\",\n      color: \"text-cyan-500\",\n    },\n    { key: \"excellent\", label: \"Excellent\", icon: \"!\", color: \"text-blue-500\" },\n    { key: \"best\", label: \"Best\", icon: \"‚≠ê\", color: \"text-green-500\" },\n    { key: \"good\", label: \"Good\", icon: \"‚úì\", color: \"text-green-400\" },\n    { key: \"book\", label: \"Book\", icon: \"üìñ\", color: \"text-gray-500\" },\n    {\n      key: \"inaccuracy\",\n      label: \"Inaccuracy\",\n      icon: \"?!\",\n      color: \"text-yellow-500\",\n    },\n    { key: \"mistake\", label: \"Mistake\", icon: \"?\", color: \"text-orange-500\" },\n    { key: \"miss\", label: \"Miss\", icon: \"‚úó\", color: \"text-red-400\" },\n    { key: \"blunder\", label: \"Blunder\", icon: \"??\", color: \"text-red-600\" },\n  ];\n\n  if (isAnalyzing) {\n    return (\n      <Card className=\"w-full max-w-md bg-gray-900 text-white\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-xl\">\n            <Brain className=\"h-5 w-5 animate-pulse\" />\n            Analyzing Game...\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-gray-400\">\n              <span>Analysis Progress</span>\n              <span>{Math.round(analyzeProgress)}%</span>\n            </div>\n            <Progress value={analyzeProgress} className=\"h-2\" />\n          </div>\n          <p className=\"text-sm text-gray-400\">\n            Evaluating moves and identifying critical moments...\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!analysis) {\n    return null;\n  }\n\n  return (\n    <Card className=\"w-full max-w-md bg-gray-900 text-white\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"space-y-4\">\n          {/* Evaluation Graph */}\n          {showGraph && (\n            <div className=\"rounded-lg bg-gray-800 p-3\">\n              <svg viewBox=\"0 0 400 120\" className=\"h-24 w-full\">\n                {/* Background gradient */}\n                <defs>\n                  <linearGradient\n                    id=\"evalGradient\"\n                    x1=\"0%\"\n                    y1=\"0%\"\n                    x2=\"0%\"\n                    y2=\"100%\"\n                  >\n                    <stop offset=\"0%\" stopColor=\"white\" stopOpacity=\"0.1\" />\n                    <stop offset=\"50%\" stopColor=\"gray\" stopOpacity=\"0.05\" />\n                    <stop offset=\"100%\" stopColor=\"black\" stopOpacity=\"0.1\" />\n                  </linearGradient>\n                </defs>\n                <rect\n                  x=\"0\"\n                  y=\"0\"\n                  width=\"400\"\n                  height=\"120\"\n                  fill=\"url(#evalGradient)\"\n                />\n\n                {/* Zero line */}\n                <line\n                  x1=\"0\"\n                  y1=\"60\"\n                  x2=\"400\"\n                  y2=\"60\"\n                  stroke=\"gray\"\n                  strokeWidth=\"1\"\n                  opacity=\"0.3\"\n                />\n\n                {/* Evaluation line */}\n                <polyline\n                  fill=\"none\"\n                  stroke=\"white\"\n                  strokeWidth=\"2\"\n                  points={analysis.evaluationGraph\n                    .map((point, idx) => {\n                      const x =\n                        (idx /\n                          Math.max(1, analysis.evaluationGraph.length - 1)) *\n                        400;\n                      const y = 60 - point.evaluation * 0.5; // Scale to fit\n                      return `${x},${y}`;\n                    })\n                    .join(\" \")}\n                />\n\n                {/* Critical moments markers */}\n                {analysis.criticalMoments.map((idx) => {\n                  const x =\n                    (idx / Math.max(1, analysis.evaluationGraph.length - 1)) *\n                    400;\n                  return (\n                    <circle\n                      key={idx}\n                      cx={x}\n                      cy={\n                        60 -\n                        (analysis.evaluationGraph[idx]?.evaluation ?? 0) * 0.5\n                      }\n                      r=\"3\"\n                      fill=\"orange\"\n                    />\n                  );\n                })}\n\n                {/* Blunder markers */}\n                {analysis.blunders.map((idx) => {\n                  const x =\n                    (idx / Math.max(1, analysis.evaluationGraph.length - 1)) *\n                    400;\n                  return (\n                    <circle\n                      key={idx}\n                      cx={x}\n                      cy={\n                        60 -\n                        (analysis.evaluationGraph[idx]?.evaluation ?? 0) * 0.5\n                      }\n                      r=\"3\"\n                      fill=\"red\"\n                    />\n                  );\n                })}\n              </svg>\n            </div>\n          )}\n\n          {/* Players Section */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium text-gray-400\">Players</h3>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-red-500 font-bold text-white\">\n                  {playerNames.red[0]}\n                </div>\n                <span className=\"font-medium\">{playerNames.red}</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <span className=\"font-medium\">{playerNames.black}</span>\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-gray-700 font-bold text-white\">\n                  {playerNames.black[0]}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Accuracy Section */}\n          <div className=\"space-y-3\">\n            <h3 className=\"text-sm font-medium text-gray-400\">Accuracy</h3>\n            <div className=\"flex items-center justify-between rounded-lg bg-gray-800 px-4 py-3\">\n              <div className=\"text-2xl font-bold\">\n                {redStats.accuracy.toFixed(1)}\n              </div>\n              <div className=\"text-2xl font-bold\">\n                {blackStats.accuracy.toFixed(1)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Move Categories */}\n        <div className=\"space-y-2\">\n          {categoryConfig.map(({ key, label, icon, color }) => {\n            const redCount = redStats[key];\n            const blackCount = blackStats[key];\n\n            // Skip categories with no moves\n            if (redCount === 0 && blackCount === 0) return null;\n\n            return (\n              <div key={key} className=\"flex items-center justify-between py-1\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"w-8 font-mono text-lg text-orange-400\">\n                    {redCount ?? 0}\n                  </span>\n                  <div\n                    className={cn(\n                      \"flex h-10 w-10 items-center justify-center rounded-full bg-gray-800 text-lg font-bold\",\n                      color,\n                    )}\n                  >\n                    {icon}\n                  </div>\n                  <span className=\"text-sm font-medium\">{label}</span>\n                </div>\n                <span className=\"font-mono text-lg text-green-400\">\n                  {blackCount ?? 0}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n\n        <Separator className=\"bg-gray-700\" />\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={onStartReview}\n            className=\"flex-1 bg-blue-600 text-white hover:bg-blue-700\"\n          >\n            <Play className=\"mr-2 h-4 w-4\" />\n            Start Review\n          </Button>\n          <Button\n            onClick={onPlayAgain}\n            variant=\"outline\"\n            className=\"flex-1 border-gray-600 text-gray-300 hover:bg-gray-800\"\n          >\n            Play Again\n          </Button>\n        </div>\n\n        {/* Additional Stats */}\n        <div className=\"grid grid-cols-2 gap-4 pt-2\">\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-400\">Critical Moments</p>\n            <p className=\"text-lg font-bold\">\n              {analysis.criticalMoments.length}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-400\">Game Sharpness</p>\n            <p className=\"text-lg font-bold\">{analysis.gameSharpness}%</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Square.motion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":12,"nodeType":"TSAsExpression","messageId":"anyAssignment","endLine":105,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2739,2742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2739,2742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { m, AnimatePresence } from \"framer-motion\";\nimport { type Position } from \"~/lib/game/logic\";\nimport { cn } from \"~/lib/utils\";\nimport { useState, forwardRef } from \"react\";\nimport { useSettings } from \"~/contexts/settings-context\";\n\ninterface SquareProps {\n  position: Position;\n  isBlack: boolean;\n  isHighlighted: boolean;\n  isSelected: boolean;\n  isPossibleMove: boolean;\n  isKeyboardFocused?: boolean;\n  onClick?: () => void;\n  onDrop?: (e: React.DragEvent) => void;\n  onDragOver?: (e: React.DragEvent) => void;\n  onKeyDown?: (e: React.KeyboardEvent) => void;\n  onFocus?: (e: React.FocusEvent) => void;\n  tabIndex?: number;\n  role?: string;\n  ariaLabel?: string;\n  ariaSelected?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const Square = forwardRef<HTMLDivElement, SquareProps>(function Square(\n  {\n    position,\n    isBlack,\n    isHighlighted,\n    isSelected,\n    isPossibleMove,\n    isKeyboardFocused = false,\n    onClick,\n    onDrop,\n    onDragOver,\n    onKeyDown,\n    onFocus,\n    tabIndex,\n    role,\n    ariaLabel,\n    ariaSelected,\n    children,\n  }: SquareProps,\n  ref,\n) {\n  const { settings } = useSettings();\n  const [showRipple, setShowRipple] = useState(false);\n\n  const handleDrop = (e: React.DragEvent) => {\n    onDrop?.(e);\n    if (isPossibleMove && !settings.reducedMotion) {\n      setShowRipple(true);\n      setTimeout(() => setShowRipple(false), 600);\n    }\n  };\n\n  const squareStyle = isBlack\n    ? {\n        background: `linear-gradient(to bottom right, var(--board-dark-from), var(--board-dark-to))`,\n      }\n    : {\n        background: `linear-gradient(to bottom right, var(--board-light-from), var(--board-light-to))`,\n      };\n\n  const ringStyle = isSelected\n    ? {\n        boxShadow: `inset 0 0 0 4px var(--board-selected-ring)`,\n      }\n    : isHighlighted\n      ? {\n          boxShadow: `inset 0 0 0 4px var(--board-highlighted-ring)`,\n        }\n      : isKeyboardFocused\n        ? {\n            boxShadow: `inset 0 0 0 3px #3b82f6`,\n            outline: \"none\",\n          }\n        : undefined;\n\n  const SquareComponent = settings.reducedMotion ? \"div\" : m.div;\n\n  return (\n    <SquareComponent\n      className={cn(\n        \"relative flex aspect-square items-center justify-center transition-all duration-200\",\n        isPossibleMove && \"cursor-pointer\",\n        !isBlack && \"shadow-inner\",\n      )}\n      style={{\n        ...squareStyle,\n        ...ringStyle,\n      }}\n      onClick={onClick}\n      onDrop={handleDrop}\n      onDragOver={onDragOver}\n      onKeyDown={onKeyDown}\n      onFocus={onFocus}\n      tabIndex={typeof tabIndex === \"number\" ? tabIndex : -1}\n      role={role ?? \"button\"}\n      aria-label={ariaLabel}\n      aria-selected={ariaSelected}\n      ref={ref as any}\n      {...(!settings.reducedMotion && {\n        animate: {\n          scale: isPossibleMove ? 1.02 : 1,\n        },\n        transition: {\n          type: \"spring\",\n          stiffness: 300,\n          damping: 20,\n        },\n      })}\n    >\n      {/* Ripple effect when piece lands */}\n      <AnimatePresence>\n        {showRipple && (\n          <m.div\n            className=\"pointer-events-none absolute inset-0 rounded-sm\"\n            initial={{ scale: 0.5, opacity: 0.5 }}\n            animate={{ scale: 2, opacity: 0 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.6 }}\n            style={{\n              background: `radial-gradient(circle, ${\n                isBlack ? \"rgba(255,255,255,0.3)\" : \"rgba(0,0,0,0.2)\"\n              } 0%, transparent 70%)`,\n            }}\n          />\n        )}\n      </AnimatePresence>\n\n      {/* Valid move indicator with pulsing animation */}\n      {isPossibleMove && (\n        <div\n          className=\"pointer-events-none absolute inset-0 flex items-center justify-center\"\n          style={\n            {\n              \"--move-color\": \"var(--board-possible-move-glow)\",\n            } as React.CSSProperties\n          }\n        >\n          {settings.reducedMotion ? (\n            <div\n              className=\"h-8 w-8 rounded-full shadow-lg\"\n              style={{\n                backgroundColor: \"var(--board-possible-move-glow)\",\n                opacity: 0.8,\n              }}\n            />\n          ) : (\n            <m.div\n              className=\"h-8 w-8 rounded-full shadow-lg\"\n              style={{\n                backgroundColor: \"var(--board-possible-move-glow)\",\n              }}\n              initial={{ scale: 0 }}\n              animate={{\n                scale: [1, 1.2, 1],\n                opacity: [0.8, 1, 0.8],\n              }}\n              transition={{\n                scale: {\n                  duration: 1.5,\n                  repeat: Infinity,\n                  ease: \"easeInOut\",\n                },\n                opacity: {\n                  duration: 1.5,\n                  repeat: Infinity,\n                  ease: \"easeInOut\",\n                },\n              }}\n            />\n          )}\n        </div>\n      )}\n\n      {/* Children (pieces) with animation */}\n      {settings.reducedMotion ? (\n        <div className=\"flex h-full w-full items-center justify-center\">\n          {children}\n        </div>\n      ) : (\n        <AnimatePresence mode=\"wait\">\n          {children && (\n            <m.div\n              key={`${position.row}-${position.col}`}\n              className=\"flex h-full w-full items-center justify-center\"\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0, opacity: 0 }}\n              transition={{\n                type: \"spring\",\n                stiffness: 300,\n                damping: 20,\n              }}\n            >\n              {children}\n            </m.div>\n          )}\n        </AnimatePresence>\n      )}\n    </SquareComponent>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Square.test.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'container' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":109,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { render, fireEvent } from \"@testing-library/react\";\nimport { Square } from \"./Square\";\n\ndescribe(\"Square Component\", () => {\n  const mockOnClick = vi.fn();\n  const mockOnDrop = vi.fn();\n  const mockOnDragOver = vi.fn();\n\n  const defaultProps = {\n    position: { row: 0, col: 0 },\n    isBlack: false,\n    isHighlighted: false,\n    isSelected: false,\n    isPossibleMove: false,\n    onClick: mockOnClick,\n    onDrop: mockOnDrop,\n    onDragOver: mockOnDragOver,\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it(\"should render light square\", () => {\n    const { container } = render(<Square {...defaultProps} />);\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"from-amber-100\");\n    expect(square.className).toContain(\"to-amber-200\");\n    expect(square.className).toContain(\"shadow-inner\");\n  });\n\n  it(\"should render dark square\", () => {\n    const { container } = render(<Square {...defaultProps} isBlack={true} />);\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"from-amber-800\");\n    expect(square.className).toContain(\"to-amber-900\");\n  });\n\n  it(\"should show selection ring when selected\", () => {\n    const { container } = render(\n      <Square {...defaultProps} isSelected={true} />,\n    );\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"ring-4\");\n    expect(square.className).toContain(\"ring-blue-500\");\n  });\n\n  it(\"should show highlight ring when highlighted\", () => {\n    const { container } = render(\n      <Square {...defaultProps} isHighlighted={true} />,\n    );\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"ring-4\");\n    expect(square.className).toContain(\"ring-yellow-400\");\n  });\n\n  it(\"should show move indicator when possible move\", () => {\n    const { container } = render(\n      <Square {...defaultProps} isPossibleMove={true} />,\n    );\n\n    // Check for the move indicator div\n    const indicator = container.querySelector(\".before\\\\:bg-green-400\\\\/50\");\n    expect(indicator).toBeDefined();\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"cursor-pointer\");\n  });\n\n  it(\"should handle click events\", () => {\n    const { container } = render(<Square {...defaultProps} />);\n\n    const square = container.firstChild as HTMLElement;\n    fireEvent.click(square);\n\n    expect(mockOnClick).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should handle drop events\", () => {\n    const { container } = render(<Square {...defaultProps} />);\n\n    const square = container.firstChild as HTMLElement;\n    const dropEvent = new Event(\"drop\", { bubbles: true });\n    Object.defineProperty(dropEvent, \"preventDefault\", {\n      value: vi.fn(),\n      writable: false,\n    });\n\n    fireEvent.drop(square);\n\n    expect(mockOnDrop).toHaveBeenCalled();\n  });\n\n  it(\"should handle dragOver events\", () => {\n    const { container } = render(<Square {...defaultProps} />);\n\n    const square = container.firstChild as HTMLElement;\n    fireEvent.dragOver(square);\n\n    expect(mockOnDragOver).toHaveBeenCalled();\n  });\n\n  it(\"should render children\", () => {\n    const { container, getByText } = render(\n      <Square {...defaultProps}>\n        <div>Test Child</div>\n      </Square>,\n    );\n\n    expect(getByText(\"Test Child\")).toBeInTheDocument();\n  });\n\n  it(\"should apply transition classes\", () => {\n    const { container } = render(<Square {...defaultProps} />);\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"transition-all\");\n    expect(square.className).toContain(\"duration-200\");\n  });\n\n  it(\"should have correct layout classes\", () => {\n    const { container } = render(<Square {...defaultProps} />);\n\n    const square = container.firstChild as HTMLElement;\n    expect(square.className).toContain(\"aspect-square\");\n    expect(square.className).toContain(\"flex\");\n    expect(square.className).toContain(\"items-center\");\n    expect(square.className).toContain(\"justify-center\");\n  });\n\n  it(\"should show pulse animation for possible moves\", () => {\n    const { container } = render(\n      <Square {...defaultProps} isPossibleMove={true} />,\n    );\n\n    const indicator = container.querySelector(\".before\\\\:animate-pulse\");\n    expect(indicator).toBeDefined();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/Square.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'position' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { type Position } from \"~/lib/game/logic\";\nimport { cn } from \"~/lib/utils\";\n\ninterface SquareProps {\n  position: Position;\n  isBlack: boolean;\n  isHighlighted: boolean;\n  isSelected: boolean;\n  isPossibleMove: boolean;\n  isKeyboardFocused?: boolean;\n  onClick: () => void;\n  onDrop: (e: React.DragEvent) => void;\n  onDragOver: (e: React.DragEvent) => void;\n  children?: React.ReactNode;\n}\n\nexport function Square({\n  position,\n  isBlack,\n  isHighlighted,\n  isSelected,\n  isPossibleMove,\n  isKeyboardFocused = false,\n  onClick,\n  onDrop,\n  onDragOver,\n  children,\n}: SquareProps) {\n  const squareStyle = isBlack\n    ? {\n        background: `linear-gradient(to bottom right, var(--board-dark-from), var(--board-dark-to))`,\n      }\n    : {\n        background: `linear-gradient(to bottom right, var(--board-light-from), var(--board-light-to))`,\n      };\n\n  const ringStyle = isSelected\n    ? {\n        boxShadow: `inset 0 0 0 4px var(--board-selected-ring)`,\n      }\n    : isHighlighted\n      ? {\n          boxShadow: `inset 0 0 0 4px var(--board-highlighted-ring)`,\n        }\n      : isKeyboardFocused\n        ? {\n            boxShadow: `inset 0 0 0 3px #3b82f6, 0 0 8px rgba(59, 130, 246, 0.4)`,\n            outline: \"none\",\n          }\n        : undefined;\n\n  return (\n    <div\n      className={cn(\n        \"relative flex aspect-square items-center justify-center transition-all duration-200\",\n        isPossibleMove && \"cursor-pointer\",\n        !isBlack && \"shadow-inner\",\n      )}\n      style={{\n        ...squareStyle,\n        ...ringStyle,\n      }}\n      onClick={onClick}\n      onDrop={onDrop}\n      onDragOver={onDragOver}\n    >\n      {isPossibleMove && (\n        <div\n          className=\"pointer-events-none absolute inset-0 flex items-center justify-center\"\n          style={\n            {\n              \"--move-color\": \"var(--board-possible-move-glow)\",\n            } as React.CSSProperties\n          }\n        >\n          <div\n            className=\"h-8 w-8 animate-pulse rounded-full shadow-lg\"\n            style={{\n              backgroundColor: \"var(--board-possible-move-glow)\",\n            }}\n          />\n        </div>\n      )}\n      {children}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/TimeControlPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/TimeControlSelector.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleCustomChange' and 'selectedPreset'. Either include them or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleCustomChange, selectedPreset]","fix":{"range":[3597,3599],"text":"[handleCustomChange, selectedPreset]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { NumberInput } from \"~/components/ui/number-input\";\nimport { Label } from \"~/components/ui/label\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Separator } from \"~/components/ui/separator\";\nimport { Switch } from \"~/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"~/components/ui/dialog\";\nimport {\n  Clock,\n  Zap,\n  Timer,\n  Trophy,\n  Settings,\n  Volume2,\n  VolumeX,\n} from \"lucide-react\";\nimport { cn } from \"~/lib/utils\";\nimport {\n  type TimeControl,\n  TIME_CONTROL_PRESETS,\n  validateTimeControl,\n  timeControlToString,\n  getTimeControlPreset,\n} from \"~/lib/game/time-control-types\";\n\ninterface TimeControlSelectorProps {\n  /** Current time control */\n  timeControl: TimeControl | null;\n  /** Whether dialog is open */\n  open: boolean;\n  /** Callback when dialog opens/closes */\n  onOpenChange: (open: boolean) => void;\n  /** Callback when time control is selected */\n  onTimeControlChange: (timeControl: TimeControl | null) => void;\n  /** Whether game is active (disable changes) */\n  gameActive?: boolean;\n  /** Audio warnings enabled */\n  audioEnabled?: boolean;\n  /** Callback when audio setting changes */\n  onAudioEnabledChange?: (enabled: boolean) => void;\n}\n\nexport function TimeControlSelector({\n  timeControl,\n  open,\n  onOpenChange,\n  onTimeControlChange,\n  gameActive = false,\n  audioEnabled = true,\n  onAudioEnabledChange,\n}: TimeControlSelectorProps) {\n  const [selectedPreset, setSelectedPreset] = useState<string | null>(\n    timeControl?.preset && timeControl.preset !== \"custom\"\n      ? timeControl.preset\n      : null,\n  );\n  const [customMinutes, setCustomMinutes] = useState(\n    timeControl?.preset === \"custom\" ? timeControl.initialMinutes : 10,\n  );\n  const [customIncrement, setCustomIncrement] = useState(\n    timeControl?.preset === \"custom\" ? timeControl.incrementSeconds : 5,\n  );\n  const [customFormat, setCustomFormat] = useState<\"X|Y\" | \"X+Y\">(\n    timeControl?.preset === \"custom\" ? timeControl.format : \"X|Y\",\n  );\n  const [customError, setCustomError] = useState<string | null>(null);\n\n  // Preset configurations\n  const presets = [\n    {\n      key: \"bullet\",\n      name: \"Bullet\",\n      description: \"Fast-paced games\",\n      icon: Zap,\n      color: \"text-yellow-600 border-yellow-600\",\n    },\n    {\n      key: \"blitz\",\n      name: \"Blitz\",\n      description: \"Quick tactical games\",\n      icon: Timer,\n      color: \"text-orange-600 border-orange-600\",\n    },\n    {\n      key: \"rapid\",\n      name: \"Rapid\",\n      description: \"Balanced gameplay\",\n      icon: Clock,\n      color: \"text-blue-600 border-blue-600\",\n    },\n    {\n      key: \"classical\",\n      name: \"Classical\",\n      description: \"Deep strategic games\",\n      icon: Trophy,\n      color: \"text-green-600 border-green-600\",\n    },\n  ];\n\n  const handlePresetSelect = (presetKey: string) => {\n    setSelectedPreset(presetKey);\n    setCustomError(null);\n  };\n\n  const handleCustomChange = () => {\n    setSelectedPreset(null);\n\n    const customTimeControl: TimeControl = {\n      format: customFormat,\n      initialMinutes: customMinutes,\n      incrementSeconds: customIncrement,\n      preset: \"custom\",\n    };\n\n    const validation = validateTimeControl(customTimeControl);\n    setCustomError(validation);\n  };\n\n  // Initial validation check\n  useEffect(() => {\n    if (!selectedPreset) {\n      handleCustomChange();\n    }\n  }, []);\n\n  const handleApply = () => {\n    if (selectedPreset) {\n      const preset = getTimeControlPreset(selectedPreset);\n      if (preset) {\n        onTimeControlChange(preset);\n        onOpenChange(false);\n      }\n    } else if (customMinutes > 0) {\n      const customTimeControl: TimeControl = {\n        format: customFormat,\n        initialMinutes: customMinutes,\n        incrementSeconds: customIncrement,\n        preset: \"custom\",\n      };\n\n      if (!validateTimeControl(customTimeControl)) {\n        onTimeControlChange(customTimeControl);\n        onOpenChange(false);\n      }\n    } else {\n      // No time control\n      onTimeControlChange(null);\n      onOpenChange(false);\n    }\n  };\n\n  const handleRemove = () => {\n    onTimeControlChange(null);\n    onOpenChange(false);\n  };\n\n  const canApply = selectedPreset ?? (customMinutes > 0 && !customError);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Time Control Settings\n          </DialogTitle>\n          <DialogDescription>\n            Choose a time control preset or create a custom configuration. Time\n            controls add strategic depth to your games.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Current selection display */}\n          {timeControl && (\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"pt-4\">\n                <div className=\"text-sm\">\n                  <span className=\"font-medium\">Current: </span>\n                  <Badge variant=\"outline\" className=\"font-mono\">\n                    {timeControlToString(timeControl)}\n                  </Badge>\n                  <span className=\"text-muted-foreground ml-2\">\n                    (\n                    {timeControl.preset === \"custom\"\n                      ? \"Custom\"\n                      : timeControl.preset}\n                    )\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Preset buttons */}\n          <div>\n            <Label className=\"text-sm font-medium\">Presets</Label>\n            <div className=\"mt-2 grid grid-cols-2 gap-2\">\n              {presets.map((preset) => {\n                const config = TIME_CONTROL_PRESETS[preset.key]!;\n                const isSelected = selectedPreset === preset.key;\n                const Icon = preset.icon;\n\n                return (\n                  <Button\n                    key={preset.key}\n                    variant={isSelected ? \"default\" : \"outline\"}\n                    className={cn(\n                      \"flex h-auto flex-col items-center gap-1 p-3\",\n                      !isSelected && preset.color,\n                    )}\n                    onClick={() => handlePresetSelect(preset.key)}\n                    disabled={gameActive}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span className=\"text-xs font-medium\">{preset.name}</span>\n                    <span className=\"font-mono text-xs\">\n                      {timeControlToString(config)}\n                    </span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Custom time control */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-sm font-medium\">Custom Time Control</Label>\n\n            {/* Format selector */}\n            <div className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant={customFormat === \"X|Y\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => {\n                  setCustomFormat(\"X|Y\");\n                  handleCustomChange();\n                }}\n                disabled={gameActive}\n                className=\"flex-1\"\n              >\n                Minutes | Increment\n              </Button>\n              <Button\n                type=\"button\"\n                variant={customFormat === \"X+Y\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => {\n                  setCustomFormat(\"X+Y\");\n                  handleCustomChange();\n                }}\n                disabled={gameActive}\n                className=\"flex-1\"\n              >\n                Minutes + Increment\n              </Button>\n            </div>\n\n            {/* Number inputs */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"custom-minutes\"\n                  className=\"text-muted-foreground text-xs font-medium\"\n                >\n                  Minutes\n                </Label>\n                <NumberInput\n                  id=\"custom-minutes\"\n                  value={customMinutes}\n                  onChange={(value) => {\n                    setCustomMinutes(value);\n                    handleCustomChange();\n                  }}\n                  min={0.5}\n                  max={180}\n                  step={0.5}\n                  decimals={1}\n                  disabled={gameActive}\n                  className=\"w-full\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"custom-increment\"\n                  className=\"text-muted-foreground text-xs font-medium\"\n                >\n                  Increment (seconds)\n                </Label>\n                <NumberInput\n                  id=\"custom-increment\"\n                  value={customIncrement}\n                  onChange={(value) => {\n                    setCustomIncrement(value);\n                    handleCustomChange();\n                  }}\n                  min={0}\n                  max={60}\n                  step={1}\n                  disabled={gameActive}\n                  className=\"w-full\"\n                />\n              </div>\n            </div>\n\n            {customError && (\n              <p className=\"text-xs text-red-600\">{customError}</p>\n            )}\n\n            <div className=\"text-muted-foreground text-xs\">\n              Preview:{\" \"}\n              <code className=\"bg-muted rounded px-1 py-0.5 font-mono\">\n                {customMinutes}\n                {customFormat === \"X|Y\" ? \"|\" : \"+\"}\n                {customIncrement}\n              </code>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Audio settings */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-sm font-medium\">Audio Settings</Label>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                {audioEnabled ? (\n                  <Volume2 className=\"h-4 w-4 text-blue-600\" />\n                ) : (\n                  <VolumeX className=\"h-4 w-4 text-gray-400\" />\n                )}\n                <span className=\"text-sm\">Warning sounds</span>\n              </div>\n              <Switch\n                checked={audioEnabled}\n                onCheckedChange={onAudioEnabledChange}\n                disabled={gameActive}\n              />\n            </div>\n            <div className=\"text-muted-foreground text-xs\">\n              Play audio alerts when time is running low (10s, 5s, 3s, 2s, 1s)\n            </div>\n          </div>\n\n          {/* No time control option */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                setSelectedPreset(null);\n                setCustomMinutes(10);\n                setCustomIncrement(5);\n                setCustomFormat(\"X|Y\");\n                setCustomError(null);\n              }}\n              disabled={gameActive}\n              className=\"text-muted-foreground\"\n            >\n              Play without time control\n            </Button>\n          </div>\n        </div>\n\n        <DialogFooter className=\"gap-2\">\n          {timeControl && (\n            <Button\n              variant=\"destructive\"\n              onClick={handleRemove}\n              disabled={gameActive}\n              className=\"mr-auto\"\n            >\n              Remove\n            </Button>\n          )}\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleApply} disabled={!canApply || gameActive}>\n            Apply\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/TimeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/WinnerDialog.motion.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'onPlayAgain' is defined but never used. Allowed unused args must match /^_/u.","line":82,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":14},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":119,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":119,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3126,3128],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"~/components/ui/alert-dialog\";\nimport { Trophy, Handshake } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport { m } from \"framer-motion\";\nimport type { PieceColor } from \"~/lib/game/logic\";\nimport type { DrawResult } from \"~/lib/game/draw-detection\";\nimport { api } from \"~/trpc/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\n\ninterface WinnerDialogProps {\n  winner: PieceColor | \"draw\" | null;\n  drawReason?: DrawResult | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPlayAgain: () => void;\n  onStartAnalysis?: () => void;\n  gameMode: \"ai\" | \"local\" | \"online\";\n  playerColor?: PieceColor;\n  boardVariant?: \"american\" | \"brazilian\" | \"international\" | \"canadian\";\n  aiDifficulty?: \"easy\" | \"medium\" | \"hard\" | \"expert\";\n  timeControl?: {\n    format: \"X|Y\" | \"X+Y\";\n    initialMinutes: number;\n    incrementSeconds: number;\n    preset?: \"bullet\" | \"blitz\" | \"rapid\" | \"classical\" | \"custom\";\n  } | null;\n}\n\n// Confetti particle component\nfunction Confetti() {\n  const colors = [\"#FFD700\", \"#FFA500\", \"#FF69B4\", \"#00CED1\", \"#98FB98\"];\n\n  return (\n    <div className=\"pointer-events-none absolute inset-0 overflow-hidden\">\n      {Array.from({ length: 50 }).map((_, i) => (\n        <m.div\n          key={i}\n          className=\"absolute h-2 w-2 rounded-full\"\n          style={{\n            background: colors[i % colors.length],\n            left: `${Math.random() * 100}%`,\n          }}\n          initial={{\n            y: -20,\n            opacity: 0,\n            scale: 0,\n            rotate: 0,\n          }}\n          animate={{\n            y: 300,\n            opacity: [0, 1, 1, 0],\n            scale: [0, 1, 1, 0.5],\n            rotate: Math.random() * 360,\n          }}\n          transition={{\n            duration: 2 + Math.random(),\n            delay: Math.random() * 0.5,\n            ease: \"easeOut\",\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport function WinnerDialog({\n  winner,\n  drawReason,\n  open,\n  onOpenChange,\n  onPlayAgain,\n  onStartAnalysis,\n  gameMode,\n  playerColor = \"red\",\n  boardVariant = \"american\",\n  aiDifficulty = \"medium\",\n  timeControl = null,\n}: WinnerDialogProps) {\n  const router = useRouter();\n  const [isCreatingGame, setIsCreatingGame] = useState(false);\n\n  const createGameMutation = api.game.create.useMutation({\n    onSuccess: (data) => {\n      router.push(`/game/${data.id}`);\n    },\n    onError: () => {\n      setIsCreatingGame(false);\n    },\n  });\n\n  const handlePlayAgain = () => {\n    setIsCreatingGame(true);\n    createGameMutation.mutate({\n      mode: gameMode,\n      boardVariant,\n      playerColor,\n      aiDifficulty: gameMode === \"ai\" ? aiDifficulty : undefined,\n      timeControl,\n    });\n  };\n\n  if (!winner) return null;\n\n  const getWinnerText = () => {\n    if (winner === \"draw\") {\n      // Use the draw reason explanation if available\n      const description =\n        drawReason?.explanation || \"The game has ended in a draw.\";\n\n      // Create a more specific title based on the draw reason\n      let title = \"Game Drawn!\";\n      if (drawReason?.reason === \"threefold-repetition\") {\n        title = \"Draw by Repetition!\";\n      } else if (drawReason?.reason === \"forty-move-rule\") {\n        title = \"Draw by Forty-Move Rule!\";\n      } else if (drawReason?.reason === \"twenty-five-move-rule\") {\n        title = \"Draw by Twenty-Five-Move Rule!\";\n      } else if (drawReason?.reason === \"insufficient-material\") {\n        title = \"Draw by Insufficient Material!\";\n      } else if (drawReason?.reason === \"stalemate\") {\n        title = \"Draw by Agreement!\";\n      }\n\n      return {\n        title,\n        description,\n        icon: <Handshake className=\"h-12 w-12 text-blue-500\" />,\n        isVictory: false,\n      };\n    }\n\n    if (gameMode === \"ai\") {\n      const playerWon = winner === playerColor;\n      return {\n        title: playerWon ? \"You Win!\" : \"AI Wins!\",\n        description: playerWon\n          ? \"Congratulations! You have defeated the AI opponent.\"\n          : \"The AI has won this game. Better luck next time!\",\n        icon: (\n          <Trophy\n            className={`h-12 w-12 ${playerWon ? \"text-yellow-500\" : \"text-gray-500\"}`}\n          />\n        ),\n        isVictory: playerWon,\n      };\n    }\n\n    if (gameMode === \"online\") {\n      const playerWon = winner === playerColor;\n      return {\n        title: playerWon ? \"You Win!\" : \"You Lose!\",\n        description: playerWon\n          ? \"Congratulations! You have defeated your opponent.\"\n          : \"Your opponent has won this game. Better luck next time!\",\n        icon: (\n          <Trophy\n            className={`h-12 w-12 ${playerWon ? \"text-yellow-500\" : \"text-gray-500\"}`}\n          />\n        ),\n        isVictory: playerWon,\n      };\n    }\n\n    // Local game\n    const winnerName = winner === \"red\" ? \"Red\" : \"Black\";\n    return {\n      title: `${winnerName} Wins!`,\n      description: `${winnerName} player has won the game!`,\n      icon: (\n        <Trophy\n          className={`h-12 w-12 ${winner === \"red\" ? \"text-red-500\" : \"text-gray-700\"}`}\n        />\n      ),\n      isVictory: true, // Both players see celebration in local mode\n    };\n  };\n\n  const { title, description, icon, isVictory } = getWinnerText();\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <div className=\"relative flex flex-col items-center gap-4 py-4\">\n            {/* Confetti for victories */}\n            {isVictory && winner !== \"draw\" && <Confetti />}\n\n            {/* Animated icon */}\n            <m.div\n              initial={{ scale: 0, rotate: -180 }}\n              animate={\n                isVictory && winner !== \"draw\"\n                  ? {\n                      scale: [0, 1.2, 1],\n                      rotate: [180, 360, 360],\n                    }\n                  : {\n                      scale: [0, 1],\n                      rotate: 0,\n                    }\n              }\n              transition={{\n                type: \"spring\",\n                stiffness: 200,\n                damping: 15,\n                duration: 0.6,\n              }}\n            >\n              {/* Glow effect for victory */}\n              {isVictory && winner !== \"draw\" && (\n                <m.div\n                  className=\"absolute inset-0 rounded-full blur-xl\"\n                  style={{\n                    background:\n                      winner === \"red\"\n                        ? \"radial-gradient(circle, rgba(239,68,68,0.4) 0%, transparent 70%)\"\n                        : \"radial-gradient(circle, rgba(255,215,0,0.4) 0%, transparent 70%)\",\n                  }}\n                  animate={{\n                    scale: [1, 1.5, 1],\n                    opacity: [0.5, 0.8, 0.5],\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                  }}\n                />\n              )}\n\n              {/* Trophy bounce animation for victory */}\n              {isVictory && winner !== \"draw\" ? (\n                <m.div\n                  animate={{\n                    y: [0, -10, 0],\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                  }}\n                >\n                  {icon}\n                </m.div>\n              ) : (\n                icon\n              )}\n            </m.div>\n\n            <AlertDialogTitle className=\"relative z-10 text-2xl\">\n              {title}\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"relative z-10 text-center\">\n              {description}\n            </AlertDialogDescription>\n          </div>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <div className=\"flex w-full gap-2\">\n            {onStartAnalysis && (\n              <Button\n                onClick={onStartAnalysis}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Analyze Game\n              </Button>\n            )}\n            <AlertDialogAction\n              onClick={handlePlayAgain}\n              className=\"flex-1\"\n              disabled={isCreatingGame}\n            >\n              {isCreatingGame ? \"Creating...\" : \"Play Again\"}\n            </AlertDialogAction>\n          </div>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/WinnerDialog.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'onPlayAgain' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":14},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":81,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":81,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2139,2141],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"~/components/ui/alert-dialog\";\nimport { Trophy, Handshake } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport type { PieceColor } from \"~/lib/game/logic\";\nimport type { DrawResult } from \"~/lib/game/draw-detection\";\nimport { api } from \"~/trpc/react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\n\ninterface WinnerDialogProps {\n  winner: PieceColor | \"draw\" | null;\n  drawReason?: DrawResult | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPlayAgain: () => void;\n  onStartAnalysis?: () => void;\n  gameMode: \"ai\" | \"local\" | \"online\";\n  playerColor?: PieceColor;\n  boardVariant?: \"american\" | \"brazilian\" | \"international\" | \"canadian\";\n  aiDifficulty?: \"easy\" | \"medium\" | \"hard\" | \"expert\";\n  timeControl?: {\n    format: \"X|Y\" | \"X+Y\";\n    initialMinutes: number;\n    incrementSeconds: number;\n    preset?: \"bullet\" | \"blitz\" | \"rapid\" | \"classical\" | \"custom\";\n  } | null;\n}\n\nexport function WinnerDialog({\n  winner,\n  drawReason,\n  open,\n  onOpenChange,\n  onPlayAgain,\n  onStartAnalysis,\n  gameMode,\n  playerColor = \"red\",\n  boardVariant = \"american\",\n  aiDifficulty = \"medium\",\n  timeControl = null,\n}: WinnerDialogProps) {\n  const router = useRouter();\n  const [isCreatingGame, setIsCreatingGame] = useState(false);\n\n  const createGameMutation = api.game.create.useMutation({\n    onSuccess: (data) => {\n      router.push(`/game/${data.id}`);\n    },\n    onError: () => {\n      setIsCreatingGame(false);\n    },\n  });\n\n  const handlePlayAgain = () => {\n    setIsCreatingGame(true);\n    createGameMutation.mutate({\n      mode: gameMode,\n      boardVariant,\n      playerColor,\n      aiDifficulty: gameMode === \"ai\" ? aiDifficulty : undefined,\n      timeControl,\n    });\n  };\n\n  if (!winner) return null;\n\n  const getWinnerText = () => {\n    if (winner === \"draw\") {\n      // Use the draw reason explanation if available\n      const description =\n        drawReason?.explanation || \"The game has ended in a draw.\";\n\n      // Create a more specific title based on the draw reason\n      let title = \"Game Drawn!\";\n      if (drawReason?.reason === \"threefold-repetition\") {\n        title = \"Draw by Repetition!\";\n      } else if (drawReason?.reason === \"forty-move-rule\") {\n        title = \"Draw by Forty-Move Rule!\";\n      } else if (drawReason?.reason === \"twenty-five-move-rule\") {\n        title = \"Draw by Twenty-Five-Move Rule!\";\n      } else if (drawReason?.reason === \"insufficient-material\") {\n        title = \"Draw by Insufficient Material!\";\n      } else if (drawReason?.reason === \"stalemate\") {\n        title = \"Draw by Agreement!\";\n      }\n\n      return {\n        title,\n        description,\n        icon: <Handshake className=\"h-12 w-12 text-blue-500\" />,\n      };\n    }\n\n    if (gameMode === \"ai\") {\n      const playerWon = winner === playerColor;\n      return {\n        title: playerWon ? \"You Win!\" : \"AI Wins!\",\n        description: playerWon\n          ? \"Congratulations! You have defeated the AI opponent.\"\n          : \"The AI has won this game. Better luck next time!\",\n        icon: (\n          <Trophy\n            className={`h-12 w-12 ${playerWon ? \"text-yellow-500\" : \"text-gray-500\"}`}\n          />\n        ),\n      };\n    }\n\n    if (gameMode === \"online\") {\n      const playerWon = winner === playerColor;\n      return {\n        title: playerWon ? \"You Win!\" : \"You Lose!\",\n        description: playerWon\n          ? \"Congratulations! You have defeated your opponent.\"\n          : \"Your opponent has won this game. Better luck next time!\",\n        icon: (\n          <Trophy\n            className={`h-12 w-12 ${playerWon ? \"text-yellow-500\" : \"text-gray-500\"}`}\n          />\n        ),\n      };\n    }\n\n    // Local game\n    const winnerName = winner === \"red\" ? \"Red\" : \"Black\";\n    return {\n      title: `${winnerName} Wins!`,\n      description: `${winnerName} player has won the game!`,\n      icon: (\n        <Trophy\n          className={`h-12 w-12 ${winner === \"red\" ? \"text-red-500\" : \"text-gray-700\"}`}\n        />\n      ),\n    };\n  };\n\n  const { title, description, icon } = getWinnerText();\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <div className=\"flex flex-col items-center gap-4 py-4\">\n            {icon}\n            <AlertDialogTitle className=\"text-2xl\">{title}</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-center\">\n              {description}\n            </AlertDialogDescription>\n          </div>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <div className=\"flex w-full gap-2\">\n            {onStartAnalysis && (\n              <Button\n                onClick={onStartAnalysis}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Analyze Game\n              </Button>\n            )}\n            <AlertDialogAction\n              onClick={handlePlayAgain}\n              className=\"flex-1\"\n              disabled={isCreatingGame}\n            >\n              {isCreatingGame ? \"Creating...\" : \"Play Again\"}\n            </AlertDialogAction>\n          </div>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/game-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/player-card-container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_components/game/player-timer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_lib/board-style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/_lib/map-user-to-player-info.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/friends/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/[id]/replay/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/bot/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/friend/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/local/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/game/simple/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/history/_components/MatchHistoryTable.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'refetch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":53,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { api } from \"~/trpc/react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"~/components/ui/table\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Button } from \"~/components/ui/button\";\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { Input } from \"~/components/ui/input\";\nimport { Label } from \"~/components/ui/label\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Trophy,\n  Target,\n  Handshake,\n  Clock,\n  TrendingUp,\n  Eye,\n  RotateCcw,\n} from \"lucide-react\";\n\ninterface MatchHistoryTableProps {\n  userId: string;\n}\n\ntype GameMode = \"all\" | \"ai\" | \"local\" | \"online\";\n\nexport default function MatchHistoryTable({ userId }: MatchHistoryTableProps) {\n  const router = useRouter();\n  const [page, setPage] = useState(0);\n  const [gameMode, setGameMode] = useState<GameMode>(\"all\");\n  const [searchOpponent, setSearchOpponent] = useState(\"\");\n  const pageSize = 15;\n\n  const { data, isLoading, refetch } =\n    api.user.getEnhancedMatchHistory.useQuery({\n      userId,\n      skip: page * pageSize,\n      take: pageSize,\n      gameMode: gameMode === \"all\" ? undefined : gameMode,\n      searchOpponent: searchOpponent || undefined,\n    });\n\n  const matches = data?.matches ?? [];\n  const totalCount = data?.total ?? 0;\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const stats = data?.stats;\n\n  const getOpponentName = (match: (typeof matches)[0]) => {\n    if (match.gameMode === \"ai\") return \"AI Opponent\";\n    if (match.gameMode === \"local\") return \"Local Player\";\n\n    if (match.player1Id === userId) {\n      return match.player2?.name ?? match.player2?.username ?? \"Unknown\";\n    } else {\n      return match.player1?.name ?? match.player1?.username ?? \"Unknown\";\n    }\n  };\n\n  const getPlayerColor = (match: (typeof matches)[0]) => {\n    if (match.gameMode === \"ai\" || match.gameMode === \"local\") {\n      return \"red\";\n    }\n    return match.player1Id === userId ? \"red\" : \"black\";\n  };\n\n  const getResult = (match: (typeof matches)[0]) => {\n    if (!match.winner) return \"in-progress\";\n    if (match.winner === \"draw\") return \"draw\";\n\n    const playerColor = getPlayerColor(match);\n    return match.winner === playerColor ? \"win\" : \"loss\";\n  };\n\n  const getResultBadge = (result: string) => {\n    switch (result) {\n      case \"win\":\n        return (\n          <Badge variant=\"default\" className=\"gap-1\">\n            <Trophy className=\"h-3 w-3\" />\n            Win\n          </Badge>\n        );\n      case \"loss\":\n        return <Badge variant=\"destructive\">Loss</Badge>;\n      case \"draw\":\n        return (\n          <Badge variant=\"secondary\" className=\"gap-1\">\n            <Handshake className=\"h-3 w-3\" />\n            Draw\n          </Badge>\n        );\n      case \"in-progress\":\n        return (\n          <Badge variant=\"outline\" className=\"gap-1\">\n            <Clock className=\"h-3 w-3\" />\n            In Progress\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getGameModeBadge = (mode: string) => {\n    switch (mode) {\n      case \"ai\":\n        return (\n          <Badge variant=\"outline\" className=\"gap-1\">\n            <Target className=\"h-3 w-3\" />\n            vs AI\n          </Badge>\n        );\n      case \"local\":\n        return <Badge variant=\"outline\">Local</Badge>;\n      case \"online\":\n        return <Badge variant=\"outline\">Online</Badge>;\n      default:\n        return <Badge variant=\"outline\">{mode}</Badge>;\n    }\n  };\n\n  const handleViewGame = (gameId: string) => {\n    // Navigate to replay page with analysis mode enabled\n    router.push(`/game/${gameId}/replay?analysis=true`);\n  };\n\n  const handleResetFilters = () => {\n    setGameMode(\"all\");\n    setSearchOpponent(\"\");\n    setPage(0);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Summary */}\n      {stats && (\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Games</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold\">{stats.totalGames}</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Win Rate</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold\">{stats.winRate}%</p>\n              <p className=\"text-muted-foreground text-xs\">\n                {stats.wins}W - {stats.losses}L - {stats.draws}D\n              </p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Best Streak</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"flex items-center gap-1 text-2xl font-bold\">\n                {stats.bestStreak}\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg. Moves</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-2xl font-bold\">{stats.avgMoves}</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col gap-4 md:flex-row md:items-end\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"mode-filter\">Game Mode</Label>\n              <Select\n                value={gameMode}\n                onValueChange={(value) => {\n                  setGameMode(value as GameMode);\n                  setPage(0);\n                }}\n              >\n                <SelectTrigger id=\"mode-filter\">\n                  <SelectValue placeholder=\"All Games\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Games</SelectItem>\n                  <SelectItem value=\"ai\">vs AI</SelectItem>\n                  <SelectItem value=\"local\">Local</SelectItem>\n                  <SelectItem value=\"online\">Online</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex-1\">\n              <Label htmlFor=\"opponent-search\">Search Opponent</Label>\n              <Input\n                id=\"opponent-search\"\n                placeholder=\"Enter opponent name...\"\n                value={searchOpponent}\n                onChange={(e) => {\n                  setSearchOpponent(e.target.value);\n                  setPage(0);\n                }}\n              />\n            </div>\n\n            <Button\n              variant=\"outline\"\n              onClick={handleResetFilters}\n              className=\"gap-2\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              Reset\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Match History Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Games</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-2\">\n              {[...(Array(5) as unknown[])].map((_, i) => (\n                <Skeleton key={i} className=\"h-12 w-full\" />\n              ))}\n            </div>\n          ) : matches.length > 0 ? (\n            <>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Opponent</TableHead>\n                      <TableHead>Mode</TableHead>\n                      <TableHead>Your Color</TableHead>\n                      <TableHead className=\"text-center\">Moves</TableHead>\n                      <TableHead className=\"text-center\">Duration</TableHead>\n                      <TableHead>Result</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {matches.map((match) => {\n                      const result = getResult(match);\n                      const duration =\n                        match.lastSaved && match.gameStartTime\n                          ? Math.round(\n                              (new Date(match.lastSaved).getTime() -\n                                new Date(match.gameStartTime).getTime()) /\n                                1000 /\n                                60,\n                            )\n                          : 0;\n\n                      return (\n                        <TableRow\n                          key={match.id}\n                          className=\"hover:bg-muted/50 cursor-pointer\"\n                          onClick={() => handleViewGame(match.id)}\n                        >\n                          <TableCell className=\"font-medium\">\n                            <div>\n                              <p className=\"text-sm\">\n                                {formatDistanceToNow(\n                                  new Date(match.gameStartTime),\n                                  { addSuffix: true },\n                                )}\n                              </p>\n                              <p className=\"text-muted-foreground text-xs\">\n                                {new Date(\n                                  match.gameStartTime,\n                                ).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </TableCell>\n                          <TableCell>{getOpponentName(match)}</TableCell>\n                          <TableCell>\n                            {getGameModeBadge(match.gameMode)}\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={\n                                getPlayerColor(match) === \"red\"\n                                  ? \"destructive\"\n                                  : \"default\"\n                              }\n                              className=\"capitalize\"\n                            >\n                              {getPlayerColor(match)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            {match.moveCount}\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            {duration > 0 ? `${duration} min` : \"-\"}\n                          </TableCell>\n                          <TableCell>{getResultBadge(result)}</TableCell>\n                          <TableCell className=\"text-right\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleViewGame(match.id);\n                              }}\n                              className=\"gap-2\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                              Analyze\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {totalPages > 1 && (\n                <div className=\"mt-6 flex items-center justify-between\">\n                  <p className=\"text-muted-foreground text-sm\">\n                    Showing {page * pageSize + 1} to{\" \"}\n                    {Math.min((page + 1) * pageSize, totalCount)} of{\" \"}\n                    {totalCount} games\n                  </p>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setPage((p) => Math.max(0, p - 1))}\n                      disabled={page === 0}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                      Previous\n                    </Button>\n                    <div className=\"flex items-center gap-2\">\n                      {[...(Array(Math.min(5, totalPages)) as unknown[])].map(\n                        (_, i) => {\n                          const pageNum = page - 2 + i;\n                          if (pageNum < 0 || pageNum >= totalPages) return null;\n                          return (\n                            <Button\n                              key={pageNum}\n                              variant={pageNum === page ? \"default\" : \"outline\"}\n                              size=\"sm\"\n                              onClick={() => setPage(pageNum)}\n                              className=\"w-10\"\n                            >\n                              {pageNum + 1}\n                            </Button>\n                          );\n                        },\n                      )}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setPage((p) => p + 1)}\n                      disabled={page >= totalPages - 1}\n                    >\n                      Next\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"py-12 text-center\">\n              <p className=\"text-muted-foreground text-lg\">No games found</p>\n              <p className=\"text-muted-foreground mt-2 text-sm\">\n                {gameMode !== \"all\" || searchOpponent\n                  ? \"Try adjusting your filters\"\n                  : \"Start playing to build your match history\"}\n              </p>\n              {(gameMode !== \"all\" || searchOpponent) && (\n                <Button\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  onClick={handleResetFilters}\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/history/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/messages/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/profile/_components/MatchHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/profile/_components/ProfileManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/profile/_components/StatsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/profile/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/test-coming-soon/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/users/[username]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/users/_components/GameProfileView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/users/_components/UsersBrowser.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'currentUserId' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { api } from \"~/trpc/react\";\nimport { Card, CardContent } from \"~/components/ui/card\";\nimport { Input } from \"~/components/ui/input\";\nimport { Button } from \"~/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"~/components/ui/avatar\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport { Search, Users, Trophy, Gamepad2, Sparkles } from \"lucide-react\";\nimport { m } from \"~/lib/motion\";\nimport Link from \"next/link\";\n\ninterface UsersBrowserProps {\n  currentUserId?: string;\n}\n\nexport default function UsersBrowser({ currentUserId }: UsersBrowserProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: users, isLoading } = api.user.searchUsers.useQuery(\n    { query: searchQuery },\n    {\n      enabled: searchQuery.length > 0,\n    },\n  );\n\n  // Mock featured players for when there's no search\n  const featuredPlayers = [\n    {\n      id: \"1\",\n      username: \"champion_player\",\n      name: \"Champion\",\n      level: 15,\n      wins: 234,\n      games: 456,\n    },\n    {\n      id: \"2\",\n      username: \"rising_star\",\n      name: \"Rising Star\",\n      level: 8,\n      wins: 89,\n      games: 178,\n    },\n    {\n      id: \"3\",\n      username: \"casual_gamer\",\n      name: \"Casual Player\",\n      level: 5,\n      wins: 34,\n      games: 98,\n    },\n  ];\n\n  const getPlayerBadge = (wins: number, games: number) => {\n    const winRate = games > 0 ? (wins / games) * 100 : 0;\n    if (winRate >= 70 && games >= 20)\n      return {\n        text: \"Elite\",\n        color: \"bg-gradient-to-r from-yellow-400 to-orange-400\",\n      };\n    if (winRate >= 60 && games >= 10)\n      return {\n        text: \"Expert\",\n        color: \"bg-gradient-to-r from-purple-400 to-pink-400\",\n      };\n    if (winRate >= 50)\n      return {\n        text: \"Skilled\",\n        color: \"bg-gradient-to-r from-blue-400 to-cyan-400\",\n      };\n    if (games >= 5)\n      return {\n        text: \"Active\",\n        color: \"bg-gradient-to-r from-green-400 to-emerald-400\",\n      };\n    return { text: \"New\", color: \"bg-gradient-to-r from-gray-400 to-gray-500\" };\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search Bar */}\n      <div className=\"relative mx-auto max-w-2xl\">\n        <Search className=\"absolute top-1/2 left-3 h-5 w-5 -translate-y-1/2 transform text-gray-400\" />\n        <Input\n          type=\"text\"\n          placeholder=\"Search players by username or name...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"h-12 border-2 border-purple-200 pr-4 pl-10 text-lg focus:border-purple-400 dark:border-purple-800 dark:focus:border-purple-600\"\n        />\n      </div>\n\n      {/* Results or Featured Players */}\n      {isLoading ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {[...(Array(6) as unknown[])].map((_, i) => (\n            <Card key={i} className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <Skeleton className=\"h-16 w-16 rounded-full\" />\n                <div className=\"flex-1\">\n                  <Skeleton className=\"mb-2 h-5 w-32\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <>\n          {searchQuery.length === 0 ? (\n            <>\n              <div className=\"mb-8 text-center\">\n                <h2 className=\"mb-2 text-2xl font-semibold\">\n                  Featured Players\n                </h2>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Start typing to search for specific players\n                </p>\n              </div>\n\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {featuredPlayers.map((player, index) => {\n                  const badge = getPlayerBadge(player.wins, player.games);\n                  const winRate =\n                    player.games > 0\n                      ? Math.round((player.wins / player.games) * 100)\n                      : 0;\n\n                  return (\n                    <m.div\n                      key={player.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                    >\n                      <Card className=\"group overflow-hidden border-2 transition-all duration-300 hover:border-purple-300 hover:shadow-xl dark:hover:border-purple-700\">\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-50 to-pink-50 opacity-0 transition-opacity group-hover:opacity-100 dark:from-purple-900/10 dark:to-pink-900/10\" />\n                        <CardContent className=\"relative p-6\">\n                          <div className=\"flex items-start gap-4\">\n                            <div className=\"relative\">\n                              <Avatar className=\"h-16 w-16 ring-2 ring-purple-200 transition-all group-hover:ring-purple-400 dark:ring-purple-800 dark:group-hover:ring-purple-600\">\n                                <AvatarImage src={undefined} />\n                                <AvatarFallback className=\"bg-gradient-to-br from-purple-400 to-pink-400 text-xl text-white\">\n                                  {player.name.charAt(0)}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div className=\"absolute -right-1 -bottom-1 rounded-full border-2 border-purple-300 bg-white px-2 py-0.5 text-xs font-bold dark:border-purple-700 dark:bg-gray-800\">\n                                Lvl {player.level}\n                              </div>\n                            </div>\n\n                            <div className=\"flex-1\">\n                              <div className=\"mb-1 flex items-center gap-2\">\n                                <h3 className=\"text-lg font-semibold\">\n                                  {player.name}\n                                </h3>\n                                <Badge\n                                  className={`${badge.color} text-xs text-white`}\n                                >\n                                  {badge.text}\n                                </Badge>\n                              </div>\n                              <p className=\"mb-3 text-sm text-gray-600 dark:text-gray-400\">\n                                @{player.username}\n                              </p>\n\n                              <div className=\"flex items-center gap-4 text-sm\">\n                                <div className=\"flex items-center gap-1\">\n                                  <Trophy className=\"h-4 w-4 text-yellow-500\" />\n                                  <span>{player.wins}W</span>\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <Gamepad2 className=\"h-4 w-4 text-blue-500\" />\n                                  <span>{player.games} games</span>\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <Sparkles className=\"h-4 w-4 text-purple-500\" />\n                                  <span>{winRate}%</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"mt-4 border-t border-gray-200 pt-4 dark:border-gray-700\">\n                            <Button\n                              asChild\n                              className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n                            >\n                              <Link href={`/users/${player.username}`}>\n                                View Profile\n                              </Link>\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </m.div>\n                  );\n                })}\n              </div>\n            </>\n          ) : users && users.length > 0 ? (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {users.map((user, index) => (\n                <m.div\n                  key={user.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card className=\"group overflow-hidden border-2 transition-all duration-300 hover:border-purple-300 hover:shadow-xl dark:hover:border-purple-700\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-purple-50 to-pink-50 opacity-0 transition-opacity group-hover:opacity-100 dark:from-purple-900/10 dark:to-pink-900/10\" />\n                    <CardContent className=\"relative p-6\">\n                      <div className=\"flex items-center gap-4\">\n                        <Avatar className=\"h-14 w-14 ring-2 ring-purple-200 transition-all group-hover:ring-purple-400 dark:ring-purple-800 dark:group-hover:ring-purple-600\">\n                          <AvatarImage src={user.image ?? undefined} />\n                          <AvatarFallback className=\"bg-gradient-to-br from-purple-400 to-pink-400 text-white\">\n                            {(user.name ?? user.username)\n                              .charAt(0)\n                              .toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold\">\n                            {user.name ?? user.username}\n                          </h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            @{user.username}\n                          </p>\n                        </div>\n\n                        <Button\n                          asChild\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"hover:bg-purple-50 dark:hover:bg-purple-900/20\"\n                        >\n                          <Link href={`/users/${user.username}`}>\n                            <Users className=\"mr-1 h-4 w-4\" />\n                            View\n                          </Link>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </m.div>\n              ))}\n            </div>\n          ) : searchQuery.length > 0 ? (\n            <Card className=\"p-12\">\n              <div className=\"text-center\">\n                <Users className=\"mx-auto mb-4 h-12 w-12 text-gray-400\" />\n                <h3 className=\"mb-2 text-lg font-semibold\">No players found</h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Try searching with a different name or username\n                </p>\n              </div>\n            </Card>\n          ) : null}\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/(checkers)/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/api/auth/[...nextauth]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/api/game/[id]/stream/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/api/trpc/[trpc]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/_components/AuthLayout.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'brandHref' is assigned a value but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Image from \"next/image\";\nimport React from \"react\";\n\ninterface AuthLayoutProps {\n  imageSrc: string;\n  imageAlt?: string;\n  reverse?: boolean;\n  children: React.ReactNode;\n  brandName?: string;\n  brandHref?: string;\n}\n\nexport default function AuthLayout({\n  imageSrc,\n  imageAlt = \"\",\n  reverse = false,\n  children,\n  brandName = \"\",\n  brandHref = \"/\",\n}: AuthLayoutProps) {\n  return (\n    <div className=\"grid min-h-svh lg:grid-cols-2\">\n      {/* Form column */}\n      <div className={reverse ? \"order-2 lg:order-2\" : \"order-1 lg:order-1\"}>\n        <div className=\"flex h-full flex-col gap-4 p-6 md:p-10\">\n          {/* Brand header */}\n          <div className=\"flex justify-center gap-2 md:justify-start\">\n            <Image\n              src=\"/logo.png\"\n              alt={brandName || \"brand\"}\n              width={200}\n              height={200}\n            />\n          </div>\n          {/* Centered content */}\n          <div className=\"flex flex-1 items-center justify-center\">\n            <div className=\"w-full max-w-xs\">{children}</div>\n          </div>\n        </div>\n      </div>\n      {/* Image column */}\n      <div\n        className={`bg-muted relative hidden lg:block ${reverse ? \"order-1 lg:order-1\" : \"order-2 lg:order-2\"}`}\n      >\n        <Image\n          src={imageSrc}\n          alt={imageAlt}\n          fill\n          priority\n          sizes=\"(max-width: 1024px) 0px, 50vw\"\n          className=\"absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale\"\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/forgot-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/new-user/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/reset-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/signin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/signin/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":112,"column":14,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3557,3590],"text":"\n          Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3557,3590],"text":"\n          Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3557,3590],"text":"\n          Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3557,3590],"text":"\n          Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Suspense, useState } from \"react\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Link from \"next/link\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Label } from \"~/components/ui/label\";\nimport { Separator } from \"~/components/ui/separator\";\n\nconst signinSchema = z.object({\n  emailOrUsername: z.string().min(1, \"Email or username is required\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\ntype SigninData = z.infer<typeof signinSchema>;\n\nfunction SignInInner() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const callbackUrl = searchParams.get(\"callbackUrl\") ?? \"/\";\n\n  const signinForm = useForm<SigninData>({\n    resolver: zodResolver(signinSchema),\n  });\n\n  const onSignIn = async (data: SigninData) => {\n    setIsLoading(true);\n    setError(null);\n\n    const result = await signIn(\"credentials\", {\n      emailOrUsername: data.emailOrUsername,\n      password: data.password,\n      redirect: false,\n    });\n\n    setIsLoading(false);\n\n    if (result?.error) {\n      setError(\"Invalid credentials\");\n    } else {\n      router.push(callbackUrl);\n      router.refresh();\n    }\n  };\n\n  const handleDiscordSignIn = () => {\n    setIsLoading(true);\n    void signIn(\"discord\", { callbackUrl });\n  };\n\n  return (\n    <>\n      <div className=\"mb-6 space-y-1 text-center md:text-left\">\n        <h1 className=\"text-2xl font-semibold tracking-tight\">\n          Login to your account\n        </h1>\n        <p className=\"text-muted-foreground text-sm\">\n          Enter your email below to login to your account\n        </p>\n      </div>\n      <form onSubmit={signinForm.handleSubmit(onSignIn)} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"signin-email\">Email or Username</Label>\n          <Input\n            id=\"signin-email\"\n            type=\"text\"\n            placeholder=\"\"\n            {...signinForm.register(\"emailOrUsername\")}\n            disabled={isLoading}\n          />\n          {signinForm.formState.errors.emailOrUsername && (\n            <p className=\"text-sm text-red-500\">\n              {signinForm.formState.errors.emailOrUsername.message}\n            </p>\n          )}\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"signin-password\">Password</Label>\n          <Input\n            id=\"signin-password\"\n            type=\"password\"\n            {...signinForm.register(\"password\")}\n            disabled={isLoading}\n          />\n          {signinForm.formState.errors.password && (\n            <p className=\"text-sm text-red-500\">\n              {signinForm.formState.errors.password.message}\n            </p>\n          )}\n        </div>\n        {error && <p className=\"text-sm text-red-500\">{error}</p>}\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading ? \"Signing in...\" : \"Sign In\"}\n        </Button>\n        <div className=\"text-center text-sm\">\n          <Link\n            href=\"/auth/forgot-password\"\n            className=\"text-blue-600 hover:underline\"\n          >\n            Forgot your password?\n          </Link>\n        </div>\n        <div className=\"text-center text-sm text-gray-600\">\n          Don't have an account?{\" \"}\n          <Link href=\"/auth/signup\" className=\"text-blue-600 hover:underline\">\n            Sign up\n          </Link>\n        </div>\n\n        <div className=\"relative my-4\">\n          <Separator />\n          <span className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white px-2 text-sm text-gray-500\">\n            Or continue with\n          </span>\n        </div>\n\n        <Button\n          variant=\"outline\"\n          className=\"w-full\"\n          onClick={handleDiscordSignIn}\n          disabled={isLoading}\n          type=\"button\"\n        >\n          <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n            <path\n              fill=\"currentColor\"\n              d=\"M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z\"\n            />\n          </svg>\n          Sign in with Discord\n        </Button>\n      </form>\n    </>\n  );\n}\n\nexport default function SignInPage() {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"flex min-h-screen items-center justify-center px-4\">\n          Loading...\n        </div>\n      }\n    >\n      <SignInInner />\n    </Suspense>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/signout/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/signout/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/signup/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/auth/signup/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/AppLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/AvatarUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/Leaderboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/NotificationDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/Sidebar.motion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/SkinSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/SkinStyleInjector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/TabStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/ChatFriendsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/ChatMessages.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/ChatSettingsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/FloatingChat.motion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<ChatChannel>`.","line":294,"column":33,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":294,"endColumn":40},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":307,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":307,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { Card } from \"~/components/ui/card\";\nimport { Input } from \"~/components/ui/input\";\nimport { Button } from \"~/components/ui/button\";\nimport { Badge } from \"~/components/ui/badge\";\nimport {\n  Users,\n  Bell,\n  Settings,\n  Send,\n  Minimize2,\n  Maximize2,\n  Hash,\n  AtSign,\n} from \"lucide-react\";\nimport { ChatFriendsPopup } from \"./ChatFriendsPopup\";\nimport { NotificationsPopup } from \"./NotificationsPopup\";\nimport { ChatSettingsPopup } from \"./ChatSettingsPopup\";\nimport { ChatMessages } from \"./ChatMessages\";\nimport { m, AnimatePresence, useMotionValue } from \"framer-motion\";\nimport type { FloatingChatProps, ChatChannel } from \"./types\";\n\n/**\n * Animated Floating Chat component with drag physics and smooth animations\n * Features momentum-based dragging and minimization animations\n */\nexport function MotionFloatingChat({ initialPosition }: FloatingChatProps) {\n  const { data: session } = useSession();\n  const [isMinimized, setIsMinimized] = useState(true);\n  const constraintsRef = useRef<HTMLDivElement>(null);\n\n  // Motion values for smooth dragging\n  const x = useMotionValue(initialPosition?.x ?? window.innerWidth - 420);\n  const y = useMotionValue(initialPosition?.y ?? window.innerHeight - 100);\n\n  const [message, setMessage] = useState(\"\");\n  const [currentChannel, setCurrentChannel] = useState<ChatChannel>({\n    id: \"general\",\n    name: \"General\",\n    type: \"general\",\n    unreadCount: 0,\n  });\n\n  // Popup states\n  const [showFriends, setShowFriends] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n\n  const chatVariants = {\n    minimized: {\n      width: 350,\n      height: 60,\n      borderRadius: 30,\n      transition: {\n        type: \"spring\" as const,\n        stiffness: 400,\n        damping: 30,\n      },\n    },\n    expanded: {\n      width: 400,\n      height: 500,\n      borderRadius: 12,\n      transition: {\n        type: \"spring\" as const,\n        stiffness: 400,\n        damping: 30,\n      },\n    },\n  };\n\n  const contentVariants = {\n    hidden: {\n      opacity: 0,\n      scale: 0.95,\n      transition: { duration: 0.2 },\n    },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.3,\n        ease: [0.4, 0, 0.2, 1] as const,\n      },\n    },\n  };\n\n  return (\n    <>\n      {/* Constraints for dragging */}\n      <div\n        ref={constraintsRef}\n        className=\"pointer-events-none fixed inset-0\"\n        style={{ zIndex: 999 }}\n      />\n\n      <m.div\n        drag\n        dragConstraints={constraintsRef}\n        dragElastic={0.1}\n        dragMomentum={true}\n        dragTransition={{ bounceStiffness: 300, bounceDamping: 20 }}\n        style={{ x, y }}\n        variants={chatVariants}\n        initial=\"minimized\"\n        animate={isMinimized ? \"minimized\" : \"expanded\"}\n        className=\"pointer-events-auto fixed z-[1000]\"\n        whileDrag={{ scale: 1.02 }}\n      >\n        <Card className=\"relative h-full w-full overflow-hidden border-gray-200 shadow-2xl\">\n          {/* Minimized View */}\n          <AnimatePresence mode=\"wait\">\n            {isMinimized ? (\n              <m.div\n                key=\"minimized\"\n                variants={contentVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"hidden\"\n                className=\"flex h-full items-center justify-between px-4\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <m.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n                    <Hash className=\"h-5 w-5 text-gray-500\" />\n                  </m.div>\n                  <span className=\"font-medium text-gray-700\">Chat</span>\n                  {currentChannel.unreadCount > 0 && (\n                    <m.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ type: \"spring\", stiffness: 500 }}\n                    >\n                      <Badge variant=\"destructive\" className=\"rounded-full\">\n                        {currentChannel.unreadCount}\n                      </Badge>\n                    </m.div>\n                  )}\n                </div>\n                <m.button\n                  onClick={() => setIsMinimized(false)}\n                  className=\"rounded-lg p-2 transition-colors hover:bg-gray-100\"\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                >\n                  <Maximize2 className=\"h-4 w-4 text-gray-600\" />\n                </m.button>\n              </m.div>\n            ) : (\n              <m.div\n                key=\"expanded\"\n                variants={contentVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"hidden\"\n                className=\"flex h-full flex-col\"\n              >\n                {/* Chat Header */}\n                <div className=\"flex items-center justify-between border-b bg-gray-50 p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <m.div\n                      whileHover={{ rotate: 360 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      {currentChannel.type === \"dm\" ? (\n                        <AtSign className=\"h-4 w-4 text-gray-500\" />\n                      ) : (\n                        <Hash className=\"h-4 w-4 text-gray-500\" />\n                      )}\n                    </m.div>\n                    <span className=\"font-semibold text-gray-700\">\n                      {currentChannel.name}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center gap-1\">\n                    <m.div\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => setShowFriends(!showFriends)}\n                      >\n                        <Users className=\"h-4 w-4\" />\n                      </Button>\n                    </m.div>\n\n                    <m.div\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"relative h-8 w-8\"\n                        onClick={() => setShowNotifications(!showNotifications)}\n                      >\n                        <Bell className=\"h-4 w-4\" />\n                        <m.span\n                          className=\"absolute top-1 right-1 h-2 w-2 rounded-full bg-red-500\"\n                          animate={{ scale: [1, 1.2, 1] }}\n                          transition={{ repeat: Infinity, duration: 2 }}\n                        />\n                      </Button>\n                    </m.div>\n\n                    <m.div\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => setShowSettings(!showSettings)}\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                    </m.div>\n\n                    <m.div\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => setIsMinimized(true)}\n                      >\n                        <Minimize2 className=\"h-4 w-4\" />\n                      </Button>\n                    </m.div>\n                  </div>\n                </div>\n\n                {/* Messages Area */}\n                <div className=\"flex-1 overflow-hidden\">\n                  <ChatMessages\n                    messages={[]}\n                    currentUserId={session?.user?.id ?? \"\"}\n                  />\n                </div>\n\n                {/* Message Input */}\n                <m.div\n                  className=\"border-t bg-white p-4\"\n                  initial={{ y: 20, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ delay: 0.2 }}\n                >\n                  <form\n                    onSubmit={(e) => {\n                      e.preventDefault();\n                      // Handle send message\n                      setMessage(\"\");\n                    }}\n                    className=\"flex gap-2\"\n                  >\n                    <Input\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      placeholder=\"Type a message...\"\n                      className=\"flex-1\"\n                    />\n                    <m.div\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Button type=\"submit\" size=\"icon\">\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    </m.div>\n                  </form>\n                </m.div>\n              </m.div>\n            )}\n          </AnimatePresence>\n        </Card>\n      </m.div>\n\n      {/* Popup Components */}\n      <AnimatePresence>\n        {showFriends && (\n          <ChatFriendsPopup\n            isOpen={showFriends}\n            onClose={() => setShowFriends(false)}\n            onSelectChannel={(channel) => {\n              setCurrentChannel(channel);\n              setShowFriends(false);\n            }}\n            friends={[]}\n            channels={[currentChannel]}\n          />\n        )}\n\n        {showNotifications && (\n          <NotificationsPopup\n            isOpen={showNotifications}\n            onClose={() => setShowNotifications(false)}\n            notifications={[]}\n            onClearAll={() => {}}\n          />\n        )}\n\n        {showSettings && (\n          <ChatSettingsPopup\n            isOpen={showSettings}\n            onClose={() => setShowSettings(false)}\n            settings={{\n              notifications: true,\n              soundEnabled: true,\n              theme: \"light\",\n            }}\n            onSave={() => setShowSettings(false)}\n          />\n        )}\n      </AnimatePresence>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/FloatingChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/GameChat.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'gameId' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport { Input } from \"~/components/ui/input\";\nimport { Button } from \"~/components/ui/button\";\nimport { Send, MessageCircle } from \"lucide-react\";\n\ninterface GameChatProps {\n  gameId: string;\n  opponentName?: string;\n}\n\ninterface GameMessage {\n  id: string;\n  content: string;\n  senderId: string;\n  senderName: string;\n  timestamp: Date;\n}\n\nexport function GameChat({ gameId, opponentName = \"Opponent\" }: GameChatProps) {\n  const { data: session } = useSession();\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState<GameMessage[]>([]);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Auto-scroll to bottom when new messages arrive\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!message.trim() || !session?.user) return;\n\n    const newMessage: GameMessage = {\n      id: Date.now().toString(),\n      content: message,\n      senderId: session.user.id,\n      senderName: session.user.name ?? session.user.username ?? \"You\",\n      timestamp: new Date(),\n    };\n\n    // In a real implementation, this would send the message via tRPC or WebSocket\n    setMessages((prev) => [...prev, newMessage]);\n    setMessage(\"\");\n\n    // TODO: Send message to opponent via API\n    // api.game.sendMessage.mutate({ gameId, content: message });\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  if (!session?.user) return null;\n\n  return (\n    <Card className=\"flex h-full flex-col border-amber-300 bg-gradient-to-br from-amber-50 to-amber-100\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-lg text-amber-900\">\n          <MessageCircle className=\"h-5 w-5\" />\n          Game Chat\n        </CardTitle>\n        <p className=\"text-xs text-amber-700\">Chat with {opponentName}</p>\n      </CardHeader>\n      <CardContent className=\"flex flex-1 flex-col overflow-hidden p-4 pt-0\">\n        {/* Messages */}\n        <div className=\"mb-3 flex-1 overflow-hidden\">\n          <div className=\"h-full overflow-y-auto\" ref={scrollAreaRef}>\n            {messages.length === 0 ? (\n              <div className=\"py-8 text-center text-sm text-amber-600\">\n                <MessageCircle className=\"mx-auto mb-2 h-8 w-8 opacity-50\" />\n                <p>Start a conversation with your opponent</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2 pr-3\">\n                {messages.map((msg) => {\n                  const isCurrentUser = msg.senderId === session.user.id;\n                  return (\n                    <div\n                      key={msg.id}\n                      className={`flex ${isCurrentUser ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div\n                        className={`max-w-[75%] rounded-lg px-3 py-2 ${\n                          isCurrentUser\n                            ? \"bg-amber-600 text-white\"\n                            : \"bg-white/70 text-amber-900\"\n                        }`}\n                      >\n                        {!isCurrentUser && (\n                          <p className=\"mb-1 text-xs font-semibold opacity-75\">\n                            {msg.senderName}\n                          </p>\n                        )}\n                        <p className=\"text-sm break-words\">{msg.content}</p>\n                        <p\n                          className={`mt-1 text-xs ${\n                            isCurrentUser ? \"text-amber-100\" : \"text-amber-600\"\n                          }`}\n                        >\n                          {new Date(msg.timestamp).toLocaleTimeString([], {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Input */}\n        <div className=\"flex gap-2\">\n          <Input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type a message...\"\n            className=\"h-9 flex-1 border-amber-300 bg-white/70 text-sm focus:bg-white\"\n          />\n          <Button\n            onClick={handleSendMessage}\n            disabled={!message.trim()}\n            size=\"sm\"\n            className=\"h-9 bg-amber-600 px-3 hover:bg-amber-700\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/IntegratedChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/NotificationsPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/chat/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/friends-mini-drawer.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6737,6739],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'Friend' is defined but never used. Allowed unused vars must match /^_/u.","line":246,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9937,9940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9937,9940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isOpen' is defined but never used. Allowed unused args must match /^_/u.","line":258,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10185,10188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10185,10188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10216,10219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10216,10219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10249,10252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10249,10252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [f.id] resolves to an `any` value.","line":314,"column":52,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":314,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":314,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":314,"endColumn":56},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":314,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":314,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11933,11935],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .image on an `any` value.","line":314,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":314,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":317,"column":28,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":317,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":317,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":317,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":318,"column":30,"nodeType":"Identifier","messageId":"anyAssignment","endLine":318,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":330,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":330,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":333,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":338,"column":36,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":338,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .image on an `any` value.","line":338,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":339,"column":64,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":339,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":339,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":339,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":340,"column":65,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":340,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":340,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":340,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":343,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":343,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .online on an `any` value.","line":359,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":370,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":370,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":373,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":373,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .online on an `any` value.","line":379,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":379,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .online on an `any` value.","line":382,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":382,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":418,"column":22,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":418,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":418,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":418,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":426,"column":37,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":426,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":426,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":426,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":428,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":428,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":428,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":428,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":433,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":433,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":433,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":433,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastMessage on an `any` value.","line":436,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":436,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .unreadCount on an `any` value.","line":439,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":439,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .unreadCount on an `any` value.","line":441,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":441,"endColumn":35}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useMemo, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { Bell } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"~/components/ui/avatar\";\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport { ScrollArea } from \"~/components/ui/scroll-area\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { api } from \"~/trpc/react\";\nimport { cn } from \"~/lib/utils\";\nimport { motion, AnimatePresence, Reorder } from \"motion/react\";\nimport {\n  TabsUnderline,\n  TabsUnderlineList,\n  TabsUnderlineTrigger,\n} from \"~/components/ui/tabs\";\n\ninterface FriendsMiniDrawerProps {\n  className?: string;\n}\n\nconst COLLAPSED = 64;\nconst EXPANDED = 336;\n\nexport function FriendsMiniDrawer({ className }: FriendsMiniDrawerProps) {\n  // Basic data: friends with presence + unread count\n  const { data: session } = useSession();\n  const { data: friends, isLoading: friendsLoading } =\n    api.user.getFriendsWithStatus.useQuery(undefined, {\n      enabled: !!session?.user,\n    });\n  const { data: unread } = api.message.getUnreadCount.useQuery(undefined, {\n    enabled: !!session?.user,\n  });\n  const { data: conversations, isLoading: conversationsLoading } =\n    api.message.getConversations.useQuery(undefined, {\n      enabled: !!session?.user,\n    });\n\n  // Manage reorderable friends list\n  const [reorderableFriends, setReorderableFriends] = useState<typeof friends>(\n    [],\n  );\n\n  // Update reorderable list when friends data changes\n  useMemo(() => {\n    if (friends && friends.length > 0) {\n      const sorted = [...friends].sort(\n        (a, b) => Number(b.online) - Number(a.online),\n      );\n      setReorderableFriends(sorted);\n    }\n  }, [friends]);\n\n  // Hover/open state controls staging and ensures we always open on Friends tab\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<\"friends\" | \"notifications\">(\n    \"friends\",\n  );\n  // Track avatar image load states to show per-avatar skeletons\n  const [avatarLoadedMap, setAvatarLoadedMap] = useState<\n    Record<string, boolean>\n  >({});\n  const markAvatarLoaded = (id: string) =>\n    setAvatarLoadedMap((prev) => (prev[id] ? prev : { ...prev, [id]: true }));\n\n  return (\n    <motion.aside\n      aria-label=\"Friends mini drawer\"\n      className={cn(\n        \"group fixed top-0 right-0 z-40 hidden h-screen overflow-hidden lg:flex\",\n        className,\n      )}\n      initial={false}\n      animate={{ width: COLLAPSED }}\n      whileHover={{ width: EXPANDED }}\n      transition={{ type: \"spring\", stiffness: 260, damping: 30 }}\n      onHoverStart={() => {\n        setIsOpen(true);\n        setActiveTab(\"friends\");\n      }}\n      onHoverEnd={() => setIsOpen(false)}\n    >\n      <div className=\"flex h-full w-full flex-col border-l border-gray-200 bg-white shadow-xl\">\n        {/* Header: use global header height so separators align perfectly */}\n        <div className=\"relative h-[var(--header-height)] overflow-hidden\">\n          <AnimatePresence initial={false} mode=\"popLayout\">\n            {!isOpen ? (\n              <motion.div\n                key=\"collapsed-header\"\n                className=\"absolute inset-0 flex flex-col items-center justify-center gap-2 px-2\"\n                initial={{ opacity: 1 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                transition={{ duration: 0.15 }}\n              >\n                <motion.div\n                  className=\"relative\"\n                  initial={{ opacity: 1 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                >\n                  <Bell className=\"h-6 w-6 text-gray-700\" />\n                  {unread?.count ? (\n                    <Badge className=\"absolute -top-2 -right-2 h-5 min-w-5 rounded-full border-0 bg-red-600 px-1 text-[10px] text-white\">\n                      {unread.count > 99 ? \"99+\" : unread.count}\n                    </Badge>\n                  ) : null}\n                </motion.div>\n                {/* Shared underline with the tabs underline */}\n                <motion.span\n                  layoutId=\"drawer-underline\"\n                  className=\"absolute bottom-0 left-1/2 h-px w-8 -translate-x-1/2 rounded-full\"\n                  style={{ backgroundColor: \"#e5e7eb\" }}\n                />\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"expanded-header\"\n                className=\"absolute inset-0\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n              >\n                <TabsUnderline\n                  value={activeTab}\n                  onValueChange={(v) =>\n                    setActiveTab(v as \"friends\" | \"notifications\")\n                  }\n                  layoutId=\"drawer-underline\"\n                  underlineColor=\"#7c3aed\"\n                  className=\"h-full\"\n                >\n                  <TabsUnderlineList className=\"h-full\">\n                    <TabsUnderlineTrigger value=\"friends\">\n                      Friends\n                    </TabsUnderlineTrigger>\n                    <TabsUnderlineTrigger value=\"notifications\">\n                      Notifications\n                    </TabsUnderlineTrigger>\n                  </TabsUnderlineList>\n                </TabsUnderline>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Content: absolute panels stacked to prevent layout shifts */}\n        <div className=\"relative w-full flex-1 overflow-hidden\">\n          <AnimatePresence initial={false} mode=\"popLayout\">\n            {!isOpen ? (\n              <motion.div\n                key=\"collapsed-content\"\n                className=\"absolute inset-0\"\n                initial={{ opacity: 1 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                transition={{ duration: 0.15 }}\n              >\n                <ScrollArea className=\"h-full w-full [--scrollbar-size:6px]\">\n                  <div className=\"flex flex-col items-center gap-2 pt-2 pb-6\">\n                    {friendsLoading\n                      ? Array.from({ length: 8 }).map((_, idx) => (\n                          <div\n                            key={idx}\n                            className=\"relative flex h-12 w-full items-center justify-center\"\n                          >\n                            <Skeleton className=\"h-8 w-8 rounded-full\" />\n                          </div>\n                        ))\n                      : (reorderableFriends ?? []).map((f) => {\n                          const loaded = avatarLoadedMap[f.id] || !f.image;\n                          return (\n                            <div\n                              key={f.id}\n                              className=\"relative flex h-12 w-full items-center justify-center\"\n                            >\n                              <motion.div\n                                layoutId={`friend-avatar-${f.id}`}\n                                className=\"relative\"\n                              >\n                                <Avatar className=\"h-8 w-8\">\n                                  <AvatarImage\n                                    src={f.image ?? undefined}\n                                    onLoad={() => markAvatarLoaded(f.id)}\n                                    onError={() => markAvatarLoaded(f.id)}\n                                  />\n                                  <AvatarFallback>\n                                    {f.name?.[0] ?? f.username?.[0] ?? \"U\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                {!loaded && (\n                                  <motion.div\n                                    initial={{ opacity: 1 }}\n                                    animate={{ opacity: 1 }}\n                                    exit={{ opacity: 0 }}\n                                    className=\"absolute inset-0\"\n                                  >\n                                    <Skeleton className=\"h-full w-full rounded-full\" />\n                                  </motion.div>\n                                )}\n                                <span\n                                  className={cn(\n                                    \"absolute -right-0.5 -bottom-0.5 h-3 w-3 rounded-full border-2 border-white\",\n                                    f.online ? \"bg-emerald-500\" : \"bg-gray-300\",\n                                  )}\n                                  aria-label={f.online ? \"online\" : \"offline\"}\n                                />\n                              </motion.div>\n                            </div>\n                          );\n                        })}\n                  </div>\n                </ScrollArea>\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"expanded-content\"\n                className=\"absolute inset-0\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n              >\n                <ExpandedContent\n                  friends={reorderableFriends ?? []}\n                  setFriends={setReorderableFriends}\n                  conversations={conversations ?? []}\n                  isOpen={isOpen}\n                  activeTab={activeTab}\n                  friendsLoading={friendsLoading}\n                  conversationsLoading={conversationsLoading}\n                  avatarLoadedMap={avatarLoadedMap}\n                  markAvatarLoaded={markAvatarLoaded}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n    </motion.aside>\n  );\n}\n\ntype Friend = NonNullable<\n  ReturnType<typeof useMemo> extends infer T\n    ? T extends any[]\n      ? T[number]\n      : never\n    : never\n>;\n\nfunction ExpandedContent({\n  friends,\n  setFriends,\n  conversations,\n  isOpen,\n  activeTab,\n  friendsLoading,\n  conversationsLoading,\n  avatarLoadedMap = {},\n  markAvatarLoaded,\n}: {\n  friends: any[];\n  setFriends: (friends: any[]) => void;\n  conversations: any[];\n  isOpen: boolean;\n  activeTab: \"friends\" | \"notifications\";\n  friendsLoading?: boolean;\n  conversationsLoading?: boolean;\n  avatarLoadedMap?: Record<string, boolean>;\n  markAvatarLoaded?: (id: string) => void;\n}) {\n  const router = useRouter();\n  return (\n    <ScrollArea className=\"w-full flex-1\">\n      <div className=\"space-y-2 p-3\">\n        <AnimatePresence initial={false} mode=\"popLayout\">\n          {activeTab === \"friends\" ? (\n            friendsLoading ? (\n              Array.from({ length: 8 }).map((_, idx) => (\n                <div\n                  key={idx}\n                  className=\"flex h-12 items-center gap-3 rounded-lg p-2\"\n                >\n                  <Skeleton className=\"h-8 w-8 rounded-full\" />\n                  <div className=\"min-w-0 flex-1\">\n                    <Skeleton className=\"h-3 w-24\" />\n                    <div className=\"h-1\" />\n                    <Skeleton className=\"h-3 w-40\" />\n                  </div>\n                </div>\n              ))\n            ) : friends.length === 0 ? (\n              <motion.div\n                key=\"empty-f\"\n                className=\"p-2 text-sm text-gray-500\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n              >\n                No friends yet\n              </motion.div>\n            ) : (\n              <Reorder.Group\n                as=\"div\"\n                axis=\"y\"\n                values={friends}\n                onReorder={setFriends}\n                className=\"list-none space-y-2\"\n              >\n                {friends.map((f, idx) => {\n                  const loaded = avatarLoadedMap?.[f.id] || !f.image;\n                  return (\n                    <Reorder.Item\n                      key={f.id}\n                      value={f}\n                      className=\"group\"\n                      initial={{ opacity: 0, y: 6 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -6 }}\n                      transition={{\n                        duration: 0.15,\n                        delay: 0.05 * Math.min(idx, 3),\n                      }}\n                    >\n                      <div\n                        className=\"flex h-12 cursor-pointer items-center gap-3 overflow-hidden rounded-lg p-2 transition-colors hover:bg-gray-50\"\n                        onClick={() => router.push(`/users/${f.username}`)}\n                      >\n                        <motion.div\n                          layoutId={`friend-avatar-${f.id}`}\n                          className=\"pointer-events-none relative\"\n                        >\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage\n                              src={f.image ?? undefined}\n                              onLoad={() => markAvatarLoaded?.(f.id)}\n                              onError={() => markAvatarLoaded?.(f.id)}\n                            />\n                            <AvatarFallback>\n                              {f.name?.[0] ?? f.username?.[0] ?? \"U\"}\n                            </AvatarFallback>\n                          </Avatar>\n                          {!loaded && (\n                            <motion.div\n                              initial={{ opacity: 1 }}\n                              animate={{ opacity: 1 }}\n                              exit={{ opacity: 0 }}\n                              className=\"absolute inset-0\"\n                            >\n                              <Skeleton className=\"h-full w-full rounded-full\" />\n                            </motion.div>\n                          )}\n                          <span\n                            className={cn(\n                              \"absolute -right-0.5 -bottom-0.5 h-3 w-3 rounded-full border-2 border-white\",\n                              f.online ? \"bg-emerald-500\" : \"bg-gray-300\",\n                            )}\n                          />\n                        </motion.div>\n                        <motion.div\n                          className=\"pointer-events-none min-w-0 flex-1\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          transition={{ duration: 0.15, delay: 0.2 }}\n                        >\n                          <div className=\"truncate text-sm leading-4 font-medium\">\n                            {f.name ?? f.username}\n                          </div>\n                          <div className=\"text-xs leading-4 text-gray-500\">\n                            @{f.username}\n                          </div>\n                        </motion.div>\n                        <div\n                          className={cn(\n                            \"pointer-events-none text-xs font-medium\",\n                            f.online ? \"text-emerald-600\" : \"text-gray-400\",\n                          )}\n                        >\n                          {f.online ? \"Online\" : \"Offline\"}\n                        </div>\n                      </div>\n                    </Reorder.Item>\n                  );\n                })}\n              </Reorder.Group>\n            )\n          ) : conversationsLoading ? (\n            Array.from({ length: 6 }).map((_, idx) => (\n              <div\n                key={idx}\n                className=\"flex h-12 items-center gap-3 rounded-lg p-2\"\n              >\n                <Skeleton className=\"h-8 w-8 rounded-full\" />\n                <div className=\"min-w-0 flex-1\">\n                  <Skeleton className=\"h-3 w-24\" />\n                  <div className=\"h-1\" />\n                  <Skeleton className=\"h-3 w-48\" />\n                </div>\n                <Skeleton className=\"ml-auto h-5 w-6\" />\n              </div>\n            ))\n          ) : conversations.length === 0 ? (\n            <motion.div\n              key=\"empty-n\"\n              className=\"p-2 text-sm text-gray-500\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n            >\n              No notifications\n            </motion.div>\n          ) : (\n            conversations.map((c) => (\n              <motion.div\n                key={c.userId}\n                className=\"flex items-center gap-3 rounded-lg p-2 hover:bg-gray-50\"\n                initial={{ opacity: 0, y: 6 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -6 }}\n                transition={{ duration: 0.15 }}\n              >\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src={c.user.image ?? undefined} />\n                  <AvatarFallback>\n                    {c.user.name?.[0] ?? c.user.username?.[0] ?? \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"min-w-0\">\n                  <div className=\"truncate text-sm font-medium\">\n                    {c.user.name ?? c.user.username}\n                  </div>\n                  <div className=\"max-w-[170px] truncate text-xs text-gray-500\">\n                    {c.lastMessage.content}\n                  </div>\n                </div>\n                {c.unreadCount > 0 && (\n                  <Badge className=\"ml-auto\" variant=\"secondary\">\n                    {c.unreadCount}\n                  </Badge>\n                )}\n              </motion.div>\n            ))\n          )}\n        </AnimatePresence>\n      </div>\n    </ScrollArea>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/social/FriendMessagePopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/social/FriendsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/social/MessageCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/social/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/button.tsx","messages":[{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":42,"column":16,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":85,"endColumn":2},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2335,2338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2335,2338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { m } from \"framer-motion\";\nimport { cn } from \"~/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive cursor-pointer\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ntype MotionButtonProps = React.ComponentPropsWithoutRef<typeof m.button>;\n\nconst Button = React.forwardRef<\n  HTMLButtonElement,\n  MotionButtonProps &\n    VariantProps<typeof buttonVariants> & {\n      asChild?: boolean;\n      animation?: boolean;\n    }\n>(\n  (\n    {\n      className,\n      variant,\n      size,\n      asChild = false,\n      animation = true,\n      whileHover = { scale: 1.02 },\n      whileTap = { scale: 0.98 },\n      transition,\n      ...props\n    },\n    ref,\n  ) => {\n    const MotionSlot = m(Slot as unknown as React.ComponentType<any>);\n    const Comp = asChild ? MotionSlot : m.button;\n\n    const motionProps = animation\n      ? {\n          whileHover,\n          whileTap,\n          transition,\n        }\n      : {};\n\n    return (\n      <Comp\n        ref={ref}\n        data-slot=\"button\"\n        className={cn(buttonVariants({ variant, size, className }))}\n        {...motionProps}\n        {...props}\n      />\n    );\n  },\n);\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/coming-soon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/loading-dots.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/number-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/resizable-panels.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'minSize'. Either include it or remove the dependency array.","line":61,"column":5,"nodeType":"ArrayExpression","endLine":61,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [direction, minSize]","fix":{"range":[1915,1926],"text":"[direction, minSize]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useRef, useCallback, type ReactNode } from \"react\";\nimport { cn } from \"~/lib/utils\";\n\ninterface ResizablePanelsProps {\n  children: [ReactNode, ReactNode];\n  direction?: \"horizontal\" | \"vertical\";\n  defaultSize?: number; // 0-100, percentage for first panel\n  minSize?: number; // 0-100, minimum percentage for each panel (defaults to 10)\n  className?: string;\n  panelClassName?: string;\n  resizerClassName?: string;\n}\n\nexport function ResizablePanels({\n  children,\n  direction = \"vertical\",\n  defaultSize = 50,\n  minSize = 10,\n  className,\n  panelClassName,\n  resizerClassName,\n}: ResizablePanelsProps) {\n  const [size, setSize] = useState(defaultSize);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      setIsDragging(true);\n\n      const handleMouseMove = (e: MouseEvent) => {\n        if (!containerRef.current) return;\n\n        const container = containerRef.current;\n        const rect = container.getBoundingClientRect();\n\n        let percentage: number;\n        if (direction === \"horizontal\") {\n          percentage = ((e.clientX - rect.left) / rect.width) * 100;\n        } else {\n          percentage = ((e.clientY - rect.top) / rect.height) * 100;\n        }\n\n        // Clamp between minSize and (100 - minSize) to ensure both panels respect minimum size\n        percentage = Math.max(minSize, Math.min(100 - minSize, percentage));\n        setSize(percentage);\n      };\n\n      const handleMouseUp = () => {\n        setIsDragging(false);\n        document.removeEventListener(\"mousemove\", handleMouseMove);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    },\n    [direction],\n  );\n\n  const flexDirection = direction === \"horizontal\" ? \"flex-row\" : \"flex-col\";\n  const resizerCursor =\n    direction === \"horizontal\" ? \"cursor-col-resize\" : \"cursor-row-resize\";\n  const resizerSize = direction === \"horizontal\" ? \"w-1 h-full\" : \"w-full h-1\";\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\"flex h-full overflow-hidden\", flexDirection, className)}\n    >\n      {/* First Panel */}\n      <div\n        className={cn(\"overflow-hidden\", panelClassName)}\n        style={{\n          [direction === \"horizontal\" ? \"width\" : \"height\"]: `${size}%`,\n        }}\n      >\n        {children[0]}\n      </div>\n\n      {/* Resizer */}\n      <div\n        className={cn(\n          \"bg-border hover:bg-border/80 group shrink-0 transition-colors\",\n          resizerCursor,\n          resizerSize,\n          isDragging && \"bg-border/80\",\n          resizerClassName,\n        )}\n        onMouseDown={handleMouseDown}\n      >\n        <div\n          className={cn(\n            \"flex h-full w-full items-center justify-center\",\n            \"group-hover:bg-accent/50 transition-colors\",\n          )}\n        >\n          {direction === \"horizontal\" ? (\n            <div className=\"flex flex-col gap-1\">\n              <div className=\"bg-foreground/40 h-1 w-0.5 rounded\" />\n              <div className=\"bg-foreground/40 h-1 w-0.5 rounded\" />\n              <div className=\"bg-foreground/40 h-1 w-0.5 rounded\" />\n            </div>\n          ) : (\n            <div className=\"flex gap-1\">\n              <div className=\"bg-foreground/40 h-0.5 w-1 rounded\" />\n              <div className=\"bg-foreground/40 h-0.5 w-1 rounded\" />\n              <div className=\"bg-foreground/40 h-0.5 w-1 rounded\" />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Second Panel */}\n      <div\n        className={cn(\"overflow-hidden\", panelClassName)}\n        style={{\n          [direction === \"horizontal\" ? \"width\" : \"height\"]: `${100 - size}%`,\n        }}\n      >\n        {children[1]}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/text-spinner-loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/toast.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":50,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2090,2093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2090,2093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":49,"nodeType":"Identifier","messageId":"anyAssignment","endLine":53,"endColumn":61}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport { m } from \"framer-motion\";\n\nimport { cn } from \"~/lib/utils\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse gap-2 p-4 sm:top-auto sm:right-0 sm:bottom-0 sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof m.li>,\n  React.ComponentPropsWithoutRef<typeof m.li> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  // Filter out Radix-specific props that shouldn't be passed to DOM elements\n  const { onOpenChange, ...motionProps } = props as any;\n\n  return (\n    <ToastPrimitives.Root asChild onOpenChange={onOpenChange}>\n      <m.li\n        ref={ref}\n        initial={{ x: \"100%\", opacity: 0 }}\n        animate={{\n          x: 0,\n          opacity: 1,\n          transition: { type: \"spring\", damping: 20, stiffness: 300 },\n        }}\n        exit={{ x: \"100%\", opacity: 0, transition: { duration: 0.2 } }}\n        drag=\"x\"\n        dragConstraints={{ left: 0, right: 300 }}\n        dragElastic={0.2}\n        className={cn(toastVariants({ variant }), className)}\n        {...motionProps}\n      />\n    </ToastPrimitives.Root>\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"ring-offset-background hover:bg-secondary focus:ring-ring group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:pointer-events-none disabled:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"text-foreground/50 hover:text-foreground absolute top-2 right-2 rounded-md p-1 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:ring-2 focus:outline-none group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/ui/use-toast.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":14,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":14,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport type { ToastActionElement, ToastProps } from \"~/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/user-menu.client.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'unreadCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { signOut } from \"next-auth/react\";\nimport { useSession } from \"next-auth/react\";\nimport Link from \"next/link\";\nimport { type Session } from \"next-auth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"~/components/ui/avatar\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"~/components/ui/dropdown-menu\";\nimport { api } from \"~/trpc/react\";\nimport { User, MessageSquare, Users, Settings, LogOut } from \"lucide-react\";\n\ninterface UserMenuClientProps {\n  initialSession: Session | null;\n}\n\nexport function UserMenuClient({ initialSession }: UserMenuClientProps) {\n  const { data: liveSession } = useSession();\n  const session = liveSession ?? initialSession ?? undefined;\n  const { data: unreadCount } = api.message.getUnreadCount.useQuery(undefined, {\n    enabled: !!session?.user,\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const user = session?.user;\n  const initials =\n    user?.name\n      ?.split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase() ??\n    user?.username?.[0]?.toUpperCase() ??\n    \"U\";\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-10 w-10 rounded-full\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage\n                src={user?.image ?? undefined}\n                alt={user?.name ?? \"\"}\n              />\n              <AvatarFallback>{initials}</AvatarFallback>\n            </Avatar>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n          <DropdownMenuLabel className=\"font-normal\">\n            <div className=\"flex flex-col space-y-1\">\n              <p className=\"text-sm leading-none font-medium\">\n                {user?.name ?? user?.username}\n              </p>\n              <p className=\"text-muted-foreground text-xs leading-none\">\n                {user?.username}\n              </p>\n            </div>\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem asChild>\n            <Link href=\"/profile\">\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/friends\">\n              <Users className=\"mr-2 h-4 w-4\" />\n              <span>Friends</span>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/messages\">\n              <MessageSquare className=\"mr-2 h-4 w-4\" />\n              <span>Messages</span>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/settings\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem\n            onClick={() => signOut({ callbackUrl: \"/\" })}\n            className=\"text-red-600\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            <span>Sign Out</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/components/user-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/contexts/settings-context.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":57,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":62,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":61,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reducedMotion on an `any` value.","line":61,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":46}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from \"react\";\n\nexport interface GameSettings {\n  soundEffectsEnabled: boolean;\n  sfxVolume: number; // 0-100\n  reducedMotion: boolean;\n}\n\ninterface SettingsContextType {\n  settings: GameSettings;\n  updateSettings: (partial: Partial<GameSettings>) => void;\n  resetSettings: () => void;\n}\n\nconst defaultSettings: GameSettings = {\n  soundEffectsEnabled: true,\n  sfxVolume: 50,\n  reducedMotion: false,\n};\n\nconst STORAGE_KEY = \"checkers-game-settings\";\n\nconst SettingsContext = createContext<SettingsContextType | undefined>(\n  undefined,\n);\n\nexport function useSettings(): SettingsContextType {\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error(\"useSettings must be used within a SettingsProvider\");\n  }\n  return context;\n}\n\nfunction getInitialSettings(): GameSettings {\n  // Check for browser's prefers-reduced-motion setting\n  const prefersReducedMotion =\n    typeof window !== \"undefined\"\n      ? window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches\n      : false;\n\n  // Try to load from localStorage\n  if (typeof window !== \"undefined\") {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        // Merge with defaults to handle missing properties in stored settings\n        return {\n          ...defaultSettings,\n          ...parsed,\n          // Respect browser preference for reduced motion if not explicitly set\n          reducedMotion: parsed.reducedMotion ?? prefersReducedMotion,\n        };\n      }\n    } catch (error) {\n      console.warn(\"Failed to load settings from localStorage:\", error);\n    }\n  }\n\n  // Return defaults with browser preference\n  return {\n    ...defaultSettings,\n    reducedMotion: prefersReducedMotion,\n  };\n}\n\nexport function SettingsProvider({ children }: { children: React.ReactNode }) {\n  const [settings, setSettings] = useState<GameSettings>(getInitialSettings);\n\n  // Save settings to localStorage whenever they change\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n\n      // Dispatch custom event for reduced motion changes\n      // This allows components to react immediately to changes\n      window.dispatchEvent(\n        new CustomEvent(\"reducedMotionChanged\", {\n          detail: settings.reducedMotion,\n        }),\n      );\n    } catch (error) {\n      console.warn(\"Failed to save settings to localStorage:\", error);\n    }\n  }, [settings]);\n\n  // Listen for browser preference changes\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const mediaQuery = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      // Only update if user hasn't explicitly set a preference\n      setSettings((prev) => {\n        // Check if current setting matches the previous browser preference\n        // If so, update to new browser preference\n        const wasBrowserDefault = prev.reducedMotion === !e.matches;\n        if (wasBrowserDefault) {\n          return { ...prev, reducedMotion: e.matches };\n        }\n        return prev;\n      });\n    };\n\n    mediaQuery.addEventListener(\"change\", handleChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\n  }, []);\n\n  const updateSettings = useCallback((partial: Partial<GameSettings>) => {\n    setSettings((prev) => ({ ...prev, ...partial }));\n  }, []);\n\n  const resetSettings = useCallback(() => {\n    const prefersReducedMotion =\n      typeof window !== \"undefined\"\n        ? window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches\n        : false;\n\n    setSettings({\n      ...defaultSettings,\n      reducedMotion: prefersReducedMotion,\n    });\n  }, []);\n\n  const contextValue: SettingsContextType = {\n    settings,\n    updateSettings,\n    resetSettings,\n  };\n\n  return (\n    <SettingsContext.Provider value={contextValue}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/use-toast.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":17,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":17,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"~/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useAudioWarnings.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":115,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":115,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [activePlayer] resolves to an `error` typed value.","line":120,"column":49,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":120,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [activePlayer] resolves to an `error` typed value.","line":122,"column":33,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":122,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [activePlayer] resolves to an `error` typed value.","line":124,"column":32,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":124,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [activePlayer] resolves to an `error` typed value.","line":130,"column":36,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":130,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [activePlayer] resolves to an `error` typed value.","line":132,"column":35,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":132,"endColumn":47}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useCallback } from \"react\";\nimport { type TimeState, type PieceColor } from \"~/lib/game/time-control-types\";\n\ninterface UseAudioWarningsOptions {\n  /** Whether audio warnings are enabled */\n  enabled: boolean;\n  /** Time state to monitor */\n  timeState: TimeState;\n  /** Volume level (0-1) */\n  volume?: number;\n  /** Custom warning thresholds in milliseconds */\n  thresholds?: number[];\n}\n\ninterface UseAudioWarningsReturn {\n  /** Play a warning sound manually */\n  playWarning: (type: \"low\" | \"critical\" | \"urgent\" | \"tick\") => void;\n  /** Whether audio is supported */\n  isSupported: boolean;\n}\n\nconst WARNING_SOUNDS = {\n  low: { frequency: 800, duration: 200 }, // Gentle beep\n  critical: { frequency: 1000, duration: 300 }, // More urgent\n  urgent: { frequency: 1200, duration: 400 }, // Very urgent\n  tick: { frequency: 600, duration: 100 }, // Quick tick for final seconds\n} as const;\n\n// Default thresholds for audio warnings (in milliseconds)\nconst DEFAULT_THRESHOLDS = [10000, 5000, 3000, 2000, 1000]; // 10s, 5s, 3s, 2s, 1s\n\nexport function useAudioWarnings({\n  enabled,\n  timeState,\n  volume = 0.3,\n  thresholds = DEFAULT_THRESHOLDS,\n}: UseAudioWarningsOptions): UseAudioWarningsReturn {\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const lastWarningTimeRef = useRef<Record<PieceColor, number>>({\n    red: 0,\n    black: 0,\n  });\n  const playedWarningsRef = useRef<Record<PieceColor, Set<number>>>({\n    red: new Set(),\n    black: new Set(),\n  });\n\n  // Initialize audio context\n  const initializeAudio = useCallback(() => {\n    if (audioContextRef.current || !enabled) return;\n\n    try {\n      audioContextRef.current = new (window.AudioContext ||\n        (window as { webkitAudioContext?: typeof AudioContext })\n          .webkitAudioContext)();\n    } catch (error) {\n      console.warn(\"Audio context not supported:\", error);\n    }\n  }, [enabled]);\n\n  // Play a synthesized beep sound\n  const playBeep = useCallback(\n    (frequency: number, duration: number) => {\n      if (!audioContextRef.current || !enabled) return;\n\n      try {\n        const context = audioContextRef.current;\n\n        // Create oscillator and gain nodes\n        const oscillator = context.createOscillator();\n        const gainNode = context.createGain();\n\n        // Configure oscillator\n        oscillator.frequency.setValueAtTime(frequency, context.currentTime);\n        oscillator.type = \"sine\";\n\n        // Configure gain (volume with fade out)\n        gainNode.gain.setValueAtTime(volume, context.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(\n          0.01,\n          context.currentTime + duration / 1000,\n        );\n\n        // Connect nodes\n        oscillator.connect(gainNode);\n        gainNode.connect(context.destination);\n\n        // Play sound\n        oscillator.start(context.currentTime);\n        oscillator.stop(context.currentTime + duration / 1000);\n      } catch (error) {\n        console.warn(\"Failed to play audio warning:\", error);\n      }\n    },\n    [enabled, volume],\n  );\n\n  // Play warning sound\n  const playWarning = useCallback(\n    (type: keyof typeof WARNING_SOUNDS) => {\n      const sound = WARNING_SOUNDS[type];\n      playBeep(sound.frequency, sound.duration);\n    },\n    [playBeep],\n  );\n\n  // Check if we should play a warning for the current time\n  const checkAndPlayWarnings = useCallback(() => {\n    if (!enabled || !timeState.activePlayer || timeState.isPaused) {\n      return;\n    }\n\n    const activePlayer = timeState.activePlayer;\n    const remainingTime =\n      activePlayer === \"red\" ? timeState.redTime : timeState.blackTime;\n\n    // Reset warnings if time increased (e.g., after increment)\n    const lastTime = lastWarningTimeRef.current[activePlayer];\n    if (remainingTime > lastTime) {\n      playedWarningsRef.current[activePlayer].clear();\n    }\n    lastWarningTimeRef.current[activePlayer] = remainingTime;\n\n    // Check each threshold\n    for (const threshold of thresholds) {\n      if (\n        remainingTime <= threshold &&\n        !playedWarningsRef.current[activePlayer].has(threshold)\n      ) {\n        playedWarningsRef.current[activePlayer].add(threshold);\n\n        // Determine warning type based on threshold\n        if (threshold <= 1000) {\n          playWarning(\"urgent\");\n        } else if (threshold <= 3000) {\n          playWarning(\"critical\");\n        } else if (threshold <= 5000) {\n          playWarning(\"critical\");\n        } else {\n          playWarning(\"low\");\n        }\n\n        // For final countdown, play tick sounds\n        if (threshold <= 5000 && threshold > 1000) {\n          // Play additional tick for dramatic effect\n          setTimeout(() => playWarning(\"tick\"), 100);\n        }\n\n        break; // Only play one warning per check\n      }\n    }\n  }, [enabled, timeState, thresholds, playWarning]);\n\n  // Initialize audio on user interaction (required by browsers)\n  useEffect(() => {\n    if (!enabled) return;\n\n    const handleUserInteraction = () => {\n      initializeAudio();\n      document.removeEventListener(\"click\", handleUserInteraction);\n      document.removeEventListener(\"keydown\", handleUserInteraction);\n    };\n\n    document.addEventListener(\"click\", handleUserInteraction);\n    document.addEventListener(\"keydown\", handleUserInteraction);\n\n    return () => {\n      document.removeEventListener(\"click\", handleUserInteraction);\n      document.removeEventListener(\"keydown\", handleUserInteraction);\n    };\n  }, [enabled, initializeAudio]);\n\n  // Monitor time changes and play warnings\n  useEffect(() => {\n    checkAndPlayWarnings();\n  }, [\n    timeState.redTime,\n    timeState.blackTime,\n    timeState.activePlayer,\n    checkAndPlayWarnings,\n  ]);\n\n  // Reset warnings when game resets\n  useEffect(() => {\n    if (timeState.redTime > 30000 && timeState.blackTime > 30000) {\n      // Game likely reset, clear warning state\n      playedWarningsRef.current.red.clear();\n      playedWarningsRef.current.black.clear();\n      lastWarningTimeRef.current = { red: 0, black: 0 };\n    }\n  }, [timeState.redTime, timeState.blackTime]);\n\n  // Cleanup audio context on unmount\n  useEffect(() => {\n    return () => {\n      if (\n        audioContextRef.current &&\n        audioContextRef.current.state !== \"closed\"\n      ) {\n        void audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  const isSupported =\n    typeof window !== \"undefined\" &&\n    (window.AudioContext ||\n      (window as { webkitAudioContext?: typeof AudioContext })\n        .webkitAudioContext);\n\n  return {\n    playWarning,\n    isSupported,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useGameSounds.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'audioRefs.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'audioRefs.current' to a variable inside the effect, and use that variable in the cleanup function.","line":58,"column":21,"nodeType":"Identifier","endLine":58,"endColumn":28},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'SOUND_FILES'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [SOUND_FILES, volume]","fix":{"range":[1741,1749],"text":"[SOUND_FILES, volume]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'SOUND_FILES'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [SOUND_FILES, volume]","fix":{"range":[1963,1971],"text":"[SOUND_FILES, volume]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseGameSoundsOptions {\n  enabled?: boolean;\n  volume?: number;\n}\n\nexport function useGameSounds(options: UseGameSoundsOptions = {}) {\n  const { enabled = true, volume = 0.5 } = options;\n\n  type SoundKey = \"capture\" | \"startGame\" | \"move\" | \"king\" | \"complete\";\n  const SOUND_FILES: Record<SoundKey, string> = {\n    capture: \"capture\",\n    startGame: \"start-game\",\n    move: \"move\",\n    king: \"king\",\n    complete: \"complete\",\n  };\n\n  // Create audio elements with a single map of refs\n  const audioRefs = useRef<Record<SoundKey, HTMLAudioElement | null>>({\n    capture: null,\n    startGame: null,\n    move: null,\n    king: null,\n    complete: null,\n  });\n  const isInitializedRef = useRef(false);\n\n  // Initialize audio elements on mount\n  useEffect(() => {\n    if (!isInitializedRef.current && typeof window !== \"undefined\") {\n      const testAudio = new Audio();\n      const canPlayM4A =\n        testAudio.canPlayType(\"audio/mp4\") ||\n        testAudio.canPlayType(\"audio/x-m4a\");\n\n      (Object.keys(SOUND_FILES) as SoundKey[]).forEach((key) => {\n        const base = SOUND_FILES[key];\n        const audio = new Audio();\n        audio.src = canPlayM4A ? `/${base}.m4a` : `/${base}.mp3`;\n        audio.volume = volume;\n        audio.preload = \"auto\";\n        audioRefs.current[key] = audio;\n      });\n\n      isInitializedRef.current = true;\n    }\n\n    // Cleanup on unmount\n    return () => {\n      (Object.keys(SOUND_FILES) as SoundKey[]).forEach((key) => {\n        const ref = audioRefs.current[key];\n        if (ref) {\n          ref.pause();\n          audioRefs.current[key] = null;\n        }\n      });\n      isInitializedRef.current = false;\n    };\n  }, [volume]);\n\n  // Update volume when it changes\n  useEffect(() => {\n    (Object.keys(SOUND_FILES) as SoundKey[]).forEach((key) => {\n      const ref = audioRefs.current[key];\n      if (ref) ref.volume = volume;\n    });\n  }, [volume]);\n\n  const play = useCallback(\n    (key: SoundKey) => {\n      if (!enabled) return;\n      const audio = audioRefs.current[key];\n      if (!audio) return;\n      try {\n        audio.currentTime = 0;\n        const playPromise = audio.play();\n        if (playPromise !== undefined) {\n          playPromise.catch((error) => {\n            console.debug(\"Audio play prevented:\", error);\n          });\n        }\n      } catch (error) {\n        console.debug(\"Error playing sound:\", error);\n      }\n    },\n    [enabled],\n  );\n\n  const playCapture = useCallback(() => play(\"capture\"), [play]);\n  const playStartGame = useCallback(() => play(\"startGame\"), [play]);\n  const playMove = useCallback(() => play(\"move\"), [play]);\n  const playKing = useCallback(() => play(\"king\"), [play]);\n  const playComplete = useCallback(() => play(\"complete\"), [play]);\n\n  return {\n    playCapture,\n    playStartGame,\n    playMove,\n    playKing,\n    playComplete,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useGameStorage.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":223,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":251,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":278,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  type GameStorageAdapter,\n  type PersistedGameState,\n  type StorageType,\n  createStorageAdapter,\n  DEFAULT_GAME_ID,\n  STORAGE_VERSION,\n} from \"~/lib/storage\";\nimport { type Board, type PieceColor, type Move } from \"~/lib/game/logic\";\nimport { type TimeControl, type TimeState } from \"~/lib/game/time-control-types\";\n\ninterface UseGameStorageProps {\n  storageType?: StorageType;\n  gameId?: string;\n  autoSave?: boolean;\n  autoSaveInterval?: number;\n}\n\ninterface GameStorageState {\n  loading: boolean;\n  saving: boolean;\n  error: string | null;\n  hasSavedGame: boolean;\n  savedGameSummary: {\n    moveCount: number;\n    lastSaved: string;\n    gameMode: \"ai\" | \"local\" | \"online\";\n  } | null;\n}\n\ninterface GameStorageActions {\n  saveGame: (state: GameState) => Promise<void>;\n  loadGame: () => Promise<GameState | null>;\n  deleteGame: () => Promise<void>;\n  clearAllGames: () => Promise<void>;\n  checkForSavedGame: () => Promise<boolean>;\n}\n\ninterface GameState {\n  board: Board;\n  currentPlayer: PieceColor;\n  moveCount: number;\n  moveHistory: Move[];\n  gameMode: \"ai\" | \"local\" | \"online\";\n  gameStartTime: Date;\n  winner: PieceColor | \"draw\" | null;\n  timeControl?: TimeControl | null;\n  timeState?: TimeState | null;\n  audioWarningsEnabled?: boolean;\n  soundEffectsEnabled?: boolean;\n}\n\nexport function useGameStorage({\n  storageType = \"local\",\n  gameId = DEFAULT_GAME_ID,\n  autoSave = true,\n  autoSaveInterval = 5000,\n}: UseGameStorageProps = {}): [GameStorageState, GameStorageActions] {\n  const [state, setState] = useState<GameStorageState>({\n    loading: false,\n    saving: false,\n    error: null,\n    hasSavedGame: false,\n    savedGameSummary: null,\n  });\n\n  const storageRef = useRef<GameStorageAdapter | null>(null);\n  const autoSaveTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize storage adapter\n  useEffect(() => {\n    storageRef.current ??= createStorageAdapter({\n      type: storageType,\n      autoSaveInterval,\n    });\n\n    // Check for saved game on mount\n    void checkForSavedGame();\n\n    return () => {\n      // Cleanup\n      if (autoSaveTimerRef.current) {\n        clearTimeout(autoSaveTimerRef.current);\n      }\n      if (storageRef.current && \"destroy\" in storageRef.current) {\n        (storageRef.current as { destroy: () => void }).destroy();\n      }\n    };\n  }, [storageType, autoSaveInterval, checkForSavedGame]);\n\n  const checkForSavedGame = useCallback(async (): Promise<boolean> => {\n    if (!storageRef.current) return false;\n\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      const result = await storageRef.current.loadGame(gameId);\n\n      if (result.success && result.data) {\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          hasSavedGame: true,\n          savedGameSummary: {\n            moveCount: result.data!.moveCount,\n            lastSaved: result.data!.lastSaved,\n            gameMode: result.data!.gameMode,\n          },\n        }));\n        return true;\n      } else {\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          hasSavedGame: false,\n          savedGameSummary: null,\n        }));\n        return false;\n      }\n    } catch (_error) {\n      setState((prev) => ({\n        ...prev,\n        loading: false,\n        error: \"Failed to check for saved game\",\n      }));\n      return false;\n    }\n  }, [gameId]);\n\n  const saveGame = useCallback(\n    async (state: GameState): Promise<void> => {\n      if (!storageRef.current) return;\n\n      const persistedState: PersistedGameState = {\n        id: gameId,\n        board: state.board,\n        currentPlayer: state.currentPlayer,\n        moveCount: state.moveCount,\n        moveHistory: state.moveHistory,\n        gameMode: state.gameMode,\n        gameStartTime: state.gameStartTime.toISOString(),\n        lastSaved: new Date().toISOString(),\n        winner: state.winner,\n        version: STORAGE_VERSION,\n      };\n\n      try {\n        setState((prev) => ({ ...prev, saving: true, error: null }));\n\n        if (autoSave && autoSaveTimerRef.current) {\n          clearTimeout(autoSaveTimerRef.current);\n        }\n\n        const result = await storageRef.current.saveGame(persistedState);\n\n        if (result.success) {\n          setState((prev) => ({\n            ...prev,\n            saving: false,\n            hasSavedGame: true,\n            savedGameSummary: {\n              moveCount: state.moveCount,\n              lastSaved: new Date().toISOString(),\n              gameMode: state.gameMode,\n            },\n          }));\n\n          // Schedule auto-save if enabled\n          if (autoSave && !state.winner) {\n            autoSaveTimerRef.current = setTimeout(() => {\n              void storageRef.current?.autoSave(persistedState);\n            }, autoSaveInterval);\n          }\n        } else {\n          throw new Error(result.error.message);\n        }\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          saving: false,\n          error: error instanceof Error ? error.message : \"Failed to save game\",\n        }));\n      }\n    },\n    [gameId, autoSave, autoSaveInterval],\n  );\n\n  const loadGame = useCallback(async (): Promise<GameState | null> => {\n    if (!storageRef.current) return null;\n\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      const result = await storageRef.current.loadGame(gameId);\n\n      if (result.success && result.data) {\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          hasSavedGame: true,\n        }));\n\n        return {\n          board: result.data.board,\n          currentPlayer: result.data.currentPlayer,\n          moveCount: result.data.moveCount,\n          moveHistory: result.data.moveHistory,\n          gameMode: result.data.gameMode,\n          gameStartTime: new Date(result.data.gameStartTime),\n          winner: result.data.winner,\n        };\n      } else {\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          hasSavedGame: false,\n        }));\n        return null;\n      }\n    } catch (_error) {\n      setState((prev) => ({\n        ...prev,\n        loading: false,\n        error: \"Failed to load game\",\n      }));\n      return null;\n    }\n  }, [gameId]);\n\n  const deleteGame = useCallback(async (): Promise<void> => {\n    if (!storageRef.current) return;\n\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      const result = await storageRef.current.deleteGame(gameId);\n\n      if (result.success) {\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          hasSavedGame: false,\n          savedGameSummary: null,\n        }));\n      } else {\n        throw new Error(result.error.message);\n      }\n    } catch (_error) {\n      setState((prev) => ({\n        ...prev,\n        loading: false,\n        error: \"Failed to delete game\",\n      }));\n    }\n  }, [gameId]);\n\n  const clearAllGames = useCallback(async (): Promise<void> => {\n    if (!storageRef.current) return;\n\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      const result = await storageRef.current.clearAll();\n\n      if (result.success) {\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          hasSavedGame: false,\n          savedGameSummary: null,\n        }));\n      } else {\n        throw new Error(result.error.message);\n      }\n    } catch (_error) {\n      setState((prev) => ({\n        ...prev,\n        loading: false,\n        error: \"Failed to clear games\",\n      }));\n    }\n  }, []);\n\n  return [\n    state,\n    {\n      saveGame,\n      loadGame,\n      deleteGame,\n      clearAllGames,\n      checkForSavedGame,\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useGameSync.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":62,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":62,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":62,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .makeMove on an `error` typed value.","line":62,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":113,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":113,"column":35,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":113,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":116,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":116,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Move`.","line":117,"column":30,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":117,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .move on an `any` value.","line":117,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameState on an `any` value.","line":117,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .optimisticMoveId on an `any` value.","line":120,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":121,"column":58,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":121,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .optimisticMoveId on an `any` value.","line":121,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":79},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":150,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":150,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4384,4384],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4384,4384],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'processOfflineQueue' and 'state.offlineMoveQueue.length'. Either include them or remove the dependency array.","line":162,"column":6,"nodeType":"ArrayExpression","endLine":162,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [gameId, enabled, onConnectionStatusChange, state.offlineMoveQueue.length, processOfflineQueue, onOpponentMove]","fix":{"range":[4694,4753],"text":"[gameId, enabled, onConnectionStatusChange, state.offlineMoveQueue.length, processOfflineQueue, onOpponentMove]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":221,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":225,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":221,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":221,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mutateAsync on an `error` typed value.","line":221,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":227,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":227,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `error` typed value.","line":227,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":260,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":260,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mutateAsync on an `error` typed value.","line":260,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":260,"endColumn":38},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":278,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":278,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7759,7759],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7759,7759],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'connect' and 'disconnect'. Either include them or remove the dependency array.","line":284,"column":6,"nodeType":"ArrayExpression","endLine":284,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [gameId, enabled, connect, disconnect]","fix":{"range":[7828,7845],"text":"[gameId, enabled, connect, disconnect]"}}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":290,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":290,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7998,7998],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7998,7998],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback, useRef } from \"react\";\nimport { OptimisticUpdateManager } from \"~/lib/optimistic-updates\";\nimport { api } from \"~/trpc/react\";\nimport type { Move, Board, PieceColor } from \"~/lib/game/logic\";\n\nexport interface GameSyncState {\n  isConnected: boolean;\n  connectionError: string | null;\n  isReconnecting: boolean;\n  hasPendingUpdates: boolean;\n  offlineMoveQueue: Move[];\n}\n\nexport interface GameSyncActions {\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  sendMove: (\n    move: Move,\n    currentBoard?: Board,\n    currentPlayer?: PieceColor,\n    moveCount?: number,\n  ) => Promise<boolean>;\n  queueOfflineMove: (move: Move) => void;\n  processOfflineQueue: () => Promise<void>;\n}\n\nexport interface UseGameSyncOptions {\n  gameId?: string;\n  enabled?: boolean;\n  onOpponentMove?: (move: Move, newGameState: unknown) => void;\n  onConnectionStatusChange?: (connected: boolean) => void;\n}\n\n/**\n * Simplified game sync hook for real-time opponent moves\n * Focuses on game synchronization without multi-tab complexity\n */\nexport function useGameSync(\n  options: UseGameSyncOptions,\n): [GameSyncState, GameSyncActions] {\n  const {\n    gameId,\n    enabled = true,\n    onOpponentMove,\n    onConnectionStatusChange,\n  } = options;\n\n  const [state, setState] = useState<GameSyncState>({\n    isConnected: false,\n    connectionError: null,\n    isReconnecting: false,\n    hasPendingUpdates: false,\n    offlineMoveQueue: [],\n  });\n\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const optimisticManagerRef = useRef<OptimisticUpdateManager | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n\n  // tRPC mutations\n  const makeMoveApi = api.simplifiedGame.makeMove.useMutation();\n\n  // Initialize optimistic update manager\n  useEffect(() => {\n    if (!gameId || !enabled) return;\n\n    optimisticManagerRef.current = new OptimisticUpdateManager();\n\n    const unsubscribe = optimisticManagerRef.current.subscribe(\n      (optimisticState) => {\n        setState((prev) => ({\n          ...prev,\n          hasPendingUpdates: optimisticState.pendingCount > 0,\n        }));\n      },\n    );\n\n    return () => {\n      unsubscribe();\n      optimisticManagerRef.current = null;\n    };\n  }, [gameId, enabled]);\n\n  const connect = useCallback(async () => {\n    if (!gameId || !enabled || eventSourceRef.current) return;\n\n    try {\n      const eventSource = new EventSource(\n        `/api/game/${gameId}/simplified-stream`,\n      );\n      eventSourceRef.current = eventSource;\n\n      eventSource.onopen = () => {\n        console.log(\"Game sync connected\");\n        setState((prev) => ({\n          ...prev,\n          isConnected: true,\n          connectionError: null,\n          isReconnecting: false,\n        }));\n        reconnectAttemptsRef.current = 0;\n        onConnectionStatusChange?.(true);\n\n        // Process any offline moves\n        if (state.offlineMoveQueue.length > 0) {\n          void processOfflineQueue();\n        }\n      };\n\n      eventSource.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n\n          // Handle opponent moves\n          if (data.type === \"OPPONENT_MOVE\") {\n            onOpponentMove?.(data.move, data.gameState);\n\n            // Remove from optimistic updates if it was our move confirmed\n            if (data.optimisticMoveId && optimisticManagerRef.current) {\n              optimisticManagerRef.current.confirmUpdate(data.optimisticMoveId);\n            }\n          }\n        } catch (error) {\n          console.error(\"Failed to parse SSE message:\", error);\n        }\n      };\n\n      eventSource.onerror = () => {\n        console.error(\"Game sync connection error\");\n        eventSourceRef.current = null;\n        setState((prev) => ({\n          ...prev,\n          isConnected: false,\n          connectionError: \"Connection lost\",\n        }));\n        onConnectionStatusChange?.(false);\n\n        // Attempt reconnection with exponential backoff\n        if (reconnectAttemptsRef.current < 10) {\n          const delay = Math.min(\n            1000 * Math.pow(2, reconnectAttemptsRef.current),\n            30000,\n          );\n          reconnectAttemptsRef.current++;\n\n          setState((prev) => ({ ...prev, isReconnecting: true }));\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, delay);\n        }\n      };\n    } catch (error) {\n      console.error(\"Failed to establish game sync connection:\", error);\n      setState((prev) => ({\n        ...prev,\n        connectionError:\n          error instanceof Error ? error.message : \"Connection failed\",\n      }));\n    }\n  }, [gameId, enabled, onOpponentMove, onConnectionStatusChange]);\n\n  const disconnect = useCallback(() => {\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      isReconnecting: false,\n    }));\n\n    onConnectionStatusChange?.(false);\n  }, [onConnectionStatusChange]);\n\n  const sendMove = useCallback(\n    async (\n      move: Move,\n      currentBoard?: Board,\n      currentPlayer?: PieceColor,\n      moveCount?: number,\n    ): Promise<boolean> => {\n      if (!gameId) return false;\n\n      // If offline, queue the move\n      if (!state.isConnected) {\n        setState((prev) => ({\n          ...prev,\n          offlineMoveQueue: [...prev.offlineMoveQueue, move],\n        }));\n        return true; // Optimistically return success\n      }\n\n      try {\n        // Create optimistic update\n        let optimisticId: string | undefined;\n        if (\n          optimisticManagerRef.current &&\n          currentBoard &&\n          currentPlayer !== undefined &&\n          moveCount !== undefined\n        ) {\n          const update = optimisticManagerRef.current.createUpdate(\n            move,\n            currentBoard,\n            currentPlayer,\n            moveCount,\n          );\n          optimisticId = update.id;\n        }\n\n        // Send move to server\n        const result = await makeMoveApi.mutateAsync({\n          gameId,\n          move,\n          optimisticMoveId: optimisticId,\n        });\n\n        return result.success;\n      } catch (error) {\n        console.error(\"Failed to send move:\", error);\n\n        // Queue for retry when connection restored\n        setState((prev) => ({\n          ...prev,\n          offlineMoveQueue: [...prev.offlineMoveQueue, move],\n        }));\n\n        return false;\n      }\n    },\n    [gameId, state.isConnected, makeMoveApi],\n  );\n\n  const queueOfflineMove = useCallback((move: Move) => {\n    setState((prev) => ({\n      ...prev,\n      offlineMoveQueue: [...prev.offlineMoveQueue, move],\n    }));\n  }, []);\n\n  const processOfflineQueue = useCallback(async () => {\n    if (state.offlineMoveQueue.length === 0) return;\n\n    console.log(`Processing ${state.offlineMoveQueue.length} offline moves`);\n\n    const moves = [...state.offlineMoveQueue];\n    setState((prev) => ({ ...prev, offlineMoveQueue: [] }));\n\n    for (const move of moves) {\n      try {\n        await makeMoveApi.mutateAsync({\n          gameId: gameId!,\n          move,\n        });\n      } catch (error) {\n        console.error(\"Failed to process offline move:\", error);\n        // Re-queue failed moves\n        setState((prev) => ({\n          ...prev,\n          offlineMoveQueue: [...prev.offlineMoveQueue, move],\n        }));\n      }\n    }\n  }, [state.offlineMoveQueue, gameId, makeMoveApi]);\n\n  // Auto-connect when gameId is available\n  useEffect(() => {\n    if (gameId && enabled) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [gameId, enabled]);\n\n  // Monitor online/offline status\n  useEffect(() => {\n    const handleOnline = () => {\n      if (gameId && enabled && !state.isConnected) {\n        connect();\n      }\n    };\n\n    const handleOffline = () => {\n      setState((prev) => ({\n        ...prev,\n        connectionError: \"No internet connection\",\n      }));\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, [gameId, enabled, state.isConnected, connect]);\n\n  const actions: GameSyncActions = {\n    connect,\n    disconnect,\n    sendMove,\n    queueOfflineMove,\n    processOfflineQueue,\n  };\n\n  return [state, actions];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useMultiTabSync.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'onConflictDetected' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":58,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":155,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":155,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4548,4550],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'syncManagerRef.current'. Either exclude it or remove the dependency array. Mutable values like 'syncManagerRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":192,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [onGameStateUpdate, onMoveApplied, onTabStatusUpdate, onConnectionStatusChange]","fix":{"range":[5608,5736],"text":"[onGameStateUpdate, onMoveApplied, onTabStatusUpdate, onConnectionStatusChange]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7724,7727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7724,7727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":286,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":286,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":286,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":352,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":352,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10150,10152],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useCallback, useRef } from \"react\";\nimport { MultiTabSyncManager } from \"~/lib/multi-tab/sync-manager\";\nimport { OptimisticUpdateManager } from \"~/lib/optimistic-updates\";\nimport { api } from \"~/trpc/react\";\nimport type {\n  SyncEvent,\n  InitialStatePayload,\n  MoveAppliedPayload,\n  TabStatusUpdatePayload,\n  ConnectionStatus,\n} from \"~/lib/multi-tab/types\";\nimport type { Move, Board, PieceColor } from \"~/lib/game/logic\";\n\nexport interface MultiTabSyncState {\n  isConnected: boolean;\n  isActiveTab: boolean;\n  totalTabs: number;\n  connectionError: string | null;\n  isReconnecting: boolean;\n  hasPendingUpdates: boolean;\n  syncManager: MultiTabSyncManager | null;\n  offlineMoveCount: number;\n  lastConnected: Date | null;\n}\n\nexport interface MultiTabSyncActions {\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  makeOptimisticMove: (\n    move: Move,\n    currentBoard?: Board,\n    currentPlayer?: PieceColor,\n    moveCount?: number,\n  ) => Promise<boolean>;\n  requestTabActivation: () => Promise<boolean>;\n  sendHeartbeat: () => Promise<void>;\n  queueOfflineMove: (move: Move) => void;\n}\n\nexport interface UseMultiTabSyncOptions {\n  gameId?: string;\n  onGameStateUpdate?: (state: InitialStatePayload) => void;\n  onMoveApplied?: (payload: MoveAppliedPayload) => void;\n  onTabStatusUpdate?: (payload: TabStatusUpdatePayload) => void;\n  onConnectionStatusChange?: (status: ConnectionStatus) => void;\n  onConflictDetected?: (conflictIds: string[]) => void;\n}\n\nexport function useMultiTabSync(\n  options: UseMultiTabSyncOptions,\n): [MultiTabSyncState, MultiTabSyncActions] {\n  const {\n    gameId,\n    onGameStateUpdate,\n    onMoveApplied,\n    onTabStatusUpdate,\n    onConnectionStatusChange,\n    onConflictDetected,\n  } = options;\n\n  const [state, setState] = useState<MultiTabSyncState>({\n    isConnected: false,\n    isActiveTab: false,\n    totalTabs: 1,\n    connectionError: null,\n    isReconnecting: false,\n    hasPendingUpdates: false,\n    syncManager: null,\n    offlineMoveCount: 0,\n    lastConnected: null,\n  });\n\n  const syncManagerRef = useRef<MultiTabSyncManager | null>(null);\n  const optimisticManagerRef = useRef<OptimisticUpdateManager | null>(null);\n\n  // tRPC mutations\n  const makeMoveApi = api.game.makeMove.useMutation();\n  const requestTabActivationApi = api.game.requestTabActivation.useMutation();\n  const heartbeatApi = api.game.heartbeat.useMutation();\n\n  // Initialize managers\n  useEffect(() => {\n    if (!gameId) return;\n\n    if (!optimisticManagerRef.current) {\n      optimisticManagerRef.current = new OptimisticUpdateManager();\n\n      // Subscribe to optimistic update state changes\n      const unsubscribe = optimisticManagerRef.current.subscribe(\n        (optimisticState) => {\n          setState((prev) => ({\n            ...prev,\n            hasPendingUpdates: optimisticState.pendingCount > 0,\n          }));\n        },\n      );\n\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [gameId]);\n\n  // Setup event listeners\n  useEffect(() => {\n    if (!syncManagerRef.current) return;\n\n    const syncManager = syncManagerRef.current;\n\n    const handleInitialState = (event: SyncEvent) => {\n      const payload = event.payload as InitialStatePayload;\n      onGameStateUpdate?.(payload);\n    };\n\n    const handleMoveApplied = (event: SyncEvent) => {\n      const payload = event.payload as MoveAppliedPayload;\n\n      // Remove matching optimistic update\n      if (payload.optimisticMoveId && optimisticManagerRef.current) {\n        optimisticManagerRef.current.confirmUpdate(payload.optimisticMoveId);\n      }\n\n      onMoveApplied?.(payload);\n    };\n\n    const handleTabStatusUpdate = (event: SyncEvent) => {\n      const payload = event.payload as TabStatusUpdatePayload;\n\n      setState((prev) => ({\n        ...prev,\n        isActiveTab: payload.activeTabId === syncManager.getTabId,\n        totalTabs: payload.totalTabs,\n      }));\n\n      onTabStatusUpdate?.(payload);\n    };\n\n    const handleActiveTabChanged = (event: SyncEvent) => {\n      const payload = event.payload as { activeTabId: string };\n\n      setState((prev) => ({\n        ...prev,\n        isActiveTab: payload.activeTabId === syncManager.getTabId,\n      }));\n    };\n\n    const handleConnectionStatus = (event: SyncEvent) => {\n      const payload = event.payload as ConnectionStatus;\n\n      setState((prev) => ({\n        ...prev,\n        isConnected: payload.connected,\n        isReconnecting: payload.reconnecting,\n        connectionError: payload.error,\n        offlineMoveCount: payload.offlineMoveCount || 0,\n        lastConnected: payload.lastConnected,\n      }));\n\n      onConnectionStatusChange?.(payload);\n    };\n\n    // Add event listeners\n    syncManager.addEventListener(\"INITIAL_STATE\", handleInitialState);\n    syncManager.addEventListener(\"MOVE_APPLIED\", handleMoveApplied);\n    syncManager.addEventListener(\"TAB_STATUS_UPDATE\", handleTabStatusUpdate);\n    syncManager.addEventListener(\"ACTIVE_TAB_CHANGED\", handleActiveTabChanged);\n    syncManager.addEventListener(\"CONNECTION_STATUS\", handleConnectionStatus);\n\n    return () => {\n      // Remove event listeners\n      syncManager.removeEventListener(\"INITIAL_STATE\", handleInitialState);\n      syncManager.removeEventListener(\"MOVE_APPLIED\", handleMoveApplied);\n      syncManager.removeEventListener(\n        \"TAB_STATUS_UPDATE\",\n        handleTabStatusUpdate,\n      );\n      syncManager.removeEventListener(\n        \"ACTIVE_TAB_CHANGED\",\n        handleActiveTabChanged,\n      );\n      syncManager.removeEventListener(\n        \"CONNECTION_STATUS\",\n        handleConnectionStatus,\n      );\n    };\n  }, [\n    syncManagerRef.current,\n    onGameStateUpdate,\n    onMoveApplied,\n    onTabStatusUpdate,\n    onConnectionStatusChange,\n  ]);\n\n  const connect = useCallback(async () => {\n    if (!gameId || syncManagerRef.current) return;\n\n    try {\n      const syncManager = new MultiTabSyncManager(gameId);\n      syncManagerRef.current = syncManager;\n\n      setState((prev) => ({\n        ...prev,\n        syncManager,\n        connectionError: null,\n      }));\n\n      await syncManager.connect();\n\n      setState((prev) => ({\n        ...prev,\n        isConnected: true,\n        isActiveTab: syncManager.isActiveTab,\n        totalTabs: syncManager.totalTabs,\n        lastConnected: new Date(),\n      }));\n    } catch (error) {\n      console.error(\"Failed to connect to multi-tab sync:\", error);\n      setState((prev) => ({\n        ...prev,\n        connectionError:\n          error instanceof Error ? error.message : \"Connection failed\",\n      }));\n    }\n  }, [gameId]);\n\n  const disconnect = useCallback(() => {\n    if (syncManagerRef.current) {\n      syncManagerRef.current.disconnect();\n      syncManagerRef.current = null;\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isConnected: false,\n      syncManager: null,\n      lastConnected: prev.isConnected ? new Date() : prev.lastConnected,\n    }));\n  }, []);\n\n  const makeOptimisticMove = useCallback(\n    async (\n      move: Move,\n      currentBoard?: Board,\n      currentPlayer?: PieceColor,\n      moveCount?: number,\n    ): Promise<boolean> => {\n      if (!gameId || !syncManagerRef.current) return false;\n\n      const syncManager = syncManagerRef.current;\n      const optimisticManager = optimisticManagerRef.current;\n\n      // If offline, queue the move\n      if (!syncManager.isConnected) {\n        syncManager.queueOfflineMove(move);\n        console.log(\"Move queued for offline sync\");\n        // Still return true to allow local state updates\n        return true;\n      }\n\n      if (!syncManager.isActiveTab) {\n        throw new Error(\"Only the active tab can make moves\");\n      }\n\n      try {\n        // Create optimistic update\n        let optimisticUpdate: any = null;\n        if (\n          optimisticManager &&\n          currentBoard &&\n          currentPlayer !== undefined &&\n          moveCount !== undefined\n        ) {\n          optimisticUpdate = optimisticManager.createUpdate(\n            move,\n            currentBoard,\n            currentPlayer,\n            moveCount,\n          );\n        }\n\n        // Make the move via tRPC\n        const result = await makeMoveApi.mutateAsync({\n          gameId,\n          move,\n          tabId: syncManager.getTabId,\n          optimisticMoveId: optimisticUpdate?.id,\n        });\n\n        return result.success;\n      } catch (error) {\n        console.error(\"Failed to make optimistic move:\", error);\n\n        // If network error, queue for offline sync\n        if (error instanceof Error && error.message.includes(\"fetch\")) {\n          syncManager.queueOfflineMove(move);\n          console.log(\"Network error - move queued for offline sync\");\n          return true; // Allow local state update\n        }\n\n        // Rollback optimistic update if it exists\n        if (optimisticManagerRef.current && currentBoard) {\n          // Handle rollback logic here\n        }\n\n        throw error;\n      }\n    },\n    [gameId, makeMoveApi],\n  );\n\n  const requestTabActivation = useCallback(async (): Promise<boolean> => {\n    if (!gameId || !syncManagerRef.current) return false;\n\n    try {\n      const result = await requestTabActivationApi.mutateAsync({\n        gameId,\n        tabId: syncManagerRef.current.getTabId,\n      });\n\n      return result.success;\n    } catch (error) {\n      console.error(\"Failed to request tab activation:\", error);\n      return false;\n    }\n  }, [gameId, requestTabActivationApi]);\n\n  const sendHeartbeat = useCallback(async (): Promise<void> => {\n    if (!gameId || !syncManagerRef.current) return;\n\n    try {\n      await heartbeatApi.mutateAsync({\n        gameId,\n        tabId: syncManagerRef.current.getTabId,\n      });\n    } catch (error) {\n      console.error(\"Failed to send heartbeat:\", error);\n    }\n  }, [gameId, heartbeatApi]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [disconnect]);\n\n  const queueOfflineMove = useCallback((move: Move) => {\n    if (syncManagerRef.current) {\n      syncManagerRef.current.queueOfflineMove(move);\n      setState((prev) => ({\n        ...prev,\n        offlineMoveCount: syncManagerRef.current?.getOfflineMoveCount() || 0,\n      }));\n    }\n  }, []);\n\n  const actions: MultiTabSyncActions = {\n    connect,\n    disconnect,\n    makeOptimisticMove,\n    requestTabActivation,\n    sendHeartbeat,\n    queueOfflineMove,\n  };\n\n  return [state, actions];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useOfflineSync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useSingleTabEnforcement.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":68,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":18},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":107,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":144,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useRef } from \"react\";\n\ninterface SingleTabState {\n  isActiveTab: boolean;\n  hasOtherTabs: boolean;\n}\n\n/**\n * Simple single-tab enforcement using localStorage\n * Prevents multiple tabs from opening the same game\n */\nexport function useSingleTabEnforcement(gameId?: string) {\n  const [state, setState] = useState<SingleTabState>({\n    isActiveTab: true,\n    hasOtherTabs: false,\n  });\n\n  const tabIdRef = useRef<string>(\"\");\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    if (!gameId || typeof window === \"undefined\") return;\n\n    // Generate unique tab ID\n    const tabId = `tab_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n    tabIdRef.current = tabId;\n\n    const storageKey = `game_active_tab_${gameId}`;\n\n    // Function to check if we're the active tab\n    const checkActiveStatus = () => {\n      const currentActive = localStorage.getItem(storageKey);\n\n      if (!currentActive) {\n        // No active tab, claim it\n        localStorage.setItem(\n          storageKey,\n          JSON.stringify({\n            tabId,\n            timestamp: Date.now(),\n          }),\n        );\n        return { isActive: true, hasOthers: false };\n      }\n\n      try {\n        const data = JSON.parse(currentActive) as {\n          tabId: string;\n          timestamp: number;\n        };\n        const age = Date.now() - data.timestamp;\n\n        // If the active tab hasn't updated in 3 seconds, it's probably closed\n        if (age > 3000) {\n          localStorage.setItem(\n            storageKey,\n            JSON.stringify({\n              tabId,\n              timestamp: Date.now(),\n            }),\n          );\n          return { isActive: true, hasOthers: false };\n        }\n\n        // Check if we're the active tab\n        const isActive = data.tabId === tabId;\n        return { isActive, hasOthers: !isActive };\n      } catch (_e) {\n        // Invalid data, claim the tab\n        localStorage.setItem(\n          storageKey,\n          JSON.stringify({\n            tabId,\n            timestamp: Date.now(),\n          }),\n        );\n        return { isActive: true, hasOthers: false };\n      }\n    };\n\n    // Initial check\n    const initial = checkActiveStatus();\n    setState({\n      isActiveTab: initial.isActive,\n      hasOtherTabs: initial.hasOthers,\n    });\n\n    // If we're active, update timestamp regularly\n    if (initial.isActive) {\n      intervalRef.current = setInterval(() => {\n        const currentActive = localStorage.getItem(storageKey);\n        if (currentActive) {\n          try {\n            const data = JSON.parse(currentActive) as {\n              tabId: string;\n              timestamp: number;\n            };\n            if (data.tabId === tabId) {\n              localStorage.setItem(\n                storageKey,\n                JSON.stringify({\n                  tabId,\n                  timestamp: Date.now(),\n                }),\n              );\n            }\n          } catch (_e) {\n            // Ignore errors\n          }\n        }\n      }, 1000);\n    }\n\n    // Listen for storage events (other tabs claiming active status)\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === storageKey) {\n        const status = checkActiveStatus();\n        setState({\n          isActiveTab: status.isActive,\n          hasOtherTabs: status.hasOthers,\n        });\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    // Cleanup\n    const cleanup = () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n\n      // Remove our claim if we're the active tab\n      const current = localStorage.getItem(storageKey);\n      if (current) {\n        try {\n          const data = JSON.parse(current) as {\n            tabId: string;\n            timestamp: number;\n          };\n          if (data.tabId === tabIdRef.current) {\n            localStorage.removeItem(storageKey);\n          }\n        } catch (_e) {\n          // Ignore errors\n        }\n      }\n    };\n\n    // Cleanup on unmount or when tab closes\n    window.addEventListener(\"beforeunload\", cleanup);\n\n    return () => {\n      cleanup();\n      window.removeEventListener(\"storage\", handleStorageChange);\n      window.removeEventListener(\"beforeunload\", cleanup);\n    };\n  }, [gameId]); // Only depend on gameId\n\n  return state;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/hooks/useTimer.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":164,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  type TimeState,\n  type TimeControl,\n  type PieceColor,\n  createInitialTimeState,\n  isTimeExpired,\n} from \"~/lib/game/time-control-types\";\n\ninterface UseTimerOptions {\n  /** Time control configuration */\n  timeControl: TimeControl | null;\n  /** Callback when time expires for a player */\n  onTimeExpired?: (player: PieceColor) => void;\n  /** Callback for time state updates */\n  onTimeUpdate?: (timeState: TimeState) => void;\n  /** Update frequency in milliseconds */\n  updateInterval?: number;\n}\n\ninterface UseTimerReturn {\n  /** Current time state */\n  timeState: TimeState;\n  /** Start timer for specified player */\n  startTimer: (player: PieceColor) => void;\n  /** Stop current timer */\n  stopTimer: () => void;\n  /** Pause/resume timer */\n  pauseTimer: () => void;\n  /** Resume timer */\n  resumeTimer: () => void;\n  /** Add increment to specified player */\n  addIncrement: (player: PieceColor) => void;\n  /** Reset timers to initial state */\n  resetTimers: () => void;\n  /** Set time state (for sync) */\n  setTimeState: (state: TimeState) => void;\n  /** Get current turn duration */\n  getCurrentTurnTime: () => number;\n  /** Whether timer is running */\n  isRunning: boolean;\n}\n\nexport function useTimer({\n  timeControl,\n  onTimeExpired,\n  onTimeUpdate,\n  updateInterval = 100, // 100ms for smooth updates\n}: UseTimerOptions): UseTimerReturn {\n  // Initialize time state - start with non-zero times to prevent false expiry\n  const [timeState, setTimeStateInternal] = useState<TimeState>(() =>\n    timeControl\n      ? createInitialTimeState(timeControl)\n      : {\n          redTime: -1, // Use -1 to indicate uninitialized state\n          blackTime: -1, // Use -1 to indicate uninitialized state\n          activePlayer: null,\n          isPaused: false,\n          lastUpdateTime: Date.now(),\n          turnStartTime: null,\n        },\n  );\n\n  // Track animation frame and interval refs\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const lastUpdateRef = useRef<number>(Date.now());\n  const timeStateRef = useRef(timeState);\n  const timeControlRef = useRef(timeControl);\n  const isRunning = Boolean(timeState.activePlayer && !timeState.isPaused);\n\n  // Keep refs up to date\n  useEffect(() => {\n    timeStateRef.current = timeState;\n  }, [timeState]);\n\n  useEffect(() => {\n    timeControlRef.current = timeControl;\n  }, [timeControl]);\n\n  // Store callback in ref to avoid dependency issues\n  const onTimeUpdateRef = useRef(onTimeUpdate);\n  useEffect(() => {\n    onTimeUpdateRef.current = onTimeUpdate;\n  }, [onTimeUpdate]);\n\n  // Update time state and notify listeners\n  const updateTimeState = useCallback((newState: TimeState) => {\n    setTimeStateInternal(newState);\n    onTimeUpdateRef.current?.(newState);\n  }, []); // No dependencies to avoid infinite loops\n\n  // Calculate elapsed time since last update\n  const calculateElapsedTime = useCallback(() => {\n    const now = Date.now();\n    const elapsed = now - lastUpdateRef.current;\n    lastUpdateRef.current = now;\n    return elapsed;\n  }, []);\n\n  // Timer tick function - uses refs to avoid recreating on every state update\n  const tick = useCallback(() => {\n    const currentTimeState = timeStateRef.current;\n    const currentTimeControl = timeControlRef.current;\n\n    if (\n      !currentTimeControl ||\n      !currentTimeState.activePlayer ||\n      currentTimeState.isPaused\n    ) {\n      return;\n    }\n\n    const elapsed = calculateElapsedTime();\n    const newTimeState = { ...currentTimeState };\n\n    // Subtract elapsed time from active player\n    if (currentTimeState.activePlayer === \"red\") {\n      newTimeState.redTime = Math.max(0, currentTimeState.redTime - elapsed);\n    } else {\n      newTimeState.blackTime = Math.max(\n        0,\n        currentTimeState.blackTime - elapsed,\n      );\n    }\n\n    newTimeState.lastUpdateTime = Date.now();\n\n    // Check for time expiration\n    if (isTimeExpired(newTimeState, currentTimeState.activePlayer)) {\n      newTimeState.activePlayer = null;\n      newTimeState.isPaused = true;\n      newTimeState.turnStartTime = null;\n\n      // Clear interval to stop timer\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n\n      // Notify time expiration\n      onTimeExpired?.(currentTimeState.activePlayer);\n    }\n\n    updateTimeState(newTimeState);\n  }, [calculateElapsedTime, updateTimeState, onTimeExpired]);\n\n  // Start timer for specified player\n  const startTimer = useCallback(\n    (player: PieceColor) => {\n      if (!timeControlRef.current) return;\n\n      // Stop existing timer\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n\n      const now = Date.now();\n      lastUpdateRef.current = now;\n\n      const newTimeState: TimeState = {\n        ...timeStateRef.current,\n        activePlayer: player,\n        isPaused: false,\n        turnStartTime: now,\n        lastUpdateTime: now,\n      };\n\n      updateTimeState(newTimeState);\n\n      // Start new interval\n      intervalRef.current = setInterval(tick, updateInterval);\n    },\n    [updateTimeState, tick, updateInterval],\n  );\n\n  // Stop timer\n  const stopTimer = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    const newTimeState: TimeState = {\n      ...timeStateRef.current,\n      activePlayer: null,\n      isPaused: false,\n      turnStartTime: null,\n      lastUpdateTime: Date.now(),\n    };\n\n    updateTimeState(newTimeState);\n  }, [updateTimeState]);\n\n  // Pause timer\n  const pauseTimer = useCallback(() => {\n    const currentTimeState = timeStateRef.current;\n    if (!currentTimeState.activePlayer) return;\n\n    // Perform final tick to account for time up to pause\n    if (!currentTimeState.isPaused) {\n      const elapsed = calculateElapsedTime();\n      const newTimeState = { ...currentTimeState };\n\n      if (currentTimeState.activePlayer === \"red\") {\n        newTimeState.redTime = Math.max(0, currentTimeState.redTime - elapsed);\n      } else {\n        newTimeState.blackTime = Math.max(\n          0,\n          currentTimeState.blackTime - elapsed,\n        );\n      }\n\n      newTimeState.isPaused = true;\n      newTimeState.lastUpdateTime = Date.now();\n\n      updateTimeState(newTimeState);\n    }\n\n    // Clear interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, [updateTimeState, calculateElapsedTime]);\n\n  // Resume timer\n  const resumeTimer = useCallback(() => {\n    const currentTimeState = timeStateRef.current;\n    if (!currentTimeState.activePlayer || !currentTimeState.isPaused) return;\n\n    const now = Date.now();\n    lastUpdateRef.current = now;\n\n    const newTimeState: TimeState = {\n      ...currentTimeState,\n      isPaused: false,\n      lastUpdateTime: now,\n    };\n\n    updateTimeState(newTimeState);\n\n    // Restart interval\n    intervalRef.current = setInterval(tick, updateInterval);\n  }, [updateTimeState, tick, updateInterval]);\n\n  // Add increment to specified player\n  const addIncrement = useCallback(\n    (player: PieceColor) => {\n      const currentTimeControl = timeControlRef.current;\n      if (!currentTimeControl || currentTimeControl.incrementSeconds === 0)\n        return;\n\n      const incrementMs = currentTimeControl.incrementSeconds * 1000;\n      const newTimeState = { ...timeStateRef.current };\n\n      if (player === \"red\") {\n        newTimeState.redTime += incrementMs;\n      } else {\n        newTimeState.blackTime += incrementMs;\n      }\n\n      newTimeState.lastUpdateTime = Date.now();\n      updateTimeState(newTimeState);\n    },\n    [updateTimeState],\n  );\n\n  // Reset timers\n  const resetTimers = useCallback(() => {\n    // Clear interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    const currentTimeControl = timeControlRef.current;\n    const newTimeState = currentTimeControl\n      ? createInitialTimeState(currentTimeControl)\n      : {\n          redTime: 0,\n          blackTime: 0,\n          activePlayer: null,\n          isPaused: false,\n          lastUpdateTime: Date.now(),\n          turnStartTime: null,\n        };\n\n    updateTimeState(newTimeState);\n  }, [updateTimeState]);\n\n  // Set time state (for synchronization)\n  const setTimeState = useCallback(\n    (state: TimeState) => {\n      // Update internal state\n      updateTimeState(state);\n\n      // Update refs\n      lastUpdateRef.current = state.lastUpdateTime;\n\n      // Handle timer interval based on new state\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n\n      if (state.activePlayer && !state.isPaused && timeControl) {\n        intervalRef.current = setInterval(tick, updateInterval);\n      }\n    },\n    [updateTimeState, timeControl, tick, updateInterval],\n  );\n\n  // Get current turn duration\n  const getCurrentTurnTime = useCallback(() => {\n    if (!timeState.turnStartTime) return 0;\n    return Date.now() - timeState.turnStartTime;\n  }, [timeState.turnStartTime]);\n\n  // Handle page visibility changes (pause when tab is hidden)\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.hidden && isRunning) {\n        pauseTimer();\n      } else if (\n        !document.hidden &&\n        timeState.isPaused &&\n        timeState.activePlayer\n      ) {\n        // Auto-resume if we were paused due to visibility\n        resumeTimer();\n      }\n    };\n\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [\n    isRunning,\n    timeState.isPaused,\n    timeState.activePlayer,\n    pauseTimer,\n    resumeTimer,\n  ]);\n\n  // Clean up on unmount\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  // Initialize timers when time control is first set (not on every change)\n  const hasInitializedRef = useRef(false);\n  useEffect(() => {\n    // Only initialize if we haven't done so already and timeControl is set\n    if (timeControl && !hasInitializedRef.current) {\n      // Don't reset if we already have time values (from saved state)\n      // Check for -1 which indicates uninitialized state\n      if (\n        timeStateRef.current.redTime <= 0 &&\n        timeStateRef.current.blackTime <= 0\n      ) {\n        const newTimeState: TimeState = {\n          redTime: timeControl.initialMinutes * 60 * 1000,\n          blackTime: timeControl.initialMinutes * 60 * 1000,\n          activePlayer: null,\n          isPaused: false,\n          lastUpdateTime: Date.now(),\n          turnStartTime: null,\n        };\n        updateTimeState(newTimeState);\n      }\n      hasInitializedRef.current = true;\n    } else if (!timeControl && hasInitializedRef.current) {\n      // Reset when time control is removed\n      const newTimeState: TimeState = {\n        redTime: 0,\n        blackTime: 0,\n        activePlayer: null,\n        isPaused: false,\n        lastUpdateTime: Date.now(),\n        turnStartTime: null,\n      };\n      updateTimeState(newTimeState);\n      hasInitializedRef.current = false;\n    }\n  }, [timeControl, updateTimeState]);\n\n  return {\n    timeState,\n    startTimer,\n    stopTimer,\n    pauseTimer,\n    resumeTimer,\n    addIncrement,\n    resetTimers,\n    setTimeState,\n    getCurrentTurnTime,\n    isRunning,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/__tests__/backward-capture.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":14,"column":18,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":14,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":18,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":18,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":18,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":18,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":21,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":21,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":24,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":24,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":24,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":24,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":27,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":27,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":27,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":31,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":31,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":32,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":32,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":32,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":32,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":32,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":34,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":34,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":34,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":34,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":35,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":35,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":35,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":35,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":35,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":35,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":35,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":43,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":45,"column":18,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":45,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":49,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":49,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":49,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":49,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":49,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":49,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":52,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":52,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":52,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":52,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":55,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":55,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":55,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":55,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":58,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":58,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":58,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":58,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":62,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":64,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":62,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":62,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":62,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":63,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":63,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":63,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":63,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":63,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":63,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":65,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":65,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":65,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":66,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":66,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":66,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":66,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":66,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":66,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":76,"column":18,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":76,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":80,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":80,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":80,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":80,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":80,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":83,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":83,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":83,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":83,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":84,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":84,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":84,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":84,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":85,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":85,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":85,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":85,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":86,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":86,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":86,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":86,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":89,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":89,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":95,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":95,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":96,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":96,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":96,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":96,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":96,"column":9,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":96,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":96,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":98,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":98,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":98,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":98,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":99,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":99,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":99,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":99,"column":9,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":99,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":99,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":101,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":102,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":102,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":102,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":102,"column":9,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":102,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":102,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":104,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":106,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":104,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":105,"column":7,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":105,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":105,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":105,"column":9,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":105,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":105,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":115,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":117,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":117,"column":18,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":117,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":121,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":121,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":121,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":121,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":122,"column":11,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":122,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":122,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":122,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":124,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":124,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":124,"column":30,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":124,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":124,"column":34,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":124,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":125,"endColumn":37}],"suppressedMessages":[],"errorCount":112,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test to verify regular pieces cannot capture backward\n * This test was created to fix a bug where regular black pieces\n * were able to capture backward (up the board)\n */\n\nimport { describe, it, expect } from \"vitest\";\nimport { getCaptureMoves, type Board, type Piece } from \"../game-logic\";\n\ndescribe(\"Backward Capture Prevention\", () => {\n  it(\"regular black pieces should NOT be able to capture backward (upward)\", () => {\n    const board: Board = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null)) as Board;\n\n    // Place a black regular piece at position [3, 3]\n    const blackPiece: Piece = { color: \"black\", type: \"regular\" };\n    board[3]![3] = blackPiece;\n\n    // Place a red piece above and to the right (backward capture position for black)\n    board[2]![4] = { color: \"red\", type: \"king\" };\n\n    // Place a red piece below and to the right (forward capture position for black)\n    board[4]![4] = { color: \"red\", type: \"regular\" };\n\n    // Get capture moves for the black piece\n    const captures = getCaptureMoves(board, { row: 3, col: 3 }, blackPiece);\n\n    // Black should only be able to capture forward (downward)\n    // It should NOT be able to capture the piece at [2,4] (backward)\n    const backwardCapture = captures.find((move) =>\n      move.captures?.some((c) => c.row === 2 && c.col === 4),\n    );\n    const forwardCapture = captures.find((move) =>\n      move.captures?.some((c) => c.row === 4 && c.col === 4),\n    );\n\n    expect(backwardCapture).toBeUndefined(); // Should NOT exist\n    expect(forwardCapture).toBeDefined(); // Should exist\n  });\n\n  it(\"regular red pieces should NOT be able to capture backward (downward)\", () => {\n    const board: Board = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null)) as Board;\n\n    // Place a red regular piece at position [4, 3]\n    const redPiece: Piece = { color: \"red\", type: \"regular\" };\n    board[4]![3] = redPiece;\n\n    // Place a black piece below and to the right (backward capture for red)\n    board[5]![4] = { color: \"black\", type: \"regular\" };\n\n    // Place a black piece above and to the right (forward capture for red)\n    board[3]![4] = { color: \"black\", type: \"regular\" };\n\n    // Get capture moves for the red piece\n    const captures = getCaptureMoves(board, { row: 4, col: 3 }, redPiece);\n\n    // Red should only be able to capture forward (upward)\n    // It should NOT be able to capture the piece at [5,4] (backward)\n    const backwardCapture = captures.find((move) =>\n      move.captures?.some((c) => c.row === 5 && c.col === 4),\n    );\n    const forwardCapture = captures.find((move) =>\n      move.captures?.some((c) => c.row === 3 && c.col === 4),\n    );\n\n    expect(backwardCapture).toBeUndefined(); // Should NOT exist\n    expect(forwardCapture).toBeDefined(); // Should exist\n  });\n\n  it(\"kings SHOULD be able to capture in all directions\", () => {\n    const board: Board = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null)) as Board;\n\n    // Place a black king at position [4, 4]\n    const blackKing: Piece = { color: \"black\", type: \"king\" };\n    board[4]![4] = blackKing;\n\n    // Place red pieces in all four diagonal directions\n    board[3]![3] = { color: \"red\", type: \"regular\" }; // up-left\n    board[3]![5] = { color: \"red\", type: \"regular\" }; // up-right\n    board[5]![3] = { color: \"red\", type: \"regular\" }; // down-left\n    board[5]![5] = { color: \"red\", type: \"regular\" }; // down-right\n\n    // Get capture moves for the king\n    const captures = getCaptureMoves(board, { row: 4, col: 4 }, blackKing);\n\n    // King should be able to capture in all 4 directions\n    expect(captures).toHaveLength(4);\n\n    // Verify all four captures are possible\n    const capturesUpLeft = captures.find((m) =>\n      m.captures?.some((c) => c.row === 3 && c.col === 3),\n    );\n    const capturesUpRight = captures.find((m) =>\n      m.captures?.some((c) => c.row === 3 && c.col === 5),\n    );\n    const capturesDownLeft = captures.find((m) =>\n      m.captures?.some((c) => c.row === 5 && c.col === 3),\n    );\n    const capturesDownRight = captures.find((m) =>\n      m.captures?.some((c) => c.row === 5 && c.col === 5),\n    );\n\n    expect(capturesUpLeft).toBeDefined();\n    expect(capturesUpRight).toBeDefined();\n    expect(capturesDownLeft).toBeDefined();\n    expect(capturesDownRight).toBeDefined();\n  });\n\n  it(\"should prevent backward captures in actual game scenario\", () => {\n    const board: Board = Array(8)\n      .fill(null)\n      .map(() => Array(8).fill(null)) as Board;\n\n    // Recreate the reported bug scenario:\n    // Black regular piece capturing a red king that's above it\n    board[4]![2] = { color: \"black\", type: \"regular\" };\n    board[3]![3] = { color: \"red\", type: \"king\" }; // This should NOT be capturable by regular black\n\n    const blackPiece = board[4]![2];\n    const captures = getCaptureMoves(board, { row: 4, col: 2 }, blackPiece);\n\n    // The black regular piece should NOT be able to capture the red king above it\n    expect(captures).toHaveLength(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/__tests__/illegal-moves.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":20,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":20,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":23,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":23,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":23,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":25,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":25,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":25,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":25,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":29,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":29,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":29,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":29,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":29,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":33,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":33,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":33,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":33,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":33,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":34,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":40,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":40,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":43,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":43,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":43,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":43,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":45,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":45,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":49,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":49,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":49,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":49,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":49,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":49,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":53,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":53,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":53,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":53,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":53,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":54,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":62,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":62,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":64,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":64,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":64,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":64,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":65,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":65,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":65,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":65,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":67,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":67,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":67,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":67,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":67,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":67,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":69,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":69,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":69,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":70,"column":9,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":70,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":70,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":70,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":70,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":79,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":79,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":81,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":81,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":81,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":81,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":82,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":82,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":82,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":82,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":84,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":84,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":84,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":84,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":84,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":84,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":86,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":88,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":86,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":86,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":86,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":87,"column":9,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":87,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":87,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":87,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":87,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":87,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":96,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":96,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":98,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":98,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":98,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":98,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":99,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":99,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":99,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":99,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":101,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":101,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":101,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":101,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":101,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":103,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":105,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":103,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":103,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":104,"column":9,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":104,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":104,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":104,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":104,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":104,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":113,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":113,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":115,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":115,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":115,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":115,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":116,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":116,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":116,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":116,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":118,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":118,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":118,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":118,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":118,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":118,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":118,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":120,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":122,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":120,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":120,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":120,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":121,"column":9,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":121,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":121,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":121,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":121,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":121,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":121,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":130,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":130,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":132,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":132,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":132,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":132,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":133,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":133,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":133,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":133,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":134,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":134,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":134,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":134,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":136,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":136,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":136,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":136,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":136,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":136,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":140,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":140,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":140,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":141,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":141,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":141,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":147,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":147,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":150,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":150,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":150,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":150,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":151,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":151,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":151,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":151,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":152,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":152,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":152,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":152,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":154,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":154,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":154,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":154,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":154,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":154,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":154,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":154,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":157,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":161,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":161,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":161,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":161,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":161,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":170,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":170,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":173,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":173,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":173,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":173,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":175,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":175,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":175,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":175,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":178,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":180,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":180,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":181,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | bigint`.","line":181,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":181,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":181,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":188,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":188,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":191,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":191,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":191,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":191,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":193,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":193,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":193,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":193,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":196,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":198,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":198,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":199,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | bigint`.","line":199,"column":42,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":199,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":199,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":206,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":206,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":209,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":209,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":209,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":209,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":210,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":210,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":210,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":210,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":212,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":212,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":212,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":212,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":212,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":212,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":212,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":221,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":221,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":223,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":223,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":223,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":223,"endColumn":18},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'horizontalMove' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":226,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":233,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":233,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":233,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":233,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":236,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":238,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":236,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":236,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .some on an `error` typed value.","line":236,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":237,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":237,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":245,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":245,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":247,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":247,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":247,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":247,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":248,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":248,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":248,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":248,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":250,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":250,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":250,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":250,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":250,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":250,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":250,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":250,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":259,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":259,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":261,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":261,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":261,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":261,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":262,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":262,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":262,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":262,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":264,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":264,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":264,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":264,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":267,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":269,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":267,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":267,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":267,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":267,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":268,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":268,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":268,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":268,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":276,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":276,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":279,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":279,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":279,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":279,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":280,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":280,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":280,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":280,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":281,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":281,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":281,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":281,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":283,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":283,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":283,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":283,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":286,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":287,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":287,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":287,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":287,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":290,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":290,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":290,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":291,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":291,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":299,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":299,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":302,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":302,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":302,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":302,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":304,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":304,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":304,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":304,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":307,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":307,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":313,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":313,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":316,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":316,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":316,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":316,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":317,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":317,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":317,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":317,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":319,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":319,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":319,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":319,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":319,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":319,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":319,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":319,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":328,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":328,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":331,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":331,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":331,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":331,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":333,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":333,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":333,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":333,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":336,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":336,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":336,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":336,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":336,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":336,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":336,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":336,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":343,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":343,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":346,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":346,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":346,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":346,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":347,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":347,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":347,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":347,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":348,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":348,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":348,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":348,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":349,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":349,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":349,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":349,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":350,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":350,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":350,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":350,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":352,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":352,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":352,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":352,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":352,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":352,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":352,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":352,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":358,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":358,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":358,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":359,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | bigint`.","line":359,"column":48,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":359,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":359,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":368,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":368,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":370,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":370,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":370,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":370,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":372,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":372,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":372,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":372,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":375,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":375,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":375,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":375,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":375,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":375,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":375,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":376,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":376,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":376,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":376,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":376,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":376,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":376,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":377,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":377,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":377,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":377,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":377,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":377,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":377,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":378,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":378,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":378,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":378,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":378,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":378,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":378,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":389,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":389,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":391,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":391,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":391,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":391,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":392,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":392,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":392,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":392,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":394,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":394,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":394,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":394,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":394,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":394,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":394,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":394,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":396,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":398,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":396,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":396,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":396,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":397,"column":9,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":397,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":397,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":397,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":397,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":397,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":397,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":406,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":406,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":409,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":409,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":409,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":409,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":410,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":410,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":410,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":410,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":411,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":411,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":411,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":411,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":413,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":413,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":413,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":413,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":413,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":413,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":413,"column":77,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":413,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":416,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":416,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":416,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":416,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":416,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":416,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":416,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":416,"endColumn":56}],"suppressedMessages":[],"errorCount":309,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive test suite for illegal moves and edge cases\n * Ensures the game properly prevents all types of invalid moves\n */\n\nimport { describe, it, expect } from \"vitest\";\nimport {\n  getValidMoves,\n  getCaptureMoves,\n  getMustCapturePositions,\n  type Board,\n  type Move,\n} from \"../game-logic\";\n\ndescribe(\"Illegal Move Prevention - Comprehensive Tests\", () => {\n  describe(\"Backward Movement Prevention for Regular Pieces\", () => {\n    it(\"should prevent regular red pieces from moving backward (down)\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Place a red regular piece in middle of board\n      board[4]![3] = { color: \"red\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 4, col: 3 }, \"red\");\n\n      // Red pieces move up (negative row direction)\n      // Should NOT include any moves down (positive row direction)\n      const backwardMoves = moves.filter((m) => m.to.row > m.from.row);\n      expect(backwardMoves).toHaveLength(0);\n\n      // Should only have forward moves\n      const forwardMoves = moves.filter((m) => m.to.row < m.from.row);\n      expect(forwardMoves.length).toBeGreaterThan(0);\n    });\n\n    it(\"should prevent regular black pieces from moving backward (up)\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Place a black regular piece in middle of board\n      board[4]![3] = { color: \"black\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 4, col: 3 }, \"black\");\n\n      // Black pieces move down (positive row direction)\n      // Should NOT include any moves up (negative row direction)\n      const backwardMoves = moves.filter((m) => m.to.row < m.from.row);\n      expect(backwardMoves).toHaveLength(0);\n\n      // Should only have forward moves\n      const forwardMoves = moves.filter((m) => m.to.row > m.from.row);\n      expect(forwardMoves.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Backward Capture Prevention for Regular Pieces\", () => {\n    it(\"should prevent regular black piece from capturing diagonally backward-left\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"black\", type: \"regular\" };\n      board[3]![3] = { color: \"red\", type: \"regular\" }; // backward-left\n\n      const captures = getCaptureMoves(board, { row: 4, col: 4 }, board[4]![4]);\n\n      const backwardLeftCapture = captures.find((m) =>\n        m.captures?.some((c) => c.row === 3 && c.col === 3),\n      );\n\n      expect(backwardLeftCapture).toBeUndefined();\n    });\n\n    it(\"should prevent regular black piece from capturing diagonally backward-right\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"black\", type: \"regular\" };\n      board[3]![5] = { color: \"red\", type: \"regular\" }; // backward-right\n\n      const captures = getCaptureMoves(board, { row: 4, col: 4 }, board[4]![4]);\n\n      const backwardRightCapture = captures.find((m) =>\n        m.captures?.some((c) => c.row === 3 && c.col === 5),\n      );\n\n      expect(backwardRightCapture).toBeUndefined();\n    });\n\n    it(\"should prevent regular red piece from capturing diagonally backward-left\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[3]![4] = { color: \"red\", type: \"regular\" };\n      board[4]![3] = { color: \"black\", type: \"regular\" }; // backward-left for red\n\n      const captures = getCaptureMoves(board, { row: 3, col: 4 }, board[3]![4]);\n\n      const backwardLeftCapture = captures.find((m) =>\n        m.captures?.some((c) => c.row === 4 && c.col === 3),\n      );\n\n      expect(backwardLeftCapture).toBeUndefined();\n    });\n\n    it(\"should prevent regular red piece from capturing diagonally backward-right\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[3]![4] = { color: \"red\", type: \"regular\" };\n      board[4]![5] = { color: \"black\", type: \"regular\" }; // backward-right for red\n\n      const captures = getCaptureMoves(board, { row: 3, col: 4 }, board[3]![4]);\n\n      const backwardRightCapture = captures.find((m) =>\n        m.captures?.some((c) => c.row === 4 && c.col === 5),\n      );\n\n      expect(backwardRightCapture).toBeUndefined();\n    });\n\n    it(\"should prevent backward capture even when forward capture is available\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"black\", type: \"regular\" };\n      board[3]![3] = { color: \"red\", type: \"regular\" }; // backward (invalid)\n      board[5]![5] = { color: \"red\", type: \"regular\" }; // forward (valid)\n\n      const captures = getCaptureMoves(board, { row: 4, col: 4 }, board[4]![4]);\n\n      // Should only have forward capture\n      expect(captures).toHaveLength(1);\n      expect(captures[0]!.captures).toContainEqual({ row: 5, col: 5 });\n      expect(captures[0]!.captures).not.toContainEqual({ row: 3, col: 3 });\n    });\n\n    it(\"should prevent backward capture in multi-jump scenarios\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Set up a multi-jump where second jump would be backward\n      board[5]![1] = { color: \"black\", type: \"regular\" };\n      board[6]![2] = { color: \"red\", type: \"regular\" }; // First forward capture (black moves down)\n      board[5]![3] = { color: \"red\", type: \"regular\" }; // Would be backward capture after landing at [7,3]\n\n      const captures = getCaptureMoves(board, { row: 5, col: 1 }, board[5]![1]);\n\n      // Should capture the first piece\n      const captureExists = captures.length > 0;\n      expect(captureExists).toBe(true);\n\n      // Should not continue with backward capture\n      const doubleCapture = captures.find((m) => m.captures?.length === 2);\n      expect(doubleCapture).toBeUndefined();\n    });\n  });\n\n  describe(\"Edge Cases and Complex Scenarios\", () => {\n    it(\"should handle piece at top edge correctly for black pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Black piece at top edge can only move down\n      board[0]![3] = { color: \"black\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 0, col: 3 }, \"black\");\n\n      // Should have forward moves\n      expect(moves.length).toBeGreaterThan(0);\n      // All moves should be downward\n      moves.forEach((move) => {\n        expect(move.to.row).toBeGreaterThan(move.from.row);\n      });\n    });\n\n    it(\"should handle piece at bottom edge correctly for red pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Red piece at bottom edge would normally move up\n      board[7]![3] = { color: \"red\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 7, col: 3 }, \"red\");\n\n      // Red piece at row 7 can move up to row 6\n      expect(moves.length).toBeGreaterThan(0);\n      // All moves should be upward (lower row number)\n      moves.forEach((move) => {\n        expect(move.to.row).toBeLessThan(move.from.row);\n      });\n    });\n\n    it(\"should not allow captures through edge of board\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Place pieces near edge\n      board[1]![0] = { color: \"black\", type: \"regular\" };\n      board[0]![1] = { color: \"red\", type: \"regular\" };\n\n      const captures = getCaptureMoves(board, { row: 1, col: 0 }, board[1]![0]);\n\n      // Can't capture because landing would be off board at [-1, 2]\n      expect(captures).toHaveLength(0);\n    });\n\n    it(\"should prevent diagonal non-moves\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"red\", type: \"regular\" };\n\n      // Try to make an invalid move (not diagonal)\n      const horizontalMove: Move = {\n        from: { row: 4, col: 4 },\n        to: { row: 4, col: 5 }, // Horizontal, not diagonal\n      };\n\n      // makeMove doesn't validate - it just applies the move\n      // So we check if it's in the valid moves list instead\n      const validMoves = getValidMoves(board, { row: 4, col: 4 }, \"red\");\n\n      // Should not include horizontal move\n      const hasHorizontalMove = validMoves.some(\n        (m) => m.to.row === 4 && m.to.col === 5,\n      );\n      expect(hasHorizontalMove).toBe(false);\n    });\n\n    it(\"should prevent capturing own pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"red\", type: \"regular\" };\n      board[3]![3] = { color: \"red\", type: \"regular\" }; // Same color\n\n      const captures = getCaptureMoves(board, { row: 4, col: 4 }, board[4]![4]);\n\n      // Should not be able to capture own piece\n      expect(captures).toHaveLength(0);\n    });\n\n    it(\"should prevent moving to occupied square\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"red\", type: \"regular\" };\n      board[3]![3] = { color: \"black\", type: \"regular\" }; // Occupied\n\n      const moves = getValidMoves(board, { row: 4, col: 4 }, \"red\");\n\n      // Should not include move to occupied square\n      const moveToOccupied = moves.find(\n        (m) => m.to.row === 3 && m.to.col === 3,\n      );\n      expect(moveToOccupied).toBeUndefined();\n    });\n\n    it(\"should handle mandatory capture rules correctly\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Set up a scenario where capture is available\n      board[4]![4] = { color: \"red\", type: \"regular\" };\n      board[3]![3] = { color: \"black\", type: \"regular\" };\n      board[3]![5] = null; // Regular move available\n\n      const mustCapture = getMustCapturePositions(board, \"red\");\n\n      // If there's a piece that can capture, it must be in the list\n      if (mustCapture.length > 0) {\n        const validMoves = getValidMoves(board, { row: 4, col: 4 }, \"red\");\n\n        // All valid moves should be captures when mandatory capture applies\n        validMoves.forEach((move) => {\n          expect(move.captures).toBeDefined();\n        });\n      }\n    });\n\n    it(\"should handle corner pieces correctly\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Regular piece in corner\n      board[0]![0] = { color: \"black\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 0, col: 0 }, \"black\");\n\n      // Corner piece has limited moves\n      expect(moves.length).toBeLessThanOrEqual(1);\n    });\n\n    it(\"should not allow backward capture even to complete a winning move\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Black regular piece that could win by capturing backward (but shouldn't be allowed)\n      board[2]![2] = { color: \"black\", type: \"regular\" };\n      board[1]![1] = { color: \"red\", type: \"king\" }; // Last red piece - backward capture would win\n\n      const captures = getCaptureMoves(board, { row: 2, col: 2 }, board[2]![2]);\n\n      // Even though capturing would win the game, backward capture is not allowed\n      expect(captures).toHaveLength(0);\n    });\n\n    it(\"should handle promotion line correctly\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Red piece one move from promotion\n      board[1]![1] = { color: \"red\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 1, col: 1 }, \"red\");\n\n      // Should be able to move to promotion line\n      const promotionMove = moves.find((m) => m.to.row === 0);\n      expect(promotionMove).toBeDefined();\n    });\n\n    it(\"should prevent regular pieces from exhibiting king behavior\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Regular piece surrounded by capturable pieces in all directions\n      board[4]![4] = { color: \"black\", type: \"regular\" };\n      board[3]![3] = { color: \"red\", type: \"regular\" }; // backward-left\n      board[3]![5] = { color: \"red\", type: \"regular\" }; // backward-right\n      board[5]![3] = { color: \"red\", type: \"regular\" }; // forward-left\n      board[5]![5] = { color: \"red\", type: \"regular\" }; // forward-right\n\n      const captures = getCaptureMoves(board, { row: 4, col: 4 }, board[4]![4]);\n\n      // Regular black piece should only capture forward (down)\n      expect(captures).toHaveLength(2); // Only forward-left and forward-right\n\n      // Verify only forward captures\n      captures.forEach((capture) => {\n        expect(capture.to.row).toBeGreaterThan(capture.from.row);\n      });\n    });\n  });\n\n  describe(\"King Movement and Capture\", () => {\n    it(\"should allow kings to move backward\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"black\", type: \"king\" };\n\n      const moves = getValidMoves(board, { row: 4, col: 4 }, \"black\");\n\n      // King should have moves in all 4 diagonal directions\n      const upLeft = moves.find((m) => m.to.row === 3 && m.to.col === 3);\n      const upRight = moves.find((m) => m.to.row === 3 && m.to.col === 5);\n      const downLeft = moves.find((m) => m.to.row === 5 && m.to.col === 3);\n      const downRight = moves.find((m) => m.to.row === 5 && m.to.col === 5);\n\n      expect(upLeft).toBeDefined();\n      expect(upRight).toBeDefined();\n      expect(downLeft).toBeDefined();\n      expect(downRight).toBeDefined();\n    });\n\n    it(\"should allow kings to capture backward\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[4]![4] = { color: \"black\", type: \"king\" };\n      board[3]![3] = { color: \"red\", type: \"regular\" }; // backward capture\n\n      const captures = getCaptureMoves(board, { row: 4, col: 4 }, board[4]![4]);\n\n      const backwardCapture = captures.find((m) =>\n        m.captures?.some((c) => c.row === 3 && c.col === 3),\n      );\n\n      expect(backwardCapture).toBeDefined();\n    });\n\n    it(\"should handle king multi-directional captures\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // King that can capture, then change direction\n      board[4]![1] = { color: \"black\", type: \"king\" };\n      board[3]![2] = { color: \"red\", type: \"regular\" }; // First capture (backward)\n      board[1]![4] = { color: \"red\", type: \"regular\" }; // Second capture (forward from landing)\n\n      const captures = getCaptureMoves(board, { row: 4, col: 1 }, board[4]![1]);\n\n      // Should find multi-jump with direction change\n      const multiJump = captures.find((m) => m.captures?.length === 2);\n      expect(multiJump).toBeDefined();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/board-config.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":29,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":29,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":59,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":59,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":59,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":64,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":70,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [\"--board-size\"] on an `error` typed value.","line":71,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":71,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gridTemplateColumns on an `error` typed value.","line":72,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":76,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":76,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":76,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [\"--board-size\"] on an `error` typed value.","line":77,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":77,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gridTemplateColumns on an `error` typed value.","line":78,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":82,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":82,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":82,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [\"--board-size\"] on an `error` typed value.","line":83,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":83,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gridTemplateColumns on an `error` typed value.","line":84,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":92,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":92,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":92,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":92,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":93,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":93,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":104,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":104,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":104,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":104,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":105,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":105,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":124,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":124,"endColumn":61}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { GameConfigLoader } from \"./game-engine/config-loader\";\nimport { getBoardGridStyleFromSize } from \"./board-style\";\nimport { getBoardVariants, type BoardVariant } from \"./variants\";\n\ndescribe(\"Variant Rules Configuration System\", () => {\n  describe(\"getBoardConfig\", () => {\n    it(\"should return American checkers config by default\", () => {\n      const rules = GameConfigLoader.exportVariant(\"american\")!;\n      expect(rules.board.size).toBe(8);\n      expect(\n        Math.max(\n          rules.board.startingRows.red.length,\n          rules.board.startingRows.black.length,\n        ),\n      ).toBe(3);\n      expect(rules.metadata.displayName).toBe(\"American Checkers\");\n    });\n\n    it(\"should return correct config for each variant\", () => {\n      const testCases: Array<[BoardVariant, number, number]> = [\n        [\"american\", 8, 3],\n        [\"international\", 10, 4],\n        [\"canadian\", 12, 5],\n        [\"brazilian\", 8, 3],\n      ];\n\n      testCases.forEach(([variant, expectedSize, expectedRows]) => {\n        const rules = GameConfigLoader.exportVariant(variant)!;\n        expect(rules.board.size).toBe(expectedSize);\n        expect(\n          Math.max(\n            rules.board.startingRows.red.length,\n            rules.board.startingRows.black.length,\n          ),\n        ).toBe(expectedRows);\n        expect(rules.promotion.customRows?.red?.[0] ?? 0).toBe(0);\n        expect(\n          rules.promotion.customRows?.black?.[0] ?? rules.board.size - 1,\n        ).toBe(expectedSize - 1);\n      });\n    });\n\n    it(\"should have proper descriptions\", () => {\n      expect(\n        GameConfigLoader.getVariantMetadata(\"american\")!.description,\n      ).toContain(\"8√ó8\");\n      expect(\n        GameConfigLoader.getVariantMetadata(\"international\")!.description,\n      ).toContain(\"10√ó10\");\n      expect(\n        GameConfigLoader.getVariantMetadata(\"canadian\")!.description,\n      ).toContain(\"12√ó12\");\n    });\n  });\n\n  describe(\"getBoardVariants\", () => {\n    it(\"should return all available variants\", () => {\n      const variants = getBoardVariants();\n      expect(variants).toContain(\"american\");\n      expect(variants).toContain(\"international\");\n      expect(variants).toContain(\"canadian\");\n      expect(variants).toContain(\"brazilian\");\n      expect(variants.length).toBe(4);\n    });\n  });\n\n  describe(\"getBoardGridStyle\", () => {\n    it(\"should generate correct CSS for 8x8 board\", () => {\n      const style = getBoardGridStyleFromSize(8);\n      expect(style[\"--board-size\"]).toBe(\"8\");\n      expect(style.gridTemplateColumns).toBe(\"repeat(8, minmax(0, 1fr))\");\n    });\n\n    it(\"should generate correct CSS for 10x10 board\", () => {\n      const style = getBoardGridStyleFromSize(10);\n      expect(style[\"--board-size\"]).toBe(\"10\");\n      expect(style.gridTemplateColumns).toBe(\"repeat(10, minmax(0, 1fr))\");\n    });\n\n    it(\"should generate correct CSS for 12x12 board\", () => {\n      const style = getBoardGridStyleFromSize(12);\n      expect(style[\"--board-size\"]).toBe(\"12\");\n      expect(style.gridTemplateColumns).toBe(\"repeat(12, minmax(0, 1fr))\");\n    });\n  });\n\n  // getMaxBoardSize tested elsewhere or with size-only helpers\n\n  describe(\"Rules configs data integrity\", () => {\n    it(\"should have valid king rows for all configs\", () => {\n      getBoardVariants().forEach((variant) => {\n        const rules = GameConfigLoader.exportVariant(variant)!;\n        const redKingRow = rules.promotion.customRows?.red?.[0] ?? 0;\n        const blackKingRow =\n          rules.promotion.customRows?.black?.[0] ?? rules.board.size - 1;\n        expect(redKingRow).toBe(0);\n        expect(blackKingRow).toBe(rules.board.size - 1);\n        expect(blackKingRow).toBeGreaterThan(redKingRow);\n      });\n    });\n\n    it(\"should have piece rows less than half board size\", () => {\n      getBoardVariants().forEach((variant) => {\n        const rules = GameConfigLoader.exportVariant(variant)!;\n        const pieceRows = Math.max(\n          rules.board.startingRows.red.length,\n          rules.board.startingRows.black.length,\n        );\n        expect(pieceRows).toBeLessThan(rules.board.size / 2);\n        expect(pieceRows * 2).toBeLessThan(rules.board.size);\n      });\n    });\n\n    it(\"should calculate correct piece counts\", () => {\n      const testCases: Array<[BoardVariant, number]> = [\n        [\"american\", 12], // 8√ó3/2 = 12\n        [\"international\", 20], // 10√ó4/2 = 20\n        [\"canadian\", 30], // 12√ó5/2 = 30\n        [\"brazilian\", 12], // 8√ó3/2 = 12\n      ];\n\n      testCases.forEach(([variant, expectedPiecesPerSide]) => {\n        const rules = GameConfigLoader.exportVariant(variant)!;\n        const pieceRows = Math.max(\n          rules.board.startingRows.red.length,\n          rules.board.startingRows.black.length,\n        );\n        const piecesPerSide = Math.floor((rules.board.size * pieceRows) / 2);\n        expect(piecesPerSide).toBe(expectedPiecesPerSide);\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/conflict-resolution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/draw-detection.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":24,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":24,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":25,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":26,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":26,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":28,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":28,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":28,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":31,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":31,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .endsWith on an `error` typed value.","line":31,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":37,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":37,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":38,"column":14,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":38,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":42,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":42,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":43,"column":14,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":43,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":45,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":45,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":45,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":46,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":46,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":46,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":46,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":54,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":54,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":56,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":56,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":57,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":57,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":57,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":57,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":59,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":59,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .endsWith on an `error` typed value.","line":59,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":60,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":60,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .endsWith on an `error` typed value.","line":60,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":67,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":67,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":67,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":67,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":68,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":72,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":72,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":79,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":79,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":79,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":80,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":84,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":84,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":84,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":85,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":89,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":89,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":95,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":95,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":96,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":100,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":100,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":100,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":101,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":105,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":105,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":111,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":111,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":111,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":111,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":112,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":116,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":116,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":116,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":119,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":119,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":125,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":125,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .boardPositions on an `error` typed value.","line":126,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":127,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":131,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":131,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":131,"column":19,"nodeType":"Identifier","messageId":"unsafeCall","endLine":131,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":134,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":134,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":141,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":141,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":141,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":141,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":142,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":142,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":142,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":142,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":143,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":143,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":143,"column":15,"nodeType":"Identifier","messageId":"unsafeCall","endLine":143,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":145,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":145,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":145,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":145,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":146,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":146,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":146,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":152,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":152,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":152,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":152,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":154,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":154,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":156,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":156,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":156,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":156,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":161,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":161,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":161,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":163,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":163,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":163,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":165,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":165,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":165,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":170,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":170,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":170,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":170,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":172,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":172,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":177,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":177,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":177,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":180,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":180,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":181,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":181,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":181,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":181,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":188,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":188,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":188,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":188,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":189,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":190,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":192,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":192,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":192,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":192,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":197,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":197,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":197,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":197,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":198,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":199,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":201,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":201,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":201,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":206,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":206,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":206,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":206,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":207,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":208,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":210,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":210,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":210,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":210,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":215,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":215,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":215,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":215,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":216,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":217,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":222,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":222,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":222,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":222,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":231,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":231,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":232,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":232,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":233,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":233,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":235,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":235,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":235,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":235,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":236,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":238,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":238,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":238,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":238,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":245,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":245,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":246,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":246,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":247,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":247,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":248,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":248,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":250,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":250,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":250,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":250,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":251,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":253,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":253,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":253,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":253,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":260,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":260,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":261,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":261,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":262,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":262,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":264,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":264,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":264,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":264,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":265,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":265,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":267,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":267,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":267,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":267,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":276,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":276,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":277,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":277,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":278,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":278,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":280,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":280,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":280,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":280,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":287,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":287,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":288,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":288,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":289,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":289,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":290,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":290,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":292,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":292,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":292,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":292,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":299,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":299,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":300,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":300,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":301,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":301,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":302,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":302,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":304,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":304,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":304,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":304,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":311,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":311,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":312,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":312,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [9] on an `error` typed value.","line":313,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":313,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":314,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":314,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":315,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":315,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":320,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":320,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":320,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":320,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":327,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":327,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":328,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":328,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":329,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":329,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":330,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":330,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":331,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":331,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":334,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":334,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":334,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":334,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":343,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":343,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":344,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":344,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":345,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":345,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":346,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":346,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":346,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":346,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":347,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":347,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":347,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":347,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":349,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":349,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":349,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":349,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":356,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":356,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":357,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":357,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":358,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":358,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":359,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":359,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":359,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":359,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":360,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSincePromotion on an `error` typed value.","line":361,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":363,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":363,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":363,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":363,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":370,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":370,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":371,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":371,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":372,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":372,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":374,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":374,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":374,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":374,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":376,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":376,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":376,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":376,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":381,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":381,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":381,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":381,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":382,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":382,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":382,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":382,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":384,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":384,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":384,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":384,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":391,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":391,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":392,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":392,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":393,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":393,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":395,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":395,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":395,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":395,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":397,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":397,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionCounts on an `error` typed value.","line":397,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":400,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":400,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":400,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":400,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":409,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":409,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":410,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":410,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":411,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":411,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":413,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":413,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":413,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":413,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":416,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":416,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":417,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":417,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":417,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":417,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":424,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":424,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":426,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":426,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":428,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":428,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":428,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":428,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .movesSinceCapture on an `error` typed value.","line":429,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":429,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":431,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":431,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":432,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":432,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":432,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":432,"endColumn":33}],"suppressedMessages":[],"errorCount":223,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport {\n  createDrawState,\n  serializeBoard,\n  updateDrawState,\n  checkThreefoldRepetition,\n  checkFortyMoveRule,\n  checkTwentyFiveMoveRule,\n  checkInsufficientMaterial,\n  checkDrawConditions,\n} from \"./draw-detection\";\nimport { createInitialBoard, type Board, type Move } from \"./game-logic\";\nimport { AmericanConfig } from \"./game-engine/rule-configs/american\";\nimport type { VariantConfig } from \"./game-engine/rule-schema\";\n\ndescribe(\"Draw Detection\", () => {\n  // Use AmericanConfig directly since it already has the draw rules enabled\n  const testConfig: VariantConfig = AmericanConfig;\n\n  describe(\"serializeBoard\", () => {\n    it(\"should serialize board position correctly\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"regular\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const serialized = serializeBoard(board, \"red\");\n      expect(serialized).toContain(\"br\");\n      expect(serialized).toContain(\"rk\");\n      expect(serialized.endsWith(\":red\")).toBe(true);\n    });\n\n    it(\"should produce different serializations for different positions\", () => {\n      const board1: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board1[0][1] = { color: \"black\", type: \"regular\" };\n\n      const board2: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board2[0][3] = { color: \"black\", type: \"regular\" };\n\n      const serial1 = serializeBoard(board1, \"red\");\n      const serial2 = serializeBoard(board2, \"red\");\n\n      expect(serial1).not.toBe(serial2);\n    });\n\n    it(\"should include current player in serialization\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      const serialRed = serializeBoard(board, \"red\");\n      const serialBlack = serializeBoard(board, \"black\");\n\n      expect(serialRed.endsWith(\":red\")).toBe(true);\n      expect(serialBlack.endsWith(\":black\")).toBe(true);\n      expect(serialRed).not.toBe(serialBlack);\n    });\n  });\n\n  describe(\"updateDrawState\", () => {\n    it(\"should reset capture counter on capture move\", () => {\n      const state = createDrawState();\n      state.movesSinceCapture = 10;\n\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      const captureMove: Move = {\n        from: { row: 0, col: 0 },\n        to: { row: 2, col: 2 },\n        captures: [{ row: 1, col: 1 }],\n      };\n\n      const newState = updateDrawState(state, board, captureMove, \"red\", false);\n      expect(newState.movesSinceCapture).toBe(0);\n    });\n\n    it(\"should increment capture counter on non-capture move\", () => {\n      const state = createDrawState();\n      state.movesSinceCapture = 5;\n\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      const regularMove: Move = {\n        from: { row: 0, col: 0 },\n        to: { row: 1, col: 1 },\n      };\n\n      const newState = updateDrawState(state, board, regularMove, \"red\", false);\n      expect(newState.movesSinceCapture).toBe(6);\n    });\n\n    it(\"should reset promotion counter on promotion\", () => {\n      const state = createDrawState();\n      state.movesSincePromotion = 15;\n\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      const move: Move = {\n        from: { row: 6, col: 0 },\n        to: { row: 7, col: 1 },\n      };\n\n      const newState = updateDrawState(state, board, move, \"red\", true);\n      expect(newState.movesSincePromotion).toBe(0);\n    });\n\n    it(\"should track board positions\", () => {\n      const state = createDrawState();\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      const move: Move = {\n        from: { row: 0, col: 0 },\n        to: { row: 1, col: 1 },\n      };\n\n      const newState = updateDrawState(state, board, move, \"red\", false);\n      expect(newState.boardPositions.length).toBe(1);\n      expect(newState.positionCounts.size).toBe(1);\n    });\n\n    it(\"should count position repetitions\", () => {\n      let state = createDrawState();\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      const move: Move = {\n        from: { row: 0, col: 0 },\n        to: { row: 1, col: 1 },\n      };\n\n      // Same position three times\n      state = updateDrawState(state, board, move, \"red\", false);\n      state = updateDrawState(state, board, move, \"red\", false);\n      state = updateDrawState(state, board, move, \"red\", false);\n\n      const position = serializeBoard(board, \"red\");\n      expect(state.positionCounts.get(position)).toBe(3);\n    });\n  });\n\n  describe(\"checkThreefoldRepetition\", () => {\n    it(\"should detect threefold repetition\", () => {\n      const state = createDrawState();\n      const position = \"test-position\";\n      state.positionCounts.set(position, 3);\n\n      const result = checkThreefoldRepetition(state, testConfig);\n      expect(result).toBe(true);\n    });\n\n    it(\"should not detect repetition below limit\", () => {\n      const state = createDrawState();\n      const position = \"test-position\";\n      state.positionCounts.set(position, 2);\n\n      const result = checkThreefoldRepetition(state, testConfig);\n      expect(result).toBe(false);\n    });\n\n    it(\"should respect custom repetition limit\", () => {\n      const state = createDrawState();\n      const position = \"test-position\";\n      state.positionCounts.set(position, 4);\n\n      const config = { ...testConfig };\n      config.draws.repetitionLimit = 5;\n\n      const result = checkThreefoldRepetition(state, config);\n      expect(result).toBe(false);\n\n      state.positionCounts.set(position, 5);\n      const result2 = checkThreefoldRepetition(state, config);\n      expect(result2).toBe(true);\n    });\n  });\n\n  describe(\"checkFortyMoveRule\", () => {\n    it(\"should detect forty-move rule violation\", () => {\n      const state = createDrawState();\n      state.movesSinceCapture = 80;\n      state.movesSincePromotion = 80;\n\n      const result = checkFortyMoveRule(state, testConfig);\n      expect(result).toBe(true);\n    });\n\n    it(\"should not trigger before limit\", () => {\n      const state = createDrawState();\n      state.movesSinceCapture = 79;\n      state.movesSincePromotion = 79;\n\n      const result = checkFortyMoveRule(state, testConfig);\n      expect(result).toBe(false);\n    });\n\n    it(\"should require both counters to exceed limit\", () => {\n      const state = createDrawState();\n      state.movesSinceCapture = 80;\n      state.movesSincePromotion = 50;\n\n      const result = checkFortyMoveRule(state, testConfig);\n      expect(result).toBe(false);\n    });\n\n    it(\"should return false if rule is disabled\", () => {\n      const state = createDrawState();\n      state.movesSinceCapture = 100;\n      state.movesSincePromotion = 100;\n\n      const config = { ...testConfig };\n      config.draws.fortyMoveRule = false;\n\n      const result = checkFortyMoveRule(state, config);\n      expect(result).toBe(false);\n    });\n  });\n\n  describe(\"checkTwentyFiveMoveRule\", () => {\n    it(\"should detect twenty-five move rule in king endgame\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const state = createDrawState();\n      state.movesSinceCapture = 50;\n\n      const result = checkTwentyFiveMoveRule(board, state, testConfig);\n      expect(result).toBe(true);\n    });\n\n    it(\"should not apply with regular pieces present\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n      board[3][4] = { color: \"red\", type: \"regular\" };\n\n      const state = createDrawState();\n      state.movesSinceCapture = 50;\n\n      const result = checkTwentyFiveMoveRule(board, state, testConfig);\n      expect(result).toBe(false);\n    });\n\n    it(\"should not trigger before limit in king endgame\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const state = createDrawState();\n      state.movesSinceCapture = 49;\n\n      const result = checkTwentyFiveMoveRule(board, state, testConfig);\n      expect(result).toBe(false);\n    });\n  });\n\n  describe(\"checkInsufficientMaterial\", () => {\n    it(\"should detect king vs king\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const result = checkInsufficientMaterial(board, testConfig);\n      expect(result).toBe(true);\n    });\n\n    it(\"should detect two kings vs one king\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n      board[4][3] = { color: \"red\", type: \"king\" };\n\n      const result = checkInsufficientMaterial(board, testConfig);\n      expect(result).toBe(true);\n    });\n\n    it(\"should not detect with sufficient material\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[0][3] = { color: \"black\", type: \"regular\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const result = checkInsufficientMaterial(board, testConfig);\n      expect(result).toBe(false);\n    });\n\n    it(\"should detect three kings vs one on large board\", () => {\n      const board: Board = Array(10)\n        .fill(null)\n        .map(() => Array(10).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[9][8] = { color: \"red\", type: \"king\" };\n      board[5][4] = { color: \"red\", type: \"king\" };\n      board[6][5] = { color: \"red\", type: \"king\" };\n\n      const config = { ...testConfig };\n      config.board.size = 10;\n\n      const result = checkInsufficientMaterial(board, config);\n      expect(result).toBe(true);\n    });\n\n    it(\"should not detect three kings vs one on small board\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n      board[5][4] = { color: \"red\", type: \"king\" };\n      board[6][5] = { color: \"red\", type: \"king\" };\n\n      // Three vs one is actually insufficient on 8x8\n      const result = checkInsufficientMaterial(board, testConfig);\n      expect(result).toBe(true);\n    });\n  });\n\n  describe(\"checkDrawConditions\", () => {\n    it(\"should detect threefold repetition draw\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"regular\" };\n      board[7][6] = { color: \"red\", type: \"regular\" };\n      const state = createDrawState();\n      state.positionCounts.set(\"test-position\", 3);\n\n      const result = checkDrawConditions(board, state, testConfig);\n      expect(result).toBe(\"draw\");\n    });\n\n    it(\"should detect forty-move rule draw\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"regular\" };\n      board[7][6] = { color: \"red\", type: \"regular\" };\n      const state = createDrawState();\n      state.movesSinceCapture = 80;\n      state.movesSincePromotion = 80;\n\n      const result = checkDrawConditions(board, state, testConfig);\n      expect(result).toBe(\"draw\");\n    });\n\n    it(\"should detect insufficient material draw\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const state = createDrawState();\n\n      const result = checkDrawConditions(board, state, testConfig);\n      expect(result).toBe(\"draw\");\n    });\n\n    it(\"should return null when no draw conditions met\", () => {\n      const board = createInitialBoard(testConfig);\n      const state = createDrawState();\n\n      const result = checkDrawConditions(board, state, testConfig);\n      expect(result).toBe(null);\n    });\n\n    it(\"should check conditions in priority order\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const state = createDrawState();\n      // Both repetition and insufficient material conditions\n      state.positionCounts.set(\"test-position\", 3);\n\n      // Should detect repetition first\n      const result = checkDrawConditions(board, state, testConfig);\n      expect(result).toBe(\"draw\");\n    });\n  });\n\n  describe(\"Integration with checkWinner\", () => {\n    it(\"should detect draw through checkWinner with draw state\", async () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][1] = { color: \"black\", type: \"king\" };\n      board[7][6] = { color: \"red\", type: \"king\" };\n\n      const state = createDrawState();\n\n      // Import checkWinner from game-logic using import statement\n      const { checkWinner } = await import(\"./game-logic\");\n      const result = checkWinner(board, testConfig, state);\n      expect(result).toBe(\"draw\");\n    });\n\n    it(\"should prioritize win over draw\", async () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      // Red has no pieces\n      board[0][1] = { color: \"black\", type: \"king\" };\n\n      const state = createDrawState();\n      state.movesSinceCapture = 80; // Would be draw by forty-move rule\n\n      const { checkWinner } = await import(\"./game-logic\");\n      const result = checkWinner(board, testConfig, state);\n      expect(result).toBe(\"black\"); // Win takes precedence\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/__tests__/cross-variant.test.ts","messages":[{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":92,"column":5,"nodeType":"AwaitExpression","messageId":"await","endLine":92,"endColumn":52,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2086,2091],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":97,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":97,"endColumn":31,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2265,2270],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":113,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":113,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":115,"column":24,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":115,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":120,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":127,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":127,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":127,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":127,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":128,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":129,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":138,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":138,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":144,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":144,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":156,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":156,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":194,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":194,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":198,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":198,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":198,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":198,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":227,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":227,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":236,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":236,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":242,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":242,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":261,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":261,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":273,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":273,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":307,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":307,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":307,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":307,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":331,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":331,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":338,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":338,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":346,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":346,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":346,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":346,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":346,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":346,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":347,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":347,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ color: PieceColor; type: PieceType; }`.","line":348,"column":61,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":348,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [newRow] on an `error` typed value.","line":357,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":357,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [newCol] on an `error` typed value.","line":357,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":357,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":364,"column":29,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":364,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [r] on an `error` typed value.","line":370,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [c] on an `error` typed value.","line":370,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":370,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":389,"column":24,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":389,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":392,"column":21,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":392,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":392,"column":25,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":392,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":399,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":399,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":400,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":400,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":400,"column":31,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":400,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":401,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":401,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":401,"column":31,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":401,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":412,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":412,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":415,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":415,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":415,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":415,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":416,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":416,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":416,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":416,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":432,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":432,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":436,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":436,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":436,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":436,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":437,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":437,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":437,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":437,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":453,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":453,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":456,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":456,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":456,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":456,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":457,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":457,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":457,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":457,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":458,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":458,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":458,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":458,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":465,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":465,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":465,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":465,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":469,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":469,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":469,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":469,"endColumn":43},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":479,"column":24,"nodeType":"AwaitExpression","messageId":"await","endLine":479,"endColumn":67,"suggestions":[{"messageId":"removeAwait","fix":{"range":[15490,15495],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":503,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":503,"endColumn":31,"suggestions":[{"messageId":"removeAwait","fix":{"range":[16556,16561],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":504,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":504,"endColumn":45},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":509,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":509,"endColumn":31,"suggestions":[{"messageId":"removeAwait","fix":{"range":[16757,16762],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":510,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":510,"endColumn":41},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":515,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":515,"endColumn":31,"suggestions":[{"messageId":"removeAwait","fix":{"range":[16944,16949],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":516,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":516,"endColumn":41},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":524,"column":24,"nodeType":"AwaitExpression","messageId":"await","endLine":524,"endColumn":67,"suggestions":[{"messageId":"removeAwait","fix":{"range":[17247,17252],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":551,"column":11,"nodeType":"AwaitExpression","messageId":"await","endLine":551,"endColumn":35,"suggestions":[{"messageId":"removeAwait","fix":{"range":[18312,18317],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":552,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":552,"endColumn":51},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":567,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":567,"endColumn":31,"suggestions":[{"messageId":"removeAwait","fix":{"range":[18768,18773],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":574,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":574,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":584,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":584,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":585,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":585,"endColumn":46}],"suppressedMessages":[],"errorCount":85,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cross-variant test suite\n * Ensures game rules work consistently across all configurations\n */\n\nimport { describe, it, expect, beforeAll } from \"vitest\";\nimport { GameRules } from \"../game-rules\";\nimport { GameConfigLoader } from \"../config-loader\";\nimport type { Board, Move, PieceColor } from \"../../game-logic\";\n\n// Test data for all variants\nconst VARIANTS = [\"american\", \"brazilian\", \"international\"] as const;\ntype VariantName = (typeof VARIANTS)[number];\n\ninterface VariantTestCase {\n  variant: VariantName;\n  boardSize: number;\n  pieceCount: number;\n  startingRows: {\n    black: number[];\n    red: number[];\n  };\n  rules: {\n    backwardCapture: {\n      regular: boolean;\n      king: boolean;\n    };\n    flyingKings: boolean;\n    mandatoryCapture: boolean;\n    maximumCapture: boolean;\n    kingPriority: boolean;\n  };\n}\n\nconst VARIANT_TEST_CASES: VariantTestCase[] = [\n  {\n    variant: \"american\",\n    boardSize: 8,\n    pieceCount: 12,\n    startingRows: {\n      black: [0, 1, 2],\n      red: [5, 6, 7],\n    },\n    rules: {\n      backwardCapture: { regular: false, king: true },\n      flyingKings: false,\n      mandatoryCapture: true,\n      maximumCapture: false,\n      kingPriority: false,\n    },\n  },\n  {\n    variant: \"brazilian\",\n    boardSize: 8,\n    pieceCount: 12,\n    startingRows: {\n      black: [0, 1, 2],\n      red: [5, 6, 7],\n    },\n    rules: {\n      backwardCapture: { regular: true, king: true },\n      flyingKings: true,\n      mandatoryCapture: true,\n      maximumCapture: true,\n      kingPriority: true,\n    },\n  },\n  {\n    variant: \"international\",\n    boardSize: 10,\n    pieceCount: 20,\n    startingRows: {\n      black: [0, 1, 2, 3],\n      red: [6, 7, 8, 9],\n    },\n    rules: {\n      backwardCapture: { regular: true, king: true },\n      flyingKings: true,\n      mandatoryCapture: true,\n      maximumCapture: true,\n      kingPriority: true,\n    },\n  },\n];\n\ndescribe(\"Cross-Variant Tests\", () => {\n  // Store loaded rules for all variants\n  const variantRules = new Map<VariantName, GameRules>();\n\n  beforeAll(async () => {\n    // Preload all variants\n    await GameConfigLoader.preloadBuiltInVariants();\n\n    // Initialize rules for each variant\n    for (const variant of VARIANTS) {\n      const rules = new GameRules(variant);\n      await rules.initialize();\n      variantRules.set(variant, rules);\n    }\n  });\n\n  describe(\"Parameterized Tests - All Variants\", () => {\n    VARIANT_TEST_CASES.forEach((testCase) => {\n      describe(`${testCase.variant.toUpperCase()} variant`, () => {\n        let rules: GameRules;\n\n        beforeAll(() => {\n          rules = variantRules.get(testCase.variant)!;\n        });\n\n        it(\"should have correct board dimensions\", () => {\n          expect(rules.getBoardSize()).toBe(testCase.boardSize);\n          const board = rules.createInitialBoard();\n          expect(board).toHaveLength(testCase.boardSize);\n          expect(board[0]).toHaveLength(testCase.boardSize);\n        });\n\n        it(\"should have correct piece count\", () => {\n          expect(rules.getPieceCount()).toBe(testCase.pieceCount);\n          const board = rules.createInitialBoard();\n\n          let blackCount = 0;\n          let redCount = 0;\n\n          for (let row = 0; row < testCase.boardSize; row++) {\n            for (let col = 0; col < testCase.boardSize; col++) {\n              const piece = board[row]![col];\n              if (piece?.color === \"black\") blackCount++;\n              if (piece?.color === \"red\") redCount++;\n            }\n          }\n\n          expect(blackCount).toBe(testCase.pieceCount);\n          expect(redCount).toBe(testCase.pieceCount);\n        });\n\n        it(\"should place pieces in correct starting rows\", () => {\n          const board = rules.createInitialBoard();\n\n          // Check black pieces\n          for (const row of testCase.startingRows.black) {\n            let hasPieces = false;\n            for (let col = 0; col < testCase.boardSize; col++) {\n              if (board[row]![col]?.color === \"black\") {\n                hasPieces = true;\n                break;\n              }\n            }\n            expect(hasPieces).toBe(true);\n          }\n\n          // Check red pieces\n          for (const row of testCase.startingRows.red) {\n            let hasPieces = false;\n            for (let col = 0; col < testCase.boardSize; col++) {\n              if (board[row]![col]?.color === \"red\") {\n                hasPieces = true;\n                break;\n              }\n            }\n            expect(hasPieces).toBe(true);\n          }\n        });\n\n        it(\"should enforce backward capture rules correctly\", () => {\n          expect(\n            rules.canCaptureBackward({ color: \"red\", type: \"regular\" }),\n          ).toBe(testCase.rules.backwardCapture.regular);\n          expect(\n            rules.canCaptureBackward({ color: \"black\", type: \"regular\" }),\n          ).toBe(testCase.rules.backwardCapture.regular);\n          expect(rules.canCaptureBackward({ color: \"red\", type: \"king\" })).toBe(\n            testCase.rules.backwardCapture.king,\n          );\n        });\n\n        it(\"should enforce flying king rules\", () => {\n          expect(rules.canFlyAsKing()).toBe(testCase.rules.flyingKings);\n        });\n\n        it(\"should enforce capture priority rules\", () => {\n          expect(rules.isMandatoryCapture()).toBe(\n            testCase.rules.mandatoryCapture,\n          );\n          expect(rules.requiresMaximumCapture()).toBe(\n            testCase.rules.maximumCapture,\n          );\n          expect(rules.requiresKingPriority()).toBe(\n            testCase.rules.kingPriority,\n          );\n        });\n\n        it(\"should only allow pieces on dark squares\", () => {\n          const board = rules.createInitialBoard();\n\n          for (let row = 0; row < testCase.boardSize; row++) {\n            for (let col = 0; col < testCase.boardSize; col++) {\n              const piece = board[row]![col];\n              if (piece) {\n                // Pieces should only be on dark squares (where row + col is odd)\n                expect((row + col) % 2).toBe(1);\n              }\n            }\n          }\n        });\n\n        it(\"should handle promotion at correct rows\", () => {\n          // Red promotes at row 0\n          expect(\n            rules.shouldPromote({ color: \"red\", type: \"regular\" }, 0),\n          ).toBe(true);\n          expect(rules.shouldPromote({ color: \"red\", type: \"king\" }, 0)).toBe(\n            false,\n          );\n\n          // Black promotes at last row\n          const lastRow = testCase.boardSize - 1;\n          expect(\n            rules.shouldPromote({ color: \"black\", type: \"regular\" }, lastRow),\n          ).toBe(true);\n          expect(\n            rules.shouldPromote({ color: \"black\", type: \"king\" }, lastRow),\n          ).toBe(false);\n        });\n\n        it(\"should have symmetric initial board setup\", () => {\n          const board = rules.createInitialBoard();\n          const size = testCase.boardSize;\n\n          // Count pieces in each half\n          let topHalfPieces = 0;\n          let bottomHalfPieces = 0;\n\n          for (let row = 0; row < size / 2; row++) {\n            for (let col = 0; col < size; col++) {\n              if (board[row]![col]) topHalfPieces++;\n            }\n          }\n\n          for (let row = Math.ceil(size / 2); row < size; row++) {\n            for (let col = 0; col < size; col++) {\n              if (board[row]![col]) bottomHalfPieces++;\n            }\n          }\n\n          expect(topHalfPieces).toBe(testCase.pieceCount);\n          expect(bottomHalfPieces).toBe(testCase.pieceCount);\n        });\n      });\n    });\n  });\n\n  describe(\"Common Behaviors Across All Variants\", () => {\n    VARIANTS.forEach((variant) => {\n      describe(`${variant} - Common behaviors`, () => {\n        let rules: GameRules;\n        let board: Board;\n\n        beforeAll(async () => {\n          rules = variantRules.get(variant)!;\n          board = rules.createInitialBoard();\n        });\n\n        it(\"should not allow moves to occupied squares\", () => {\n          const size = rules.getBoardSize();\n\n          // Find a piece\n          let piecePos: { row: number; col: number } | null = null;\n          let occupiedPos: { row: number; col: number } | null = null;\n\n          for (let row = 0; row < size && !occupiedPos; row++) {\n            for (let col = 0; col < size && !occupiedPos; col++) {\n              if (board[row]![col]) {\n                if (!piecePos) {\n                  piecePos = { row, col };\n                } else {\n                  occupiedPos = { row, col };\n                }\n              }\n            }\n          }\n\n          if (piecePos && occupiedPos) {\n            const move: Move = {\n              from: piecePos,\n              to: occupiedPos,\n            };\n            expect(rules.validateMove(board, move)).toBe(false);\n          }\n        });\n\n        it(\"should not allow moves off the board\", () => {\n          const move: Move = {\n            from: { row: 0, col: 0 },\n            to: { row: -1, col: -1 },\n          };\n          expect(rules.validateMove(board, move)).toBe(false);\n        });\n\n        it(\"should not allow non-diagonal moves\", () => {\n          const size = rules.getBoardSize();\n\n          // Find a piece\n          let piecePos: { row: number; col: number } | null = null;\n          for (let row = 0; row < size && !piecePos; row++) {\n            for (let col = 0; col < size && !piecePos; col++) {\n              if (board[row]![col]) {\n                piecePos = { row, col };\n              }\n            }\n          }\n\n          if (piecePos) {\n            // Horizontal move\n            const horizontalMove: Move = {\n              from: piecePos,\n              to: { row: piecePos.row, col: (piecePos.col + 2) % size },\n            };\n            expect(rules.validateMove(board, horizontalMove)).toBe(false);\n\n            // Vertical move\n            const verticalMove: Move = {\n              from: piecePos,\n              to: { row: (piecePos.row + 2) % size, col: piecePos.col },\n            };\n            expect(rules.validateMove(board, verticalMove)).toBe(false);\n          }\n        });\n\n        it(\"should maintain piece count after non-capture moves\", () => {\n          const testBoard = rules.createInitialBoard();\n          const size = rules.getBoardSize();\n\n          // Count initial pieces\n          let initialCount = 0;\n          for (let row = 0; row < size; row++) {\n            for (let col = 0; col < size; col++) {\n              if (testBoard[row]![col]) initialCount++;\n            }\n          }\n\n          // Find and make a valid non-capture move\n          let moveFound = false;\n          for (let row = 0; row < size && !moveFound; row++) {\n            for (let col = 0; col < size && !moveFound; col++) {\n              const piece = testBoard[row]![col];\n              if (piece && piece.color === \"red\") {\n                const directions = rules.getValidDirections(piece);\n                for (const [dr, dc] of directions) {\n                  const newRow = row + dr;\n                  const newCol = col + dc;\n                  if (\n                    newRow >= 0 &&\n                    newRow < size &&\n                    newCol >= 0 &&\n                    newCol < size &&\n                    !testBoard[newRow]![newCol]\n                  ) {\n                    const move: Move = {\n                      from: { row, col },\n                      to: { row: newRow, col: newCol },\n                    };\n                    if (rules.validateMove(testBoard, move)) {\n                      const newBoard = rules.makeMove(testBoard, move);\n\n                      // Count pieces after move\n                      let finalCount = 0;\n                      for (let r = 0; r < size; r++) {\n                        for (let c = 0; c < size; c++) {\n                          if (newBoard[r]![c]) finalCount++;\n                        }\n                      }\n\n                      expect(finalCount).toBe(initialCount);\n                      moveFound = true;\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        it(\"should correctly change piece type on promotion\", () => {\n          const size = rules.getBoardSize();\n          const testBoard: Board = Array(size)\n            .fill(null)\n            .map(() => Array(size).fill(null));\n\n          // Place a red piece one row away from promotion\n          testBoard[1]![0] = { color: \"red\", type: \"regular\" };\n\n          const move: Move = {\n            from: { row: 1, col: 0 },\n            to: { row: 0, col: 1 },\n          };\n\n          const newBoard = rules.makeMove(testBoard, move);\n          expect(newBoard[0]![1]?.type).toBe(\"king\");\n          expect(newBoard[0]![1]?.color).toBe(\"red\");\n        });\n      });\n    });\n  });\n\n  describe(\"Variant-Specific Capture Sequences\", () => {\n    it(\"American: should not allow regular pieces to capture backward\", async () => {\n      const rules = variantRules.get(\"american\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Set up backward capture scenario\n      board[4]![3] = { color: \"red\", type: \"regular\" };\n      board[3]![4] = { color: \"black\", type: \"regular\" };\n\n      // Try backward capture (should fail for American regular pieces)\n      const backwardCapture: Move = {\n        from: { row: 4, col: 3 },\n        to: { row: 2, col: 5 },\n        captures: [{ row: 3, col: 4 }],\n      };\n\n      expect(rules.validateMove(board, backwardCapture)).toBe(false);\n    });\n\n    it(\"Brazilian: should allow regular pieces to capture backward\", async () => {\n      const rules = variantRules.get(\"brazilian\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Set up backward capture scenario for red piece\n      // Red piece moves UP (backward) to capture\n      board[4]![3] = { color: \"red\", type: \"regular\" };\n      board[3]![4] = { color: \"black\", type: \"regular\" };\n\n      // Try backward capture (should succeed for Brazilian)\n      const backwardCapture: Move = {\n        from: { row: 4, col: 3 },\n        to: { row: 2, col: 5 },\n        captures: [{ row: 3, col: 4 }],\n      };\n\n      expect(rules.validateMove(board, backwardCapture)).toBe(true);\n    });\n\n    it(\"International: should enforce maximum capture rule\", async () => {\n      const rules = variantRules.get(\"international\")!;\n      const board: Board = Array(10)\n        .fill(null)\n        .map(() => Array(10).fill(null));\n\n      // Set up scenario with multiple capture options\n      board[4]![3] = { color: \"red\", type: \"regular\" };\n      board[3]![4] = { color: \"black\", type: \"regular\" };\n      board[5]![4] = { color: \"black\", type: \"regular\" };\n\n      // This should be handled by maximum capture logic\n      const captures = rules.findValidMoves(board, \"red\");\n\n      // Verify that multi-capture sequences are prioritized\n      const hasCaptures = captures.some(\n        (m) => m.captures && m.captures.length > 0,\n      );\n      if (hasCaptures) {\n        const nonCaptures = captures.filter(\n          (m) => !m.captures || m.captures.length === 0,\n        );\n        expect(nonCaptures).toHaveLength(0); // No non-captures when captures available\n      }\n    });\n  });\n\n  describe(\"Configuration Consistency\", () => {\n    it(\"should have valid configuration for all variants\", async () => {\n      for (const variant of VARIANTS) {\n        const config = await GameConfigLoader.loadVariant(variant);\n\n        // Validate basic structure\n        expect(config.metadata.name).toBe(variant);\n        expect(config.board.size).toBeGreaterThan(0);\n        expect(config.board.pieceCount).toBeGreaterThan(0);\n\n        // Validate arrays are properly defined\n        expect(config.board.startingRows.black).toBeInstanceOf(Array);\n        expect(config.board.startingRows.red).toBeInstanceOf(Array);\n        expect(config.board.startingRows.black.length).toBeGreaterThan(0);\n        expect(config.board.startingRows.red.length).toBeGreaterThan(0);\n\n        // Ensure no overlap in starting rows\n        const blackRows = new Set(config.board.startingRows.black);\n        const redRows = new Set(config.board.startingRows.red);\n        const intersection = [...blackRows].filter((row) => redRows.has(row));\n        expect(intersection).toHaveLength(0);\n      }\n    });\n\n    it(\"should handle variant switching correctly\", async () => {\n      // Create a game with American rules\n      let rules = new GameRules(\"american\");\n      await rules.initialize();\n      let board = rules.createInitialBoard();\n      expect(board).toHaveLength(8);\n\n      // Switch to International rules\n      rules = new GameRules(\"international\");\n      await rules.initialize();\n      board = rules.createInitialBoard();\n      expect(board).toHaveLength(10);\n\n      // Switch back to American\n      rules = new GameRules(\"american\");\n      await rules.initialize();\n      board = rules.createInitialBoard();\n      expect(board).toHaveLength(8);\n    });\n  });\n\n  describe(\"Tournament Mode Compliance\", () => {\n    VARIANTS.forEach((variant) => {\n      it(`${variant}: should have tournament configuration`, async () => {\n        const config = await GameConfigLoader.loadVariant(variant);\n\n        if (config.tournament) {\n          // Basic tournament rules\n          expect(config.tournament.touchMove).toBeDefined();\n          expect(config.tournament.notation.required).toBeDefined();\n\n          // Time controls\n          if (config.tournament.timeControls) {\n            expect(config.tournament.timeControls.enabled).toBeDefined();\n            if (config.tournament.timeControls.enabled) {\n              expect(config.tournament.timeControls.classical).toBeDefined();\n              expect(config.tournament.timeControls.rapid).toBeDefined();\n              expect(config.tournament.timeControls.blitz).toBeDefined();\n            }\n          }\n        }\n      });\n    });\n  });\n\n  describe(\"Performance and Memory Tests\", () => {\n    it(\"should handle rapid configuration switching without memory leaks\", async () => {\n      // Switch between variants multiple times\n      for (let i = 0; i < 10; i++) {\n        for (const variant of VARIANTS) {\n          const rules = new GameRules(variant);\n          await rules.initialize();\n          const board = rules.createInitialBoard();\n\n          // Make a few moves\n          const moves = rules.findValidMoves(board, \"red\");\n          if (moves.length > 0) {\n            rules.makeMove(board, moves[0]);\n          }\n        }\n      }\n\n      // Clear cache and verify it works\n      GameConfigLoader.clearCache();\n\n      // Should still work after cache clear\n      const rules = new GameRules(\"american\");\n      await rules.initialize();\n      expect(rules.getBoardSize()).toBe(8);\n    });\n\n    it(\"should efficiently handle large numbers of moves\", async () => {\n      for (const variant of VARIANTS) {\n        const rules = variantRules.get(variant)!;\n        let board = rules.createInitialBoard();\n        let moveCount = 0;\n        let currentPlayer: PieceColor = \"red\";\n\n        // Play up to 100 moves or until no moves available\n        while (moveCount < 100) {\n          const moves = rules.findValidMoves(board, currentPlayer);\n          if (moves.length === 0) break;\n\n          // Make a random move\n          const move = moves[Math.floor(Math.random() * moves.length)]!;\n          board = rules.makeMove(board, move);\n\n          currentPlayer = currentPlayer === \"red\" ? \"black\" : \"red\";\n          moveCount++;\n        }\n\n        // Should handle many moves without issues\n        expect(moveCount).toBeGreaterThan(0);\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/__tests__/edge-cases.test.ts","messages":[{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":16,"column":5,"nodeType":"AwaitExpression","messageId":"await","endLine":16,"endColumn":52,"suggestions":[{"messageId":"removeAwait","fix":{"range":[528,533],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":19,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":19,"endColumn":31,"suggestions":[{"messageId":"removeAwait","fix":{"range":[665,670],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":29,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":29,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":32,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":32,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":32,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":33,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":33,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":33,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":33,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":34,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":34,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":34,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":35,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":35,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":35,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":35,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":45,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":46,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":46,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":46,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":46,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":50,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":51,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":51,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":60,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":60,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":63,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":63,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":63,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":63,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":64,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":64,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":64,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":64,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":65,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":65,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":65,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":65,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":72,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":71,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":71,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":71,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":71,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":84,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":84,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [9] on an `error` typed value.","line":87,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":87,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":87,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":87,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":88,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":88,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":88,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":88,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":108,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":108,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":111,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":111,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":111,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":111,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":112,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":112,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":112,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":112,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":120,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":123,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":123,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":123,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":123,"endColumn":28},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":126,"column":22,"nodeType":"AwaitExpression","messageId":"await","endLine":126,"endColumn":68,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4313,4318],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":131,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":131,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":142,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":142,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":144,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":144,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":144,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":144,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":154,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":154,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":155,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":155,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [move.to.col] on an `error` typed value.","line":155,"column":31,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":155,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":166,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":166,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":169,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":169,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":169,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":169,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":170,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":170,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":170,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":170,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":171,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":171,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":171,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":171,"endColumn":18},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":178,"column":22,"nodeType":"AwaitExpression","messageId":"await","endLine":178,"endColumn":68,"suggestions":[{"messageId":"removeAwait","fix":{"range":[6217,6222],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":188,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":188,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":191,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":191,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":191,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":191,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":192,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":192,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":192,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":192,"endColumn":18},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":207,"column":22,"nodeType":"AwaitExpression","messageId":"await","endLine":207,"endColumn":68,"suggestions":[{"messageId":"removeAwait","fix":{"range":[7383,7388],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":224,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":224,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":226,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":226,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":226,"column":19,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":226,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":240,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":240,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":255,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":255,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":263,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":263,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":263,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":263,"endColumn":32},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'move' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":270,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":277,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":281,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":279,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":280,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":295,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":295,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [corner.row] on an `error` typed value.","line":308,"column":19,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":308,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [corner.col] on an `error` typed value.","line":308,"column":32,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":308,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":312,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":312,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [corner.row] on an `error` typed value.","line":328,"column":19,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":328,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [corner.col] on an `error` typed value.","line":328,"column":32,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":328,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":338,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":338,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [edgeRow] on an `error` typed value.","line":345,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":345,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [edgeCol] on an `error` typed value.","line":345,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":345,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":349,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":349,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":349,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":349,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":357,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":357,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":358,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":359,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":360,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":374,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":374,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":377,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":377,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":377,"column":19,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":377,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":378,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":378,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":378,"column":19,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":378,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":379,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":379,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":379,"column":19,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":379,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":380,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":380,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":380,"column":19,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":380,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":387,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":387,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":390,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":390,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":404,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":404,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":407,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":407,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":407,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":407,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":408,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":408,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":408,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":408,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":409,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":409,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":409,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":409,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":410,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":410,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":410,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":410,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":411,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":411,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":411,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":411,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":417,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":417,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":417,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":417,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error array type.","line":424,"column":11,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":424,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":424,"column":38,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":424,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":424,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":424,"endColumn":48},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'optimalMoves' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":426,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":426,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":427,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":427,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":431,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":431,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":442,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":442,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":445,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":445,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":445,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":445,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":445,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":445,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":445,"column":54,"nodeType":"ArrayExpression","messageId":"unsafeReturn","endLine":445,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":445,"column":55,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":445,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":450,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":450,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":453,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":453,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `error` typed value.","line":454,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":454,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":454,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":454,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `error` typed value.","line":455,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":455,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [j] on an `error` typed value.","line":455,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":455,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `error` typed value.","line":455,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":455,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [j] on an `error` typed value.","line":455,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":455,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":461,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":461,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `error` typed value.","line":462,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":462,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":462,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":462,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `error` typed value.","line":463,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":463,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [j] on an `error` typed value.","line":463,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":463,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `error` typed value.","line":463,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":463,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [j] on an `error` typed value.","line":463,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":463,"endColumn":58},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":476,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":476,"endColumn":39,"suggestions":[{"messageId":"removeAwait","fix":{"range":[17047,17052],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":477,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":477,"endColumn":63},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":480,"column":7,"nodeType":"AwaitExpression","messageId":"await","endLine":480,"endColumn":44,"suggestions":[{"messageId":"removeAwait","fix":{"range":[17217,17222],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":481,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":481,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":484,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":484,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":485,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":485,"endColumn":39},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'internationalMoves' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":489,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":489,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":499,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":499,"endColumn":76}],"suppressedMessages":[],"errorCount":150,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Edge case tests for game engine\n * Tests complex scenarios and boundary conditions across variants\n */\n\nimport { describe, it, expect, beforeAll } from \"vitest\";\nimport { GameRules } from \"../game-rules\";\nimport { GameConfigLoader } from \"../config-loader\";\nimport type { Board, Move } from \"../../game-logic\";\n\ndescribe(\"Edge Cases and Complex Scenarios\", () => {\n  const variants = [\"american\", \"brazilian\", \"international\"] as const;\n  const variantRules = new Map<string, GameRules>();\n\n  beforeAll(async () => {\n    await GameConfigLoader.preloadBuiltInVariants();\n    for (const variant of variants) {\n      const rules = new GameRules(variant);\n      await rules.initialize();\n      variantRules.set(variant, rules);\n    }\n  });\n\n  describe(\"Multi-Jump Capture Sequences\", () => {\n    it(\"should handle triple jump correctly\", async () => {\n      const rules = variantRules.get(\"american\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Set up triple jump scenario\n      board[7]![0] = { color: \"red\", type: \"regular\" };\n      board[6]![1] = { color: \"black\", type: \"regular\" };\n      board[4]![3] = { color: \"black\", type: \"regular\" };\n      board[2]![5] = { color: \"black\", type: \"regular\" };\n\n      // First jump\n      const move: Move = {\n        from: { row: 7, col: 0 },\n        to: { row: 5, col: 2 },\n        captures: [{ row: 6, col: 1 }],\n      };\n\n      expect(rules.validateMove(board, move)).toBe(true);\n      const newBoard = rules.makeMove(board, move);\n      expect(newBoard[6]![1]).toBeNull(); // Piece captured\n\n      // Should require continuation\n      const continuations = rules.findValidMoves(newBoard, \"red\");\n      const captureMove = continuations.find(\n        (m) => m.captures && m.captures.length > 0,\n      );\n      expect(captureMove).toBeDefined();\n    });\n\n    it(\"Brazilian: should prioritize king captures in maximum capture\", async () => {\n      const rules = variantRules.get(\"brazilian\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Scenario: choice between capturing a regular piece or a king\n      board[4]![3] = { color: \"red\", type: \"regular\" };\n      board[3]![2] = { color: \"black\", type: \"regular\" };\n      board[3]![4] = { color: \"black\", type: \"king\" }; // King to capture\n\n      const moves = rules.findValidMoves(board, \"red\");\n\n      // When king priority is enabled, capturing the king should be prioritized\n      const capturingKing = moves.find((m) =>\n        m.captures?.some((c) => c.row === 3 && c.col === 4),\n      );\n\n      if (rules.requiresKingPriority() && capturingKing) {\n        // If there's a move that captures a king, it should be preferred\n        expect(capturingKing).toBeDefined();\n      }\n    });\n\n    it(\"International: should handle flying king captures correctly\", async () => {\n      const rules = variantRules.get(\"international\")!;\n      const board: Board = Array(10)\n        .fill(null)\n        .map(() => Array(10).fill(null));\n\n      // Flying king scenario\n      board[9]![0] = { color: \"red\", type: \"king\" };\n      board[5]![4] = { color: \"black\", type: \"regular\" };\n\n      // King should be able to fly and capture\n      const move: Move = {\n        from: { row: 9, col: 0 },\n        to: { row: 4, col: 5 },\n        captures: [{ row: 5, col: 4 }],\n      };\n\n      if (rules.canFlyAsKing()) {\n        expect(rules.validateMove(board, move)).toBe(true);\n      }\n    });\n  });\n\n  describe(\"Promotion Edge Cases\", () => {\n    it(\"should handle promotion during capture sequence correctly\", async () => {\n      const rules = variantRules.get(\"american\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Red piece about to capture and promote\n      board[2]![3] = { color: \"red\", type: \"regular\" };\n      board[1]![4] = { color: \"black\", type: \"regular\" };\n\n      const move: Move = {\n        from: { row: 2, col: 3 },\n        to: { row: 0, col: 5 },\n        captures: [{ row: 1, col: 4 }],\n      };\n\n      const newBoard = rules.makeMove(board, move);\n\n      // Should be promoted to king\n      expect(newBoard[0]![5]?.type).toBe(\"king\");\n\n      // Check if capture chain stops on promotion (variant-specific)\n      const config = await GameConfigLoader.loadVariant(\"american\");\n      if (config.capture.promotion.stopsCaptureChain) {\n        // Should not continue capture chain after promotion\n        const moves = rules.findValidMoves(newBoard, \"red\");\n        const hasMoreCaptures = moves.some(\n          (m) => m.captures && m.captures.length > 0,\n        );\n        expect(hasMoreCaptures).toBe(false);\n      }\n    });\n\n    it(\"should handle simultaneous promotion possibility\", async () => {\n      // When a piece could promote by moving to multiple squares\n      const rules = variantRules.get(\"american\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      board[1]![2] = { color: \"red\", type: \"regular\" };\n\n      // Two possible promotion squares\n      const moves = [\n        { from: { row: 1, col: 2 }, to: { row: 0, col: 1 } },\n        { from: { row: 1, col: 2 }, to: { row: 0, col: 3 } },\n      ];\n\n      for (const move of moves) {\n        if (rules.validateMove(board, move)) {\n          const newBoard = rules.makeMove(board, move);\n          expect(newBoard[0]![move.to.col]?.type).toBe(\"king\");\n        }\n      }\n    });\n  });\n\n  describe(\"Stalemate and Draw Conditions\", () => {\n    it(\"should detect stalemate when no moves available\", async () => {\n      const rules = variantRules.get(\"american\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Minimal endgame: one piece blocked\n      board[0]![1] = { color: \"red\", type: \"regular\" };\n      board[1]![0] = { color: \"black\", type: \"regular\" };\n      board[1]![2] = { color: \"black\", type: \"regular\" };\n\n      const moves = rules.findValidMoves(board, \"red\");\n      expect(moves.length).toBe(0); // Red has no valid moves\n\n      // This should be a draw by stalemate\n      const result = rules.checkDrawCondition(board, []);\n      const config = await GameConfigLoader.loadVariant(\"american\");\n      if (config.draws.staleMate) {\n        expect(result).toBe(\"draw\");\n      }\n    });\n\n    it(\"should detect draw by repetition\", async () => {\n      const rules = variantRules.get(\"american\")!;\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Two kings that can move back and forth\n      board[3]![2] = { color: \"red\", type: \"king\" };\n      board[5]![4] = { color: \"black\", type: \"king\" };\n\n      // Simulate repetitive moves\n      const moveHistory: Move[] = [\n        { from: { row: 3, col: 2 }, to: { row: 4, col: 3 } },\n        { from: { row: 5, col: 4 }, to: { row: 4, col: 5 } },\n        { from: { row: 4, col: 3 }, to: { row: 3, col: 2 } },\n        { from: { row: 4, col: 5 }, to: { row: 5, col: 4 } },\n        { from: { row: 3, col: 2 }, to: { row: 4, col: 3 } },\n        { from: { row: 5, col: 4 }, to: { row: 4, col: 5 } },\n        { from: { row: 4, col: 3 }, to: { row: 3, col: 2 } },\n        { from: { row: 4, col: 5 }, to: { row: 5, col: 4 } },\n      ];\n\n      const result = rules.checkDrawCondition(board, moveHistory);\n      const config = await GameConfigLoader.loadVariant(\"american\");\n      if (\n        config.draws.repetitionLimit &&\n        moveHistory.length >= config.draws.repetitionLimit * 2\n      ) {\n        expect(result).toBe(\"draw\");\n      }\n    });\n  });\n\n  describe(\"Invalid Move Scenarios\", () => {\n    variants.forEach((variant) => {\n      it(`${variant}: should reject moves with invalid captures`, async () => {\n        const rules = variantRules.get(variant)!;\n        const size = rules.getBoardSize();\n        const board: Board = Array(size)\n          .fill(null)\n          .map(() => Array(size).fill(null));\n\n        board[4]![3] = { color: \"red\", type: \"regular\" };\n\n        // Invalid capture: no piece to capture\n        const invalidCapture: Move = {\n          from: { row: 4, col: 3 },\n          to: { row: 2, col: 5 },\n          captures: [{ row: 3, col: 4 }], // No piece here\n        };\n\n        expect(rules.validateMove(board, invalidCapture)).toBe(false);\n      });\n\n      it(`${variant}: should reject moves from empty squares`, async () => {\n        const rules = variantRules.get(variant)!;\n        const board = rules.createInitialBoard();\n\n        // Try to move from an empty square\n        const size = rules.getBoardSize();\n        const emptyRow = Math.floor(size / 2);\n        const move: Move = {\n          from: { row: emptyRow, col: 0 },\n          to: { row: emptyRow + 1, col: 1 },\n        };\n\n        expect(rules.validateMove(board, move)).toBe(false);\n      });\n\n      it(`${variant}: should reject moving opponent's pieces`, async () => {\n        const rules = variantRules.get(variant)!;\n        const board = rules.createInitialBoard();\n\n        // Find a black piece and try to move it as red\n        let blackPiecePos: { row: number; col: number } | null = null;\n        const size = rules.getBoardSize();\n\n        for (let row = 0; row < size && !blackPiecePos; row++) {\n          for (let col = 0; col < size && !blackPiecePos; col++) {\n            if (board[row]![col]?.color === \"black\") {\n              blackPiecePos = { row, col };\n            }\n          }\n        }\n\n        if (blackPiecePos) {\n          const move: Move = {\n            from: blackPiecePos,\n            to: { row: blackPiecePos.row + 1, col: blackPiecePos.col + 1 },\n          };\n\n          // Assuming it's red's turn\n          const moves = rules.findValidMoves(board, \"red\");\n          const illegalMove = moves.find(\n            (m) =>\n              m.from.row === blackPiecePos.row &&\n              m.from.col === blackPiecePos.col,\n          );\n          expect(illegalMove).toBeUndefined();\n        }\n      });\n    });\n  });\n\n  describe(\"Board Boundary Conditions\", () => {\n    variants.forEach((variant) => {\n      it(`${variant}: should handle corner positions correctly`, async () => {\n        const rules = variantRules.get(variant)!;\n        const size = rules.getBoardSize();\n        const board: Board = Array(size)\n          .fill(null)\n          .map(() => Array(size).fill(null));\n\n        // Place pieces in all corners\n        const corners = [\n          { row: 0, col: 0 },\n          { row: 0, col: size - 1 },\n          { row: size - 1, col: 0 },\n          { row: size - 1, col: size - 1 },\n        ];\n\n        for (const corner of corners) {\n          // Only place on valid (dark) squares\n          if ((corner.row + corner.col) % 2 === 1) {\n            board[corner.row]![corner.col] = { color: \"red\", type: \"king\" };\n\n            const moves = rules.findValidMoves(board, \"red\");\n            const cornerMoves = moves.filter(\n              (m) => m.from.row === corner.row && m.from.col === corner.col,\n            );\n\n            // Kings in corners should have limited moves\n            // With flying kings, they can move multiple squares along the diagonal\n            // A corner piece has only one diagonal available\n            if (rules.canFlyAsKing()) {\n              // Flying king can move multiple squares along the single diagonal\n              expect(cornerMoves.length).toBeGreaterThan(0);\n              expect(cornerMoves.length).toBeLessThan(size); // Less than board size\n            } else {\n              // Non-flying king has at most 1 move from corner\n              expect(cornerMoves.length).toBeLessThanOrEqual(1);\n            }\n\n            // Clear the corner for next test\n            board[corner.row]![corner.col] = null;\n          }\n        }\n      });\n\n      it(`${variant}: should handle edge positions correctly`, async () => {\n        const rules = variantRules.get(variant)!;\n        const size = rules.getBoardSize();\n        const board: Board = Array(size)\n          .fill(null)\n          .map(() => Array(size).fill(null));\n\n        // Place piece on edge (not corner)\n        const edgeRow = 0;\n        const edgeCol = Math.floor(size / 2) | 1; // Ensure odd for dark square\n\n        if ((edgeRow + edgeCol) % 2 === 1) {\n          board[edgeRow]![edgeCol] = { color: \"black\", type: \"regular\" };\n\n          const moves = rules.findValidMoves(board, \"black\");\n          const edgeMoves = moves.filter(\n            (m) => m.from.row === edgeRow && m.from.col === edgeCol,\n          );\n\n          // Regular pieces on top edge should have forward moves\n          expect(edgeMoves.length).toBeGreaterThan(0);\n\n          // All moves should be within bounds\n          for (const move of edgeMoves) {\n            expect(move.to.row).toBeGreaterThanOrEqual(0);\n            expect(move.to.row).toBeLessThan(size);\n            expect(move.to.col).toBeGreaterThanOrEqual(0);\n            expect(move.to.col).toBeLessThan(size);\n          }\n        }\n      });\n    });\n  });\n\n  describe(\"Complex Capture Priority Scenarios\", () => {\n    it(\"Brazilian/International: should enforce maximum capture over simple moves\", async () => {\n      for (const variant of [\"brazilian\", \"international\"]) {\n        const rules = variantRules.get(variant)!;\n        const size = rules.getBoardSize();\n        const board: Board = Array(size)\n          .fill(null)\n          .map(() => Array(size).fill(null));\n\n        // Set up: red can either move or capture\n        board[4]![3] = { color: \"red\", type: \"regular\" };\n        board[3]![4] = { color: \"black\", type: \"regular\" };\n        board[5]![2] = null; // Simple move available\n        board[2]![5] = null; // Capture destination\n\n        const moves = rules.findValidMoves(board, \"red\");\n\n        if (rules.requiresMaximumCapture()) {\n          // Should only return capture moves, not simple moves\n          const simpleMoves = moves.filter(\n            (m) => !m.captures || m.captures.length === 0,\n          );\n          const captureMoves = moves.filter(\n            (m) => m.captures && m.captures.length > 0,\n          );\n\n          if (captureMoves.length > 0) {\n            expect(simpleMoves).toHaveLength(0);\n          }\n        }\n      }\n    });\n\n    it(\"should handle capture chains with multiple branches\", async () => {\n      const rules = variantRules.get(\"international\")!;\n      const board: Board = Array(10)\n        .fill(null)\n        .map(() => Array(10).fill(null));\n\n      // Complex scenario: piece can capture in multiple directions\n      board[5]![4] = { color: \"red\", type: \"king\" };\n      board[4]![3] = { color: \"black\", type: \"regular\" };\n      board[4]![5] = { color: \"black\", type: \"regular\" };\n      board[6]![3] = { color: \"black\", type: \"regular\" };\n      board[6]![5] = { color: \"black\", type: \"regular\" };\n\n      const moves = rules.findValidMoves(board, \"red\");\n\n      // Should find multiple capture paths\n      const captureMoves = moves.filter(\n        (m) => m.captures && m.captures.length > 0,\n      );\n      expect(captureMoves.length).toBeGreaterThan(0);\n\n      if (rules.requiresMaximumCapture()) {\n        // Should prefer longer capture chains\n        const maxCaptures = Math.max(\n          ...captureMoves.map((m) => m.captures?.length ?? 0),\n        );\n        const optimalMoves = captureMoves.filter(\n          (m) => m.captures?.length === maxCaptures,\n        );\n\n        // All returned moves should be maximum captures\n        expect(moves.every((m) => m.captures?.length === maxCaptures)).toBe(\n          true,\n        );\n      }\n    });\n  });\n\n  describe(\"Memory and State Management\", () => {\n    it(\"should not modify original board when making moves\", async () => {\n      for (const variant of variants) {\n        const rules = variantRules.get(variant)!;\n        const originalBoard = rules.createInitialBoard();\n\n        // Deep copy for comparison\n        const boardCopy = originalBoard.map((row) => [...row]);\n\n        // Find and make a move\n        const moves = rules.findValidMoves(originalBoard, \"red\");\n        if (moves.length > 0) {\n          const newBoard = rules.makeMove(originalBoard, moves[0]);\n\n          // Original board should be unchanged\n          for (let i = 0; i < originalBoard.length; i++) {\n            for (let j = 0; j < originalBoard[i]!.length; j++) {\n              expect(originalBoard[i]![j]).toEqual(boardCopy[i]![j]);\n            }\n          }\n\n          // New board should be different\n          let isDifferent = false;\n          for (let i = 0; i < newBoard.length && !isDifferent; i++) {\n            for (let j = 0; j < newBoard[i]!.length && !isDifferent; j++) {\n              if (newBoard[i]![j] !== originalBoard[i]![j]) {\n                isDifferent = true;\n              }\n            }\n          }\n          expect(isDifferent).toBe(true);\n        }\n      }\n    });\n\n    it(\"should handle rapid variant switching without state leakage\", async () => {\n      // Create boards with different variants\n      const americanRules = new GameRules(\"american\");\n      await americanRules.initialize();\n      const americanBoard = americanRules.createInitialBoard();\n\n      const internationalRules = new GameRules(\"international\");\n      await internationalRules.initialize();\n      const internationalBoard = internationalRules.createInitialBoard();\n\n      // Boards should have different sizes\n      expect(americanBoard.length).toBe(8);\n      expect(internationalBoard.length).toBe(10);\n\n      // Making moves on one shouldn't affect the other\n      const americanMoves = americanRules.findValidMoves(americanBoard, \"red\");\n      const internationalMoves = internationalRules.findValidMoves(\n        internationalBoard,\n        \"red\",\n      );\n\n      if (americanMoves.length > 0) {\n        americanRules.makeMove(americanBoard, americanMoves[0]);\n      }\n\n      // International board should still be initial state\n      const newInternationalBoard = internationalRules.createInitialBoard();\n      expect(newInternationalBoard).toEqual(internationalBoard);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/__tests__/game-rules.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":56,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":56,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":58,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":58,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":65,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":65,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":65,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":67,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":123,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":123,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":127,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":127,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":127,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":127,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":130,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":130,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":130,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":130,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":131,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":131,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":131,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":131,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":132,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":132,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":132,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":132,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":133,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":133,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":133,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":133,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":177,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":195,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":195,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":198,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":198,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":198,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":198,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":199,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":199,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":199,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":199,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":206,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":206,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":207,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":207,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":207,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":207,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":208,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":208,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":208,"column":27,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":208,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":238,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":238,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":254,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":254,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":256,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":256,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":262,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":262,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":269,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":269,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":269,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":269,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":271,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":373,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":373,"endColumn":39}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test suite for the configuration-driven game rules engine\n * Tests all draughts variants through configuration\n */\n\nimport { describe, it, expect, beforeEach } from \"vitest\";\nimport { GameRules } from \"../game-rules\";\nimport { GameConfigLoader } from \"../config-loader\";\nimport { validateConfigWithErrors } from \"../rule-schema\";\nimport type { VariantConfig } from \"../rule-schema\";\n\ndescribe(\"Game Rules Engine\", () => {\n  describe(\"Configuration Loading\", () => {\n    it(\"should load all built-in variants\", () => {\n      const variants = GameConfigLoader.getBuiltInVariants();\n      expect(variants).toContain(\"american\");\n      expect(variants).toContain(\"brazilian\");\n      expect(variants).toContain(\"international\");\n    });\n\n    it(\"should load American variant configuration\", () => {\n      const config = GameConfigLoader.loadVariant(\"american\");\n      expect(config.metadata.name).toBe(\"american\");\n      expect(config.board.size).toBe(8);\n      expect(config.board.pieceCount).toBe(12);\n      expect(config.board.startingRows.black).toEqual([0, 1, 2]);\n      expect(config.board.startingRows.red).toEqual([5, 6, 7]);\n    });\n\n    it(\"should load International variant configuration\", () => {\n      const config = GameConfigLoader.loadVariant(\"international\");\n      expect(config.metadata.name).toBe(\"international\");\n      expect(config.board.size).toBe(10);\n      expect(config.board.pieceCount).toBe(20);\n      expect(config.board.startingRows.black).toEqual([0, 1, 2, 3]);\n      expect(config.board.startingRows.red).toEqual([6, 7, 8, 9]);\n    });\n\n    it(\"should validate configurations\", () => {\n      const config = GameConfigLoader.loadVariant(\"american\");\n      const validation = validateConfigWithErrors(config);\n      expect(validation.valid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n  });\n\n  describe(\"American Checkers\", () => {\n    let rules: GameRules;\n\n    beforeEach(() => {\n      rules = new GameRules(\"american\");\n      rules.initialize();\n    });\n\n    it(\"should create initial 8x8 board with 12 pieces per player\", () => {\n      const board = rules.createInitialBoard();\n      expect(board).toHaveLength(8);\n      expect(board[0]).toHaveLength(8);\n\n      // Count pieces\n      let blackPieces = 0;\n      let redPieces = 0;\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          const piece = board[row]![col];\n          if (piece) {\n            if (piece.color === \"black\") blackPieces++;\n            else redPieces++;\n          }\n        }\n      }\n      expect(blackPieces).toBe(12);\n      expect(redPieces).toBe(12);\n    });\n\n    it(\"should have correct movement directions for regular pieces\", () => {\n      const redDirections = rules.getValidDirections({\n        color: \"red\",\n        type: \"regular\",\n      });\n      expect(redDirections).toEqual([\n        [-1, -1],\n        [-1, 1],\n      ]);\n\n      const blackDirections = rules.getValidDirections({\n        color: \"black\",\n        type: \"regular\",\n      });\n      expect(blackDirections).toEqual([\n        [1, -1],\n        [1, 1],\n      ]);\n    });\n\n    it(\"should have correct movement directions for kings\", () => {\n      const kingDirections = rules.getValidDirections({\n        color: \"red\",\n        type: \"king\",\n      });\n      expect(kingDirections).toEqual([\n        [-1, -1],\n        [-1, 1],\n        [1, -1],\n        [1, 1],\n      ]);\n    });\n\n    it(\"should allow backward captures only for kings\", () => {\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"regular\" })).toBe(\n        false,\n      );\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"king\" })).toBe(\n        true,\n      );\n    });\n\n    it(\"should not allow flying kings\", () => {\n      expect(rules.canFlyAsKing()).toBe(false);\n    });\n\n    it(\"should restrict American kings to one-square diagonal moves\", () => {\n      const board = rules.createInitialBoard();\n\n      // Clear some spaces and create a king in the middle of the board for testing\n      // Position [4,3] is a dark square (4+3=7, odd number)\n      board[4]![3] = { color: \"red\", type: \"king\" };\n\n      // Clear destination squares to ensure they're empty\n      board[3]![2] = null;\n      board[3]![4] = null;\n      board[5]![2] = null;\n      board[5]![4] = null;\n\n      // Valid one-square king moves should be allowed\n      const oneSquareMoves = [\n        { from: { row: 4, col: 3 }, to: { row: 3, col: 2 } },\n        { from: { row: 4, col: 3 }, to: { row: 3, col: 4 } },\n        { from: { row: 4, col: 3 }, to: { row: 5, col: 2 } },\n        { from: { row: 4, col: 3 }, to: { row: 5, col: 4 } },\n      ];\n\n      for (const move of oneSquareMoves) {\n        expect(rules.validateMove(board, move)).toBe(true);\n      }\n\n      // Multi-square king moves should be rejected\n      const multiSquareMoves = [\n        { from: { row: 4, col: 3 }, to: { row: 2, col: 1 } }, // 2 squares\n        { from: { row: 4, col: 3 }, to: { row: 1, col: 0 } }, // 3 squares\n        { from: { row: 4, col: 3 }, to: { row: 6, col: 5 } }, // 2 squares\n      ];\n\n      for (const move of multiSquareMoves) {\n        expect(rules.validateMove(board, move)).toBe(false);\n      }\n    });\n\n    it(\"should require mandatory captures but not maximum\", () => {\n      expect(rules.isMandatoryCapture()).toBe(true);\n      expect(rules.requiresMaximumCapture()).toBe(false);\n    });\n\n    it(\"should handle promotion correctly\", () => {\n      expect(rules.shouldPromote({ color: \"red\", type: \"regular\" }, 0)).toBe(\n        true,\n      );\n      expect(rules.shouldPromote({ color: \"black\", type: \"regular\" }, 7)).toBe(\n        true,\n      );\n      expect(rules.shouldPromote({ color: \"red\", type: \"king\" }, 0)).toBe(\n        false,\n      );\n    });\n\n    it(\"should validate moves correctly\", () => {\n      const board = rules.createInitialBoard();\n\n      // Valid forward move for red piece\n      const validMove = {\n        from: { row: 5, col: 0 },\n        to: { row: 4, col: 1 },\n      };\n      expect(rules.validateMove(board, validMove)).toBe(true);\n\n      // Invalid backward move for regular red piece\n      const invalidMove = {\n        from: { row: 5, col: 0 },\n        to: { row: 6, col: 1 },\n      };\n      expect(rules.validateMove(board, invalidMove)).toBe(false);\n    });\n\n    it(\"should apply moves and promote pieces\", () => {\n      const board = rules.createInitialBoard();\n\n      // Create a scenario where red piece can promote\n      board[1]![2] = { color: \"red\", type: \"regular\" };\n      board[0]![1] = null; // Clear destination\n\n      const move = {\n        from: { row: 1, col: 2 },\n        to: { row: 0, col: 1 },\n      };\n\n      const newBoard = rules.makeMove(board, move);\n      expect(newBoard[0]![1]).toEqual({ color: \"red\", type: \"king\" });\n      expect(newBoard[1]![2]).toBeNull();\n    });\n  });\n\n  describe(\"Brazilian Draughts\", () => {\n    let rules: GameRules;\n\n    beforeEach(() => {\n      rules = new GameRules(\"brazilian\");\n      rules.initialize();\n    });\n\n    it(\"should allow backward captures for all pieces\", () => {\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"regular\" })).toBe(\n        true,\n      );\n      expect(\n        rules.canCaptureBackward({ color: \"black\", type: \"regular\" }),\n      ).toBe(true);\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"king\" })).toBe(\n        true,\n      );\n    });\n\n    it(\"should require maximum capture and king priority\", () => {\n      expect(rules.requiresMaximumCapture()).toBe(true);\n      expect(rules.requiresKingPriority()).toBe(true);\n    });\n\n    it(\"should have same 8x8 board setup as American\", () => {\n      const board = rules.createInitialBoard();\n      expect(board).toHaveLength(8);\n      expect(rules.getBoardSize()).toBe(8);\n      expect(rules.getPieceCount()).toBe(12);\n    });\n  });\n\n  describe(\"International Draughts\", () => {\n    let rules: GameRules;\n\n    beforeEach(() => {\n      rules = new GameRules(\"international\");\n      rules.initialize();\n    });\n\n    it(\"should create 10x10 board with 20 pieces per player\", () => {\n      const board = rules.createInitialBoard();\n      expect(board).toHaveLength(10);\n      expect(board[0]).toHaveLength(10);\n      expect(rules.getBoardSize()).toBe(10);\n      expect(rules.getPieceCount()).toBe(20);\n    });\n\n    it(\"should place pieces on correct starting rows\", () => {\n      const board = rules.createInitialBoard();\n\n      // Count pieces by color\n      let blackPieces = 0;\n      let redPieces = 0;\n      for (let row = 0; row < 10; row++) {\n        for (let col = 0; col < 10; col++) {\n          const piece = board[row]![col];\n          if (piece) {\n            if (piece.color === \"black\") blackPieces++;\n            else redPieces++;\n          }\n        }\n      }\n      expect(blackPieces).toBe(20);\n      expect(redPieces).toBe(20);\n    });\n\n    it(\"should allow backward captures for all pieces\", () => {\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"regular\" })).toBe(\n        true,\n      );\n      expect(\n        rules.canCaptureBackward({ color: \"black\", type: \"regular\" }),\n      ).toBe(true);\n    });\n\n    it(\"should require maximum capture and king priority\", () => {\n      expect(rules.requiresMaximumCapture()).toBe(true);\n      expect(rules.requiresKingPriority()).toBe(true);\n    });\n  });\n\n  describe(\"Custom Variants\", () => {\n    it(\"should register and use custom variant configurations\", async () => {\n      const customConfig = GameConfigLoader.loadVariant(\"american\");\n      customConfig.metadata.name = \"custom\";\n      customConfig.metadata.displayName = \"Custom Test Variant\";\n      customConfig.movement.regularPieces.canCaptureBackward = true;\n\n      GameConfigLoader.registerCustomVariant(\"custom\", customConfig);\n\n      const rules = new GameRules(\"custom\");\n      rules.initialize();\n\n      expect(rules.displayName).toBe(\"Custom Test Variant\");\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"regular\" })).toBe(\n        true,\n      );\n    });\n\n    it(\"should validate custom configurations\", () => {\n      const validConfig = {\n        metadata: {\n          name: \"test\",\n          displayName: \"Test Variant\",\n          description: \"A test variant\",\n          popularity: \"rare\",\n        },\n        board: {\n          size: 8,\n          pieceCount: 12,\n          startingRows: { black: [0, 1, 2], red: [5, 6, 7] },\n        },\n        movement: {\n          regularPieces: {\n            directions: { red: \"forward\", black: \"forward\" },\n            canCaptureBackward: false,\n          },\n          kings: {\n            canFly: true,\n            canCaptureBackward: true,\n          },\n        },\n        capture: {\n          mandatory: true,\n          requireMaximum: false,\n          kingPriority: false,\n          chainCaptures: true,\n          captureDirection: { regular: \"all\", king: \"all\" },\n          promotion: { duringCapture: false, stopsCaptureChain: true },\n        },\n        promotion: { toOppositeEnd: true, immediateEffect: true },\n        draws: {\n          fortyMoveRule: false,\n          twentyFiveMoveRule: false,\n          repetitionLimit: 3,\n          insufficientMaterial: true,\n          staleMate: true,\n        },\n        schemaVersion: \"1.0.0\",\n      } as VariantConfig;\n\n      const validation = validateConfigWithErrors(validConfig);\n      expect(validation.valid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n  });\n\n  describe(\"Draw Conditions\", () => {\n    let rules: GameRules;\n\n    beforeEach(() => {\n      rules = new GameRules(\"american\");\n      rules.initialize();\n    });\n\n    it(\"should detect insufficient material\", () => {\n      // Create board with only two kings\n      const board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0]![1] = { color: \"red\", type: \"king\" };\n      board[7]![0] = { color: \"black\", type: \"king\" };\n\n      const result = rules.checkDrawCondition(board, []);\n      expect(result).toBe(\"draw\");\n    });\n  });\n\n  describe(\"Tournament Features\", () => {\n    it(\"should load tournament-specific configurations\", async () => {\n      const config = GameConfigLoader.loadVariant(\"american\");\n\n      if (config.tournament) {\n        expect(config.tournament.touchMove).toBe(true);\n        expect(config.tournament.notation.required).toBe(true);\n        expect(config.tournament.timeControls?.enabled).toBe(true);\n      }\n    });\n\n    it(\"should have different time controls per variant\", async () => {\n      const americanConfig = GameConfigLoader.loadVariant(\"american\");\n      const internationalConfig = GameConfigLoader.loadVariant(\"international\");\n\n      if (\n        americanConfig.tournament?.timeControls &&\n        internationalConfig.tournament?.timeControls\n      ) {\n        expect(americanConfig.tournament.timeControls.classical.baseTime).toBe(\n          60,\n        );\n        expect(\n          internationalConfig.tournament.timeControls.classical.baseTime,\n        ).toBe(120);\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/__tests__/integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":44,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":44,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":45,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":45,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":49,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":69,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":77,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":78,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":89,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":96,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":98,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":98,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":108,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":108,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":108,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":131,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":135,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":139,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":146,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":147,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":148,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":193,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":193,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":194,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":227,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":227,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":228,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":228,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":229,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":229,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":237,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":237,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":242,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":242,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":247,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":247,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":252,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":253,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":254,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":315,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":315,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .enabled on an `error` typed value.","line":373,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":373,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sequences on an `error` typed value.","line":375,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sequences on an `error` typed value.","line":376,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":409,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":409,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":413,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":413,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":417,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":417,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":429,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":429,"endColumn":71}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration tests for game engine\n * Tests complete game flows, variant switching, and system integration\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { GameRules } from \"../game-rules\";\nimport { GameConfigLoader } from \"../config-loader\";\nimport { validateConfigWithErrors } from \"../rule-schema\";\nimport type { Board, Move, PieceColor } from \"../../game-logic\";\nimport type { VariantConfig } from \"../rule-schema\";\n\ndescribe(\"Game Engine Integration Tests\", () => {\n  beforeEach(() => {\n    // Clear cache before each test for isolation\n    GameConfigLoader.clearCache();\n  });\n\n  afterEach(() => {\n    // Clean up after tests\n    GameConfigLoader.clearCache();\n  });\n\n  describe(\"Complete Game Flow\", () => {\n    it(\"should play a complete game from start to finish\", () => {\n      const rules = new GameRules(\"american\");\n      rules.initialize();\n\n      let board = rules.createInitialBoard();\n      let currentPlayer: PieceColor = \"red\";\n      let moveCount = 0;\n      const moveHistory: Move[] = [];\n\n      // Play until game ends or max moves reached\n      while (moveCount < 200) {\n        const validMoves = rules.findValidMoves(board, currentPlayer);\n\n        if (validMoves.length === 0) {\n          // No moves available - game over\n          break;\n        }\n\n        // Make a random move\n        const move = validMoves[Math.floor(Math.random() * validMoves.length)]!;\n        board = rules.makeMove(board, move);\n        moveHistory.push(move);\n\n        // Check for winner\n        const winner = rules.checkWinner(board);\n        if (winner) {\n          expect([\"red\", \"black\", \"draw\"]).toContain(winner);\n          break;\n        }\n\n        // Switch players\n        currentPlayer = currentPlayer === \"red\" ? \"black\" : \"red\";\n        moveCount++;\n      }\n\n      // Game should end within reasonable moves\n      expect(moveCount).toBeLessThanOrEqual(200);\n      expect(moveHistory.length).toBe(moveCount);\n    });\n\n    it(\"should maintain game consistency through multiple operations\", () => {\n      const rules = new GameRules(\"brazilian\");\n      rules.initialize();\n\n      const initialBoard = rules.createInitialBoard();\n\n      // Count initial pieces\n      const countPieces = (b: Board) => {\n        let red = 0,\n          black = 0;\n        for (const row of b) {\n          for (const cell of row) {\n            if (cell?.color === \"red\") red++;\n            if (cell?.color === \"black\") black++;\n          }\n        }\n        return { red, black };\n      };\n\n      const initialCount = countPieces(initialBoard);\n      expect(initialCount.red).toBe(12);\n      expect(initialCount.black).toBe(12);\n\n      // Play several moves\n      let board = initialBoard;\n      let currentPlayer: PieceColor = \"red\";\n\n      for (let i = 0; i < 10; i++) {\n        const moves = rules.findValidMoves(board, currentPlayer);\n        if (moves.length === 0) break;\n\n        const move = moves[0]!;\n        const previousCount = countPieces(board);\n        board = rules.makeMove(board, move);\n        const newCount = countPieces(board);\n\n        // Pieces should only decrease (captures) or stay same\n        expect(newCount.red).toBeLessThanOrEqual(previousCount.red);\n        expect(newCount.black).toBeLessThanOrEqual(previousCount.black);\n\n        // Total pieces should decrease by captures\n        const totalBefore = previousCount.red + previousCount.black;\n        const totalAfter = newCount.red + newCount.black;\n        const captured = move.captures?.length ?? 0;\n        expect(totalAfter).toBe(totalBefore - captured);\n\n        currentPlayer = currentPlayer === \"red\" ? \"black\" : \"red\";\n      }\n    });\n  });\n\n  describe(\"Variant Switching and Configuration Management\", () => {\n    it(\"should switch between variants without errors\", () => {\n      const variants = [\"american\", \"brazilian\", \"international\"] as const;\n      const boards: Board[] = [];\n\n      for (const variant of variants) {\n        const rules = new GameRules(variant);\n        rules.initialize();\n\n        const board = rules.createInitialBoard();\n        boards.push(board);\n\n        // Verify variant-specific properties\n        switch (variant) {\n          case \"american\":\n            expect(board.length).toBe(8);\n            expect(rules.requiresMaximumCapture()).toBe(false);\n            break;\n          case \"brazilian\":\n            expect(board.length).toBe(8);\n            expect(rules.requiresMaximumCapture()).toBe(true);\n            break;\n          case \"international\":\n            expect(board.length).toBe(10);\n            expect(rules.requiresMaximumCapture()).toBe(true);\n            break;\n        }\n      }\n\n      // Boards should be independent\n      expect(boards[0]!.length).toBe(8); // American\n      expect(boards[1]!.length).toBe(8); // Brazilian\n      expect(boards[2]!.length).toBe(10); // International\n    });\n\n    it(\"should handle custom variant registration and usage\", () => {\n      // Create a custom variant based on American rules\n      const baseConfig = GameConfigLoader.loadVariant(\"american\");\n      const customConfig: VariantConfig = {\n        ...baseConfig,\n        metadata: {\n          ...baseConfig.metadata,\n          name: \"custom-test\",\n          displayName: \"Custom Test Variant\",\n          description: \"A test variant for integration testing\",\n        },\n        // Modify some rules\n        movement: {\n          ...baseConfig.movement,\n          regularPieces: {\n            ...baseConfig.movement.regularPieces,\n            canCaptureBackward: true, // Allow backward captures\n          },\n        },\n        capture: {\n          ...baseConfig.capture,\n          requireMaximum: true, // Require maximum captures\n          kingPriority: true, // Prioritize king captures\n        },\n      };\n\n      // Register the custom variant\n      GameConfigLoader.registerCustomVariant(\"custom-test\", customConfig);\n\n      // Use the custom variant\n      const rules = new GameRules(\"custom-test\");\n      rules.initialize();\n\n      // Verify custom rules are applied\n      expect(rules.displayName).toBe(\"Custom Test Variant\");\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"regular\" })).toBe(\n        true,\n      );\n      expect(rules.requiresMaximumCapture()).toBe(true);\n      expect(rules.requiresKingPriority()).toBe(true);\n\n      // Should still have standard board setup\n      const board = rules.createInitialBoard();\n      expect(board.length).toBe(8);\n    });\n\n    it(\"should validate and reject invalid configurations\", () => {\n      const invalidConfig = {\n        metadata: {\n          name: \"invalid\",\n          displayName: \"Invalid Config\",\n          // Missing required fields\n        },\n        board: {\n          size: -1, // Invalid size\n          pieceCount: \"twelve\", // Wrong type\n        },\n      };\n\n      const validation = validateConfigWithErrors(invalidConfig);\n      expect(validation.valid).toBe(false);\n      expect(validation.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Concurrent Game Sessions\", () => {\n    it(\"should handle multiple independent game instances\", () => {\n      // Create multiple game instances\n      const game1 = new GameRules(\"american\");\n      const game2 = new GameRules(\"brazilian\");\n      const game3 = new GameRules(\"international\");\n\n      game1.initialize();\n      game2.initialize();\n      game3.initialize();\n\n      const board1 = game1.createInitialBoard();\n      const board2 = game2.createInitialBoard();\n      const board3 = game3.createInitialBoard();\n\n      // Make moves on each board\n      const moves1 = game1.findValidMoves(board1, \"red\");\n      const moves2 = game2.findValidMoves(board2, \"red\");\n      const moves3 = game3.findValidMoves(board3, \"red\");\n\n      if (moves1.length > 0) {\n        const newBoard1 = game1.makeMove(board1, moves1[0]);\n        expect(newBoard1).not.toBe(board1); // Should be a new board\n      }\n\n      if (moves2.length > 0) {\n        const newBoard2 = game2.makeMove(board2, moves2[0]);\n        expect(newBoard2).not.toBe(board2);\n      }\n\n      if (moves3.length > 0) {\n        const newBoard3 = game3.makeMove(board3, moves3[0]);\n        expect(newBoard3).not.toBe(board3);\n      }\n\n      // Original boards should be unchanged\n      expect(board1.length).toBe(8);\n      expect(board2.length).toBe(8);\n      expect(board3.length).toBe(10);\n    });\n  });\n\n  describe(\"Performance and Caching\", () => {\n    it(\"should cache configurations for performance\", () => {\n      // First load - will fetch and cache\n      const start1 = performance.now();\n      GameConfigLoader.loadVariant(\"american\");\n      const time1 = performance.now() - start1;\n\n      // Second load - should use cache\n      const start2 = performance.now();\n      GameConfigLoader.loadVariant(\"american\");\n      const time2 = performance.now() - start2;\n\n      // Cached load should be faster (allowing some variance)\n      // Note: This might not always be true in test environments\n      expect(time2).toBeLessThanOrEqual(time1 + 1);\n    });\n\n    it(\"should handle cache clearing correctly\", () => {\n      // Load and cache\n      GameConfigLoader.loadVariant(\"american\");\n      expect(GameConfigLoader.hasVariant(\"american\")).toBe(true);\n\n      // Clear cache\n      GameConfigLoader.clearCache();\n\n      // Should still work after cache clear\n      const rules = new GameRules(\"american\");\n      rules.initialize();\n      expect(rules.getBoardSize()).toBe(8);\n    });\n\n    it(\"should preload all variants efficiently\", () => {\n      const start = performance.now();\n      GameConfigLoader.preloadBuiltInVariants();\n      const duration = performance.now() - start;\n\n      // All variants should be loaded\n      expect(GameConfigLoader.hasVariant(\"american\")).toBe(true);\n      expect(GameConfigLoader.hasVariant(\"brazilian\")).toBe(true);\n      expect(GameConfigLoader.hasVariant(\"international\")).toBe(true);\n\n      // Should complete reasonably quickly\n      expect(duration).toBeLessThan(1000); // 1 second max\n    });\n  });\n\n  describe(\"Error Handling and Recovery\", () => {\n    it(\"should handle invalid variant names gracefully\", () => {\n      const rules = new GameRules(\"nonexistent\");\n\n      expect(() => rules.initialize()).toThrow(\"Unknown variant\");\n    });\n\n    it(\"should handle invalid moves gracefully\", () => {\n      const rules = new GameRules(\"american\");\n      rules.initialize();\n\n      const board = rules.createInitialBoard();\n\n      // Invalid move - off board\n      const invalidMove: Move = {\n        from: { row: -1, col: -1 },\n        to: { row: 10, col: 10 },\n      };\n\n      expect(rules.validateMove(board, invalidMove)).toBe(false);\n\n      // Should not throw when making invalid move\n      expect(() => {\n        rules.validateMove(board, invalidMove);\n      }).not.toThrow();\n    });\n\n    it(\"should recover from configuration errors\", () => {\n      // Try to register an invalid configuration\n      const invalidConfig = {} as VariantConfig;\n\n      expect(() => {\n        GameConfigLoader.registerCustomVariant(\"broken\", invalidConfig);\n      }).toThrow();\n\n      // Should still be able to use valid configurations\n      const rules = new GameRules(\"american\");\n      rules.initialize();\n      expect(rules.getBoardSize()).toBe(8);\n    });\n  });\n\n  describe(\"Tournament Mode Integration\", () => {\n    it(\"should apply tournament rules when enabled\", () => {\n      const config = GameConfigLoader.loadVariant(\"american\");\n\n      // Check tournament configuration exists\n      expect(config.tournament).toBeDefined();\n\n      if (config.tournament) {\n        expect(config.tournament.touchMove).toBeDefined();\n        expect(config.tournament.notation.required).toBeDefined();\n\n        // Time controls for tournament\n        if (config.tournament.timeControls?.enabled) {\n          expect(config.tournament.timeControls.classical).toBeDefined();\n          expect(config.tournament.timeControls.rapid).toBeDefined();\n          expect(config.tournament.timeControls.blitz).toBeDefined();\n        }\n      }\n    });\n\n    it(\"should handle tournament-specific restrictions\", () => {\n      const rules = new GameRules(\"american\");\n      rules.initialize();\n\n      const config = GameConfigLoader.loadVariant(\"american\");\n\n      // In tournament mode with 3-move restriction\n      if (config.tournament?.threeMove?.enabled) {\n        // Should have specific opening sequences defined\n        expect(config.tournament.threeMove.sequences).toBeDefined();\n        expect(config.tournament.threeMove.sequences.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  describe(\"State Persistence and Restoration\", () => {\n    it(\"should export and import variant configurations\", () => {\n      // Export a variant\n      const exported = GameConfigLoader.exportVariant(\"american\");\n      expect(exported).toBeDefined();\n\n      // Convert to JSON string\n      const jsonString = JSON.stringify(exported);\n\n      // Import as a new variant\n      GameConfigLoader.importVariant(\"imported-american\", jsonString);\n\n      // Use the imported variant\n      const rules = new GameRules(\"imported-american\");\n      rules.initialize();\n\n      // Should behave the same as original\n      expect(rules.getBoardSize()).toBe(8);\n      expect(rules.getPieceCount()).toBe(12);\n      expect(rules.canCaptureBackward({ color: \"red\", type: \"regular\" })).toBe(\n        false,\n      );\n    });\n\n    it(\"should maintain game state through serialization\", () => {\n      const rules = new GameRules(\"american\");\n      rules.initialize();\n\n      const board = rules.createInitialBoard();\n\n      // Make some moves\n      const moves = rules.findValidMoves(board, \"red\");\n      let currentBoard = board;\n      const moveHistory: Move[] = [];\n\n      for (let i = 0; i < 3 && i < moves.length; i++) {\n        currentBoard = rules.makeMove(currentBoard, moves[i]);\n        moveHistory.push(moves[i]);\n      }\n\n      // Serialize state\n      const serializedState = {\n        variant: \"american\",\n        board: JSON.stringify(currentBoard),\n        moveHistory: JSON.stringify(moveHistory),\n      };\n\n      // Restore state\n      const restoredBoard = JSON.parse(serializedState.board) as Board;\n      const restoredHistory = JSON.parse(serializedState.moveHistory) as Move[];\n\n      // Create new rules instance\n      const newRules = new GameRules(serializedState.variant);\n      newRules.initialize();\n\n      // Should be able to continue game\n      const nextMoves = newRules.findValidMoves(restoredBoard, \"black\");\n      expect(nextMoves).toBeDefined();\n      expect(restoredHistory.length).toBe(3);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/config-loader.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4613,4615],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":231,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":231,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5753,5826],"text":"(BUILT_IN_CONFIGS[variantName] ??\n      configCache.getCustom(variantName))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5827,5829],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Configuration loader for game variants\n * Handles loading, validation, and caching of rule configurations\n */\n\nimport type { VariantConfig } from \"./rule-schema\";\nimport { validateConfigWithErrors } from \"./rule-schema\";\n\n// Import TypeScript configurations (these will be bundled)\nimport { AmericanConfig } from \"./rule-configs/american\";\nimport { BrazilianConfig } from \"./rule-configs/brazilian\";\nimport { InternationalConfig } from \"./rule-configs/international\";\nimport { CanadianConfig } from \"./rule-configs/canadian\";\n\n/**\n * Built-in variant configurations\n */\nconst BUILT_IN_CONFIGS: Record<string, VariantConfig> = {\n  american: AmericanConfig,\n  brazilian: BrazilianConfig,\n  international: InternationalConfig,\n  canadian: CanadianConfig,\n};\n\n/**\n * Configuration cache for performance\n */\nclass ConfigCache {\n  private configs = new Map<string, VariantConfig>();\n  private customConfigs = new Map<string, VariantConfig>();\n\n  get(variantName: string): VariantConfig | undefined {\n    return this.configs.get(variantName);\n  }\n\n  set(variantName: string, config: VariantConfig): void {\n    this.configs.set(variantName, config);\n  }\n\n  setCustom(variantName: string, config: VariantConfig): void {\n    this.customConfigs.set(variantName, config);\n  }\n\n  getCustom(variantName: string): VariantConfig | undefined {\n    return this.customConfigs.get(variantName);\n  }\n\n  clear(): void {\n    this.configs.clear();\n    this.customConfigs.clear();\n  }\n\n  has(variantName: string): boolean {\n    return (\n      this.configs.has(variantName) ||\n      BUILT_IN_CONFIGS.hasOwnProperty(variantName)\n    );\n  }\n\n  getAllVariantNames(): string[] {\n    const builtInNames = Object.keys(BUILT_IN_CONFIGS);\n    const customNames = Array.from(this.customConfigs.keys());\n    return [...builtInNames, ...customNames];\n  }\n}\n\n/**\n * Global configuration cache\n */\nconst configCache = new ConfigCache();\n\n/**\n * Configuration loader with validation and caching\n */\nexport class GameConfigLoader {\n  /**\n   * Load a variant configuration (now synchronous)\n   */\n  static loadVariant(variantName: string): VariantConfig {\n    // Check cache first\n    const cached = configCache.get(variantName);\n    if (cached) {\n      return cached;\n    }\n\n    // Try to load configuration\n    let config: VariantConfig | undefined;\n\n    // Check built-in configurations\n    if (BUILT_IN_CONFIGS[variantName]) {\n      config = BUILT_IN_CONFIGS[variantName];\n    }\n    // Check custom configurations\n    else {\n      config = configCache.getCustom(variantName);\n    }\n\n    if (!config) {\n      throw new Error(`Unknown variant: ${variantName}`);\n    }\n\n    // Built-in configs are already validated by TypeScript\n    // Only validate custom configs\n    if (!BUILT_IN_CONFIGS[variantName]) {\n      const validation = validateConfigWithErrors(config);\n      if (!validation.valid) {\n        throw new Error(\n          `Invalid configuration for ${variantName}: ${validation.errors.join(\", \")}`,\n        );\n      }\n    }\n\n    // Cache the configuration\n    configCache.set(variantName, config);\n\n    return config;\n  }\n\n  /**\n   * Load multiple variants at once (now synchronous)\n   */\n  static loadVariants(variantNames: string[]): Record<string, VariantConfig> {\n    const configs: Record<string, VariantConfig> = {};\n\n    for (const name of variantNames) {\n      configs[name] = this.loadVariant(name);\n    }\n\n    return configs;\n  }\n\n  /**\n   * Get all available variant names\n   */\n  static getAvailableVariants(): string[] {\n    return configCache.getAllVariantNames();\n  }\n\n  /**\n   * Get all built-in variant names\n   */\n  static getBuiltInVariants(): string[] {\n    return Object.keys(BUILT_IN_CONFIGS);\n  }\n\n  /**\n   * Register a custom variant configuration\n   */\n  static registerCustomVariant(name: string, config: VariantConfig): void {\n    // Validate the configuration\n    const validation = validateConfigWithErrors(config);\n    if (!validation.valid) {\n      throw new Error(\n        `Invalid custom configuration for ${name}: ${validation.errors.join(\", \")}`,\n      );\n    }\n\n    // Store in cache\n    configCache.setCustom(name, config);\n    configCache.set(name, config);\n  }\n\n  /**\n   * Check if a variant exists\n   */\n  static hasVariant(variantName: string): boolean {\n    return configCache.has(variantName);\n  }\n\n  /**\n   * Get variant metadata without full loading\n   */\n  static getVariantMetadata(variantName: string): {\n    name: string;\n    displayName: string;\n    description: string;\n    boardSize: number;\n    pieceCount: number;\n  } | null {\n    const config =\n      BUILT_IN_CONFIGS[variantName] || configCache.getCustom(variantName);\n    if (!config) {\n      return null;\n    }\n\n    return {\n      name: config.metadata.name,\n      displayName: config.metadata.displayName,\n      description: config.metadata.description,\n      boardSize: config.board.size,\n      pieceCount: config.board.pieceCount,\n    };\n  }\n\n  /**\n   * Get all variant metadata\n   */\n  static getAllVariantMetadata(): Array<{\n    name: string;\n    displayName: string;\n    description: string;\n    boardSize: number;\n    pieceCount: number;\n  }> {\n    const variants = this.getAvailableVariants();\n    return variants\n      .map((name) => this.getVariantMetadata(name)!)\n      .filter(Boolean);\n  }\n\n  /**\n   * Clear configuration cache\n   */\n  static clearCache(): void {\n    configCache.clear();\n  }\n\n  /**\n   * Preload all built-in configurations (now synchronous)\n   */\n  static preloadBuiltInVariants(): void {\n    const variantNames = this.getBuiltInVariants();\n    this.loadVariants(variantNames);\n  }\n\n  /**\n   * Export variant configuration (for saving/sharing)\n   */\n  static exportVariant(variantName: string): VariantConfig | null {\n    return (\n      BUILT_IN_CONFIGS[variantName] ||\n      configCache.getCustom(variantName) ||\n      null\n    );\n  }\n\n  /**\n   * Import variant configuration from JSON\n   */\n  static importVariant(name: string, jsonConfig: string): void {\n    try {\n      const config = JSON.parse(jsonConfig) as VariantConfig;\n      this.registerCustomVariant(name, config);\n    } catch (error) {\n      throw new Error(\n        `Failed to import variant ${name}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      );\n    }\n  }\n\n  /**\n   * Create a variant configuration template\n   */\n  static createVariantTemplate(\n    name: string,\n    displayName: string,\n    basedOn = \"american\",\n  ): VariantConfig {\n    const baseConfig = BUILT_IN_CONFIGS[basedOn];\n    if (!baseConfig) {\n      throw new Error(`Unknown base variant: ${basedOn}`);\n    }\n\n    return {\n      ...baseConfig,\n      metadata: {\n        ...baseConfig.metadata,\n        name,\n        displayName,\n        description: `Custom variant based on ${baseConfig.metadata.displayName}`,\n        popularity: \"rare\",\n        officialRules: undefined,\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Validate variant compatibility with current schema\n   */\n  static validateVariant(config: unknown): {\n    valid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const validation = validateConfigWithErrors(config);\n    const warnings: string[] = [];\n\n    // Check for schema version compatibility\n    if (validation.valid && validation.data) {\n      const schemaVersion = validation.data.schemaVersion;\n      if (schemaVersion !== \"1.0.0\") {\n        warnings.push(\n          `Schema version ${schemaVersion} may not be fully compatible with current version 1.0.0`,\n        );\n      }\n    }\n\n    return {\n      valid: validation.valid,\n      errors: validation.errors,\n      warnings,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/config-utils.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[750,752],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":31,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":31,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[804,806],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utility functions for computed configuration values\n * These replace the pre-computed properties that were in ResolvedVariantConfig\n */\n\nimport type { VariantConfig } from \"./rule-schema\";\n\n/**\n * Get total board square count\n */\nexport function getBoardSquareCount(config: VariantConfig): number {\n  return config.board.size * config.board.size;\n}\n\n/**\n * Get total starting pieces per player\n */\nexport function getTotalStartingPieces(config: VariantConfig): number {\n  return config.board.startingRows.red.length * (config.board.size / 2);\n}\n\n/**\n * Get promotion rows for each color\n */\nexport function getPromotionRows(config: VariantConfig): {\n  red: number[];\n  black: number[];\n} {\n  return {\n    red: config.promotion.customRows?.red || [0],\n    black: config.promotion.customRows?.black || [config.board.size - 1],\n  };\n}\n\n/**\n * Get all valid squares on the board (dark squares only for checkers)\n */\nexport function getValidStartingSquares(\n  config: VariantConfig,\n): { row: number; col: number }[] {\n  const squares: { row: number; col: number }[] = [];\n  for (let row = 0; row < config.board.size; row++) {\n    for (let col = 0; col < config.board.size; col++) {\n      if ((row + col) % 2 === 1) {\n        // Dark squares\n        squares.push({ row, col });\n      }\n    }\n  }\n  return squares;\n}\n\n/**\n * Check if a position is a promotion row for the given color\n */\nexport function isPromotionRow(\n  config: VariantConfig,\n  row: number,\n  color: \"red\" | \"black\",\n): boolean {\n  const promotionRows = getPromotionRows(config);\n  return promotionRows[color].includes(row);\n}\n\n/**\n * Get the initial row range for a given color\n */\nexport function getStartingRows(\n  config: VariantConfig,\n  color: \"red\" | \"black\",\n): number[] {\n  return config.board.startingRows[color];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/game-rules.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":46,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":46,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":46,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [color] resolves to an `error` typed value.","line":46,"column":26,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":46,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":46,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":65,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1623,1626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1623,1626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":87,"column":18,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":87,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [piece.color] resolves to an `error` typed value.","line":136,"column":50,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":136,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":227,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":227,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [color] on an `error` typed value.","line":227,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [color] resolves to an `error` typed value.","line":227,"column":44,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":227,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":228,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":231,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":231,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":231,"column":17,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":231,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":238,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":238,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":238,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":242,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":242,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":242,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":242,"column":52,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":242,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":242,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":247,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":252,"column":38,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":252,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":252,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":252,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":252,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":252,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":257,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":257,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":269,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":269,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":273,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":273,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":273,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ color: PieceColor; type: PieceType; }`.","line":277,"column":34,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":277,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":278,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":278,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":278,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":282,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":290,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":291,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":291,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":292,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":292,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":309,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":309,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":309,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":309,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ color: PieceColor; type: PieceType; }`.","line":312,"column":53,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":312,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":313,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":313,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":313,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":313,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":314,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":314,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":314,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":314,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":318,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":318,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":321,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":321,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":321,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":321,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":360,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":360,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":361,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":361,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":371,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":371,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":371,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":371,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":372,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":372,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":372,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":372,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":374,"column":34,"nodeType":"Property","messageId":"anyAssignment","endLine":374,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":374,"column":49,"nodeType":"Property","messageId":"anyAssignment","endLine":374,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":386,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":386,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":386,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":386,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":390,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error array type.","line":396,"column":7,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":396,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":396,"column":37,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":396,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":396,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":400,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":400,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ color: PieceColor; type: PieceType; }`.","line":412,"column":48,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":412,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":415,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":415,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error array type.","line":418,"column":11,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":418,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error array type.","line":423,"column":11,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":423,"endColumn":71},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Position' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":444,"column":19,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":444,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":448,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":448,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":448,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":448,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":449,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":449,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":449,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":449,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":451,"column":41,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":451,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":451,"column":51,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":451,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":453,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":453,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":453,"column":49,"nodeType":"Property","messageId":"anyAssignment","endLine":453,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":453,"column":64,"nodeType":"Property","messageId":"anyAssignment","endLine":453,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":456,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":456,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":456,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":456,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":459,"column":24,"nodeType":"Property","messageId":"anyAssignment","endLine":459,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":459,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":459,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":466,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":466,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":467,"column":36,"nodeType":"Property","messageId":"anyAssignment","endLine":467,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":467,"column":51,"nodeType":"Property","messageId":"anyAssignment","endLine":467,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":474,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":474,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":474,"column":28,"nodeType":"Property","messageId":"anyAssignment","endLine":474,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":481,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":481,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":482,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":482,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":482,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":482,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an error typed value in an array.","line":483,"column":36,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":483,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":483,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":483,"endColumn":60},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":483,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":483,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13016,13018],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":488,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":488,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":489,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":489,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":489,"column":34,"nodeType":"Property","messageId":"anyAssignment","endLine":489,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":512,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":512,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":512,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":512,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":513,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":513,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":513,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":513,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":514,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":514,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":514,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":514,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":515,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":515,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":515,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":515,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":518,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":518,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":518,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":518,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":519,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":519,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":519,"column":47,"nodeType":"Property","messageId":"anyAssignment","endLine":519,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":520,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":520,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":520,"column":47,"nodeType":"Property","messageId":"anyAssignment","endLine":520,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":520,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":520,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":521,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":521,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":522,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":522,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":522,"column":45,"nodeType":"Property","messageId":"anyAssignment","endLine":522,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":524,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":524,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":525,"column":34,"nodeType":"Property","messageId":"anyAssignment","endLine":525,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":525,"column":48,"nodeType":"Property","messageId":"anyAssignment","endLine":525,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":527,"column":34,"nodeType":"Property","messageId":"anyAssignment","endLine":527,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":527,"column":51,"nodeType":"Property","messageId":"anyAssignment","endLine":527,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":532,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":532,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":532,"column":25,"nodeType":"Property","messageId":"anyAssignment","endLine":532,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":539,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":539,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":540,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":540,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":540,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":540,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":542,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":542,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":542,"column":34,"nodeType":"Property","messageId":"anyAssignment","endLine":542,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an error typed value in an array.","line":543,"column":15,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":543,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":543,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":543,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":543,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":543,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14706,14708],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":549,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":549,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":550,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":550,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":550,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":550,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":551,"column":24,"nodeType":"Property","messageId":"anyAssignment","endLine":551,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":551,"column":41,"nodeType":"Property","messageId":"anyAssignment","endLine":551,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":571,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":571,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":571,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":571,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":571,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":571,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":572,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":572,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error array type.","line":575,"column":25,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":575,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error array type.","line":585,"column":11,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":585,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":585,"column":34,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":585,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":585,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":585,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":587,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":587,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":595,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":595,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":595,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":595,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":595,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":595,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":596,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":596,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ color: PieceColor; type: PieceType; }`.","line":597,"column":54,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":597,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [newRow] on an `error` typed value.","line":605,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":605,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [newCol] on an `error` typed value.","line":605,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":605,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":618,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":618,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [kingRow] on an `error` typed value.","line":624,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":624,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [kingCol] on an `error` typed value.","line":624,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":624,"endColumn":44},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'PieceColor' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":647,"column":30,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":647,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":656,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":656,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":656,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":656,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [col] on an `error` typed value.","line":656,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":656,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":658,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":658,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":736,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":736,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":737,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":737,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":737,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":737,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":742,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":742,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":743,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":743,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":746,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":746,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":747,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":747,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ color: PieceColor; type: PieceType; }`.","line":753,"column":28,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":753,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":753,"column":35,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":753,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":753,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":753,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":754,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":754,"endColumn":38},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Piece' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":761,"column":50,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":761,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":762,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":762,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":762,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":762,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":762,"column":48,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":762,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":762,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":762,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [pos.row] on an `error` typed value.","line":765,"column":18,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":765,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [pos.row] resolves to an `error` typed value.","line":765,"column":18,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":765,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":765,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":765,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [pos.col] resolves to an `error` typed value.","line":765,"column":29,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":765,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":765,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":765,"endColumn":36},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Piece' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":768,"column":56,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":768,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":769,"column":38,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":769,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":769,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":769,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":769,"column":47,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":769,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":769,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":769,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":770,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":770,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [pos.row] on an `error` typed value.","line":770,"column":13,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":770,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [pos.row] resolves to an `error` typed value.","line":770,"column":13,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":770,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":770,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":770,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [pos.col] on an `error` typed value.","line":770,"column":23,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":770,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [pos.col] resolves to an `error` typed value.","line":770,"column":23,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":770,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":770,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":770,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":775,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":775,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":775,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":775,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":776,"column":7,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":776,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":776,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":776,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":776,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":776,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":776,"column":27,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":776,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":787,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":787,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":788,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":788,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":799,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":799,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":799,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":799,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":800,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":800,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":800,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":800,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":801,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":801,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":801,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":801,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":802,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":802,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":802,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":802,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":809,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":809,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":809,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":809,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":809,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":809,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":823,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":823,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":823,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":823,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":823,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":823,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":839,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":839,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":842,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":842,"endColumn":25}],"suppressedMessages":[],"errorCount":218,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Configuration-driven game rules engine\n * Single implementation that processes all draughts variants through configuration\n */\n\nimport type { VariantConfig } from \"./rule-schema\";\nimport type {\n  Board,\n  PieceColor,\n  PieceType,\n  Position,\n  Move,\n  Piece,\n} from \"../game-logic\";\nimport { GameConfigLoader } from \"./config-loader\";\nimport { getPromotionRows } from \"./config-utils\";\n\n/**\n * Board validator for any board size\n */\nclass ConfigurableBoardValidator {\n  constructor(private config: VariantConfig) {}\n\n  isValidSquare(row: number, col: number): boolean {\n    return (\n      row >= 0 &&\n      row < this.config.board.size &&\n      col >= 0 &&\n      col < this.config.board.size\n    );\n  }\n\n  isDarkSquare(row: number, col: number): boolean {\n    return (row + col) % 2 === 1;\n  }\n\n  isStartingRow(color: PieceColor, row: number): boolean {\n    const startingRows = this.config.board.startingRows;\n    return color === \"black\"\n      ? startingRows.black.includes(row)\n      : startingRows.red.includes(row);\n  }\n\n  isPromotionRow(color: PieceColor, row: number): boolean {\n    const promotionRows = getPromotionRows(this.config);\n    return promotionRows[color].includes(row);\n  }\n}\n\n/**\n * Game rules engine - handles all draughts variants through configuration\n */\nexport class GameRules {\n  private config: VariantConfig;\n  private validator: ConfigurableBoardValidator;\n\n  constructor(\n    private variantName: string,\n    config?: VariantConfig,\n  ) {\n    if (config) {\n      this.config = config;\n    } else {\n      // This will be resolved when initialize() is called\n      this.config = null as any;\n    }\n    this.validator = new ConfigurableBoardValidator(this.config);\n  }\n\n  /**\n   * Initialize the rules engine (now synchronous)\n   */\n  initialize(): void {\n    if (!this.config) {\n      this.config = GameConfigLoader.loadVariant(this.variantName);\n      this.validator = new ConfigurableBoardValidator(this.config);\n    }\n  }\n\n  /**\n   * Create initial board based on configuration\n   */\n  createInitialBoard(): Board {\n    const size = this.config.board.size;\n    const board: Board = Array(size)\n      .fill(null)\n      .map(() => Array(size).fill(null));\n\n    // Place black pieces\n    for (const row of this.config.board.startingRows.black) {\n      for (let col = 0; col < size; col++) {\n        if (this.validator.isDarkSquare(row, col)) {\n          this.setPiece(\n            board,\n            { row, col },\n            { color: \"black\", type: \"regular\" },\n          );\n        }\n      }\n    }\n\n    // Place red pieces\n    for (const row of this.config.board.startingRows.red) {\n      for (let col = 0; col < size; col++) {\n        if (this.validator.isDarkSquare(row, col)) {\n          this.setPiece(board, { row, col }, { color: \"red\", type: \"regular\" });\n        }\n      }\n    }\n\n    return board;\n  }\n\n  /**\n   * Get valid movement directions based on configuration\n   */\n  getValidDirections(piece: {\n    color: PieceColor;\n    type: PieceType;\n  }): readonly [number, number][] {\n    const movement = this.config.movement;\n\n    if (piece.type === \"king\") {\n      // Kings always move in all diagonal directions\n      return [\n        [-1, -1],\n        [-1, 1],\n        [1, -1],\n        [1, 1],\n      ] as const;\n    }\n\n    // Regular pieces - direction based on configuration\n    const directions: [number, number][] = [];\n    const pieceRules = movement.regularPieces;\n    const colorDirection = pieceRules.directions[piece.color];\n\n    if (colorDirection === \"forward\") {\n      // Forward only (traditional)\n      if (piece.color === \"red\") {\n        directions.push([-1, -1], [-1, 1]); // Red moves up (toward row 0)\n      } else {\n        directions.push([1, -1], [1, 1]); // Black moves down\n      }\n    } else if (colorDirection === \"backward\") {\n      // Backward only (rare)\n      if (piece.color === \"red\") {\n        directions.push([1, -1], [1, 1]); // Red moves down\n      } else {\n        directions.push([-1, -1], [-1, 1]); // Black moves up\n      }\n    } else {\n      // All directions\n      directions.push([-1, -1], [-1, 1], [1, -1], [1, 1]);\n    }\n\n    return directions as readonly [number, number][];\n  }\n\n  /**\n   * Check if piece can capture backward\n   */\n  canCaptureBackward(piece: { color: PieceColor; type: PieceType }): boolean {\n    if (piece.type === \"king\") {\n      return this.config.movement.kings.canCaptureBackward;\n    }\n    return this.config.movement.regularPieces.canCaptureBackward;\n  }\n\n  /**\n   * Check if kings can fly (move multiple squares)\n   */\n  canFlyAsKing(): boolean {\n    return this.config.movement.kings.canFly;\n  }\n\n  /**\n   * Check if mandatory captures are required\n   */\n  isMandatoryCapture(): boolean {\n    return this.config.capture.mandatory;\n  }\n\n  /**\n   * Check if maximum capture rule applies\n   */\n  requiresMaximumCapture(): boolean {\n    return this.config.capture.requireMaximum;\n  }\n\n  /**\n   * Check if king priority rule applies\n   */\n  requiresKingPriority(): boolean {\n    return this.config.capture.kingPriority;\n  }\n\n  /**\n   * Get board size\n   */\n  getBoardSize(): number {\n    return this.config.board.size;\n  }\n\n  /**\n   * Get piece count per player\n   */\n  getPieceCount(): number {\n    return this.config.board.pieceCount;\n  }\n\n  /**\n   * Check if promotion should occur\n   */\n  shouldPromote(\n    piece: { color: PieceColor; type: PieceType },\n    toRow: number,\n  ): boolean {\n    if (piece.type === \"king\") return false;\n    return this.validator.isPromotionRow(piece.color, toRow);\n  }\n\n  /**\n   * Get promotion row for color\n   */\n  getPromotionRow(color: PieceColor): number {\n    const rows = this.config.promotionRows[color];\n    if (rows.length === 0) {\n      throw new Error(`No promotion rows defined for ${color}`);\n    }\n    return rows[0]!; // Return primary promotion row\n  }\n\n  /**\n   * Validate a move based on configuration rules\n   */\n  validateMove(board: Board, move: Move): boolean {\n    const piece = this.getPiece(board, move.from);\n    if (!piece) return false;\n\n    // Basic position validation\n    if (!this.validator.isValidSquare(move.to.row, move.to.col)) {\n      return false;\n    }\n\n    // Destination must be empty\n    if (this.getPiece(board, move.to)) {\n      return false;\n    }\n\n    // Must be dark square\n    if (!this.validator.isDarkSquare(move.to.row, move.to.col)) {\n      return false;\n    }\n\n    // Check if move is a capture\n    if (move.captures && move.captures.length > 0) {\n      return this.validateCapture(board, move);\n    }\n\n    // Regular move validation\n    return this.validateRegularMove(board, move);\n  }\n\n  /**\n   * Validate capture move\n   */\n  validateCapture(board: Board, move: Move): boolean {\n    if (!move.captures || move.captures.length === 0) {\n      return false;\n    }\n\n    const piece = this.getPiece(board, move.from);\n    if (!piece) return false;\n\n    // Check if backward capture is allowed\n    if (!this.canCaptureBackward(piece)) {\n      const dRow = move.to.row - move.from.row;\n\n      // For red pieces, backward means going up (negative dRow)\n      // For black pieces, backward means going down (positive dRow)\n      const isBackward = piece.color === \"red\" ? dRow < 0 : dRow > 0;\n\n      if (isBackward) {\n        return false;\n      }\n    }\n\n    // Validate each captured piece\n    for (const capturePos of move.captures) {\n      const capturedPiece = this.getPiece(board, capturePos);\n      if (!capturedPiece || capturedPiece.color === piece.color) {\n        return false;\n      }\n    }\n\n    // Check maximum capture rule\n    if (this.requiresMaximumCapture()) {\n      return this.isMaximumCaptureMove(board, move);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate regular (non-capture) move\n   */\n  private validateRegularMove(board: Board, move: Move): boolean {\n    const piece = this.getPiece(board, move.from);\n    if (!piece) return false;\n\n    const validDirections = this.getValidDirections(piece);\n    const dRow = move.to.row - move.from.row;\n    const dCol = move.to.col - move.from.col;\n\n    // Check if move direction is valid\n    for (const [validDRow, validDCol] of validDirections) {\n      if (piece.type === \"king\" && this.canFlyAsKing()) {\n        // Flying king - check if direction matches and path is clear\n        if (this.isSameDirection(dRow, dCol, validDRow, validDCol)) {\n          return this.isPathClear(board, move.from, move.to);\n        }\n      } else {\n        // Regular piece or non-flying king - one square move\n        if (dRow === validDRow && dCol === validDCol) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if two direction vectors are in the same direction\n   */\n  private isSameDirection(\n    dRow: number,\n    dCol: number,\n    validDRow: number,\n    validDCol: number,\n  ): boolean {\n    if (dRow === 0 || dCol === 0 || validDRow === 0 || validDCol === 0) {\n      return false; // Not diagonal\n    }\n\n    // Normalize directions to unit vectors\n    const rowSign = Math.sign(dRow);\n    const colSign = Math.sign(dCol);\n    const validRowSign = Math.sign(validDRow);\n    const validColSign = Math.sign(validDCol);\n\n    return rowSign === validRowSign && colSign === validColSign;\n  }\n\n  /**\n   * Check if path between two positions is clear\n   */\n  private isPathClear(board: Board, from: Position, to: Position): boolean {\n    const dRow = to.row - from.row;\n    const dCol = to.col - from.col;\n    const steps = Math.abs(dRow); // Should equal Math.abs(dCol) for diagonal moves\n\n    if (steps !== Math.abs(dCol)) return false;\n\n    const rowStep = Math.sign(dRow);\n    const colStep = Math.sign(dCol);\n\n    // Check each square in the path (excluding start and end)\n    for (let i = 1; i < steps; i++) {\n      const checkRow = from.row + rowStep * i;\n      const checkCol = from.col + colStep * i;\n\n      if (this.getPiece(board, { row: checkRow, col: checkCol })) {\n        return false; // Path blocked\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if capture move satisfies maximum capture rule\n   */\n  private isMaximumCaptureMove(board: Board, move: Move): boolean {\n    const piece = this.getPiece(board, move.from);\n    if (!piece) return false;\n\n    // Find all possible capture moves for this piece\n    const allCaptureMoves = this.getAllCaptureMoves(board, move.from, piece);\n\n    if (allCaptureMoves.length === 0) return false;\n\n    // Find maximum capture count\n    const maxCaptures = Math.max(\n      ...allCaptureMoves.map((m) => m.captures?.length ?? 0),\n    );\n\n    // This move must capture the maximum possible\n    return (move.captures?.length ?? 0) === maxCaptures;\n  }\n\n  /**\n   * Get all possible capture moves from a position\n   */\n  private getAllCaptureMoves(\n    board: Board,\n    from: Position,\n    piece: Piece,\n  ): Move[] {\n    const moves: Move[] = [];\n    const directions = this.getValidDirections(piece);\n\n    for (const [dRow, dCol] of directions) {\n      if (piece.type === \"king\" && this.canFlyAsKing()) {\n        // Flying king captures\n        moves.push(\n          ...this.getFlyingKingCaptures(board, from, [dRow, dCol], piece),\n        );\n      } else {\n        // Regular captures (one square jump)\n        moves.push(\n          ...this.getRegularCaptures(board, from, [dRow, dCol], piece),\n        );\n      }\n    }\n\n    return moves;\n  }\n\n  /**\n   * Get flying king captures in a direction\n   */\n  private getFlyingKingCaptures(\n    board: Board,\n    from: Position,\n    direction: [number, number],\n    piece: Piece,\n  ): Move[] {\n    const moves: Move[] = [];\n    const [dRow, dCol] = direction;\n    let distance = 1;\n    let foundEnemy = false;\n    let enemyPos: Position | null = null;\n\n    // Scan along the diagonal\n    while (true) {\n      const checkRow = from.row + dRow * distance;\n      const checkCol = from.col + dCol * distance;\n\n      if (!this.validator.isValidSquare(checkRow, checkCol)) break;\n\n      const checkPiece = this.getPiece(board, { row: checkRow, col: checkCol });\n\n      if (checkPiece) {\n        if (!foundEnemy && checkPiece.color !== piece.color) {\n          // Found enemy piece\n          foundEnemy = true;\n          enemyPos = { row: checkRow, col: checkCol };\n        } else {\n          // Found another piece (friendly or second enemy) - stop\n          break;\n        }\n      } else if (foundEnemy && enemyPos) {\n        // Empty square after enemy - valid landing spot\n        const tempBoard = this.copyBoard(board);\n        this.setPiece(tempBoard, { row: checkRow, col: checkCol }, piece);\n        this.setPiece(tempBoard, from, null);\n        this.setPiece(tempBoard, enemyPos, null);\n\n        // Look for further captures\n        const furtherCaptures = this.getAllCaptureMoves(\n          tempBoard,\n          { row: checkRow, col: checkCol },\n          piece,\n        );\n\n        if (furtherCaptures.length > 0) {\n          for (const furtherMove of furtherCaptures) {\n            moves.push({\n              from: from,\n              to: furtherMove.to,\n              captures: [enemyPos, ...(furtherMove.captures || [])],\n            });\n          }\n        } else {\n          moves.push({\n            from: from,\n            to: { row: checkRow, col: checkCol },\n            captures: [enemyPos],\n          });\n        }\n      }\n\n      distance++;\n    }\n\n    return moves;\n  }\n\n  /**\n   * Get regular piece captures (one square jump)\n   */\n  private getRegularCaptures(\n    board: Board,\n    from: Position,\n    direction: [number, number],\n    piece: Piece,\n  ): Move[] {\n    const moves: Move[] = [];\n    const [dRow, dCol] = direction;\n    const captureRow = from.row + dRow;\n    const captureCol = from.col + dCol;\n    const landRow = from.row + dRow * 2;\n    const landCol = from.col + dCol * 2;\n\n    if (\n      this.validator.isValidSquare(landRow, landCol) &&\n      this.getPiece(board, { row: captureRow, col: captureCol }) &&\n      this.getPiece(board, { row: captureRow, col: captureCol })!.color !==\n        piece.color &&\n      !this.getPiece(board, { row: landRow, col: landCol })\n    ) {\n      const tempBoard = this.copyBoard(board);\n      this.setPiece(tempBoard, { row: landRow, col: landCol }, piece);\n      this.setPiece(tempBoard, from, null);\n      this.setPiece(tempBoard, { row: captureRow, col: captureCol }, null);\n\n      // Look for further captures\n      const furtherCaptures = this.getAllCaptureMoves(\n        tempBoard,\n        { row: landRow, col: landCol },\n        piece,\n      );\n\n      if (furtherCaptures.length > 0) {\n        for (const furtherMove of furtherCaptures) {\n          moves.push({\n            from: from,\n            to: furtherMove.to,\n            captures: [\n              { row: captureRow, col: captureCol },\n              ...(furtherMove.captures || []),\n            ],\n          });\n        }\n      } else {\n        moves.push({\n          from: from,\n          to: { row: landRow, col: landCol },\n          captures: [{ row: captureRow, col: captureCol }],\n        });\n      }\n    }\n\n    return moves;\n  }\n\n  /**\n   * Find all valid moves for a player\n   */\n  findValidMoves(board: Board, player: PieceColor): Move[] {\n    const moves: Move[] = [];\n    const size = this.config.board.size;\n\n    // First check if captures are available (mandatory capture rule)\n    const captures: Move[] = [];\n\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        const piece = board[row]![col];\n        if (piece && piece.color === player) {\n          const position = { row, col };\n          const pieceCaptures = this.getAllCaptureMoves(board, position, piece);\n          captures.push(...pieceCaptures);\n        }\n      }\n    }\n\n    // If captures are available and mandatory, return only captures\n    if (captures.length > 0 && this.isMandatoryCapture()) {\n      // Apply maximum capture rule if enabled\n      if (this.requiresMaximumCapture()) {\n        const maxCaptures = Math.max(\n          ...captures.map((m) => m.captures?.length ?? 0),\n        );\n        return captures.filter((m) => m.captures?.length === maxCaptures);\n      }\n      return captures;\n    }\n\n    // Otherwise, find regular moves\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        const piece = board[row]![col];\n        if (piece && piece.color === player) {\n          const directions = this.getValidDirections(piece);\n\n          for (const [dRow, dCol] of directions) {\n            const newRow = row + dRow;\n            const newCol = col + dCol;\n\n            if (\n              this.validator.isValidSquare(newRow, newCol) &&\n              !board[newRow]![newCol]\n            ) {\n              const move: Move = {\n                from: { row, col },\n                to: { row: newRow, col: newCol },\n              };\n\n              if (this.validateMove(board, move)) {\n                moves.push(move);\n              }\n            }\n\n            // For flying kings\n            if (piece.type === \"king\" && this.canFlyAsKing()) {\n              for (let dist = 2; dist < size; dist++) {\n                const kingRow = row + dRow * dist;\n                const kingCol = col + dCol * dist;\n\n                if (!this.validator.isValidSquare(kingRow, kingCol)) break;\n                if (board[kingRow]![kingCol]) break;\n\n                const kingMove: Move = {\n                  from: { row, col },\n                  to: { row: kingRow, col: kingCol },\n                };\n\n                if (this.validateMove(board, kingMove)) {\n                  moves.push(kingMove);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return moves;\n  }\n\n  /**\n   * Check for a winner\n   */\n  checkWinner(board: Board): PieceColor | \"draw\" | null {\n    let redPieces = 0;\n    let blackPieces = 0;\n    let redHasMoves = false;\n    let blackHasMoves = false;\n\n    // Count pieces\n    for (let row = 0; row < this.config.board.size; row++) {\n      for (let col = 0; col < this.config.board.size; col++) {\n        const piece = board[row]![col];\n        if (piece) {\n          if (piece.color === \"red\") redPieces++;\n          else blackPieces++;\n        }\n      }\n    }\n\n    // Check if players have valid moves\n    if (redPieces > 0) {\n      const redMoves = this.findValidMoves(board, \"red\");\n      redHasMoves = redMoves.length > 0;\n    }\n\n    if (blackPieces > 0) {\n      const blackMoves = this.findValidMoves(board, \"black\");\n      blackHasMoves = blackMoves.length > 0;\n    }\n\n    // Determine winner\n    if (redPieces === 0 || !redHasMoves) return \"black\";\n    if (blackPieces === 0 || !blackHasMoves) return \"red\";\n\n    // Check for insufficient material\n    if (\n      this.config.draws.insufficientMaterial &&\n      this.checkInsufficientMaterial(board)\n    ) {\n      return \"draw\";\n    }\n\n    return null;\n  }\n\n  /**\n   * Check draw conditions\n   */\n  checkDrawCondition(\n    board: Board,\n    moveHistory: Move[],\n    currentPlayer?: PieceColor,\n  ): \"draw\" | null {\n    const draws = this.config.draws;\n\n    // Check stalemate (no valid moves but not in check)\n    if (draws.staleMate && currentPlayer) {\n      const moves = this.findValidMoves(board, currentPlayer);\n      if (moves.length === 0) {\n        // In checkers, if you can't move, you lose (not draw)\n        // But if configured for stalemate=draw, return draw\n        return \"draw\";\n      }\n    }\n\n    // Check repetition draws\n    if (this.checkRepetition(moveHistory, draws.repetitionLimit)) {\n      return \"draw\";\n    }\n\n    // Check move-count rules\n    if (draws.fortyMoveRule && this.check40MoveRule(moveHistory)) {\n      return \"draw\";\n    }\n\n    if (draws.twentyFiveMoveRule && this.check25MoveRule(board, moveHistory)) {\n      return \"draw\";\n    }\n\n    // Check insufficient material\n    if (draws.insufficientMaterial && this.checkInsufficientMaterial(board)) {\n      return \"draw\";\n    }\n\n    return null;\n  }\n\n  /**\n   * Apply a move to the board\n   */\n  makeMove(board: Board, move: Move): Board {\n    const newBoard = this.copyBoard(board);\n    const piece = this.getPiece(newBoard, move.from);\n\n    if (!piece) return board;\n\n    // Move piece\n    this.setPiece(newBoard, move.to, piece);\n    this.setPiece(newBoard, move.from, null);\n\n    // Remove captured pieces\n    if (move.captures) {\n      for (const capture of move.captures) {\n        this.setPiece(newBoard, capture, null);\n      }\n    }\n\n    // Check for promotion\n    if (this.shouldPromote(piece, move.to.row)) {\n      this.setPiece(newBoard, move.to, { ...piece, type: \"king\" });\n    }\n\n    return newBoard;\n  }\n\n  // Helper methods\n  private getPiece(board: Board, pos: Position): Piece | null {\n    if (!this.validator.isValidSquare(pos.row, pos.col)) {\n      return null;\n    }\n    return board[pos.row]?.[pos.col] ?? null;\n  }\n\n  private setPiece(board: Board, pos: Position, piece: Piece | null): void {\n    if (this.validator.isValidSquare(pos.row, pos.col)) {\n      board[pos.row]![pos.col] = piece;\n    }\n  }\n\n  private copyBoard(board: Board): Board {\n    return board.map((row) =>\n      row.map((piece) => (piece ? { ...piece } : null)),\n    );\n  }\n\n  private checkRepetition(moveHistory: Move[], limit: number): boolean {\n    // Simplified repetition check\n    const recentMoves = moveHistory.slice(-limit * 2); // Last N moves by each player\n    if (recentMoves.length < limit * 2) return false;\n\n    // Check if pattern repeats\n    for (let i = 0; i < limit; i++) {\n      const move1 = recentMoves[i];\n      const move2 = recentMoves[i + limit];\n      if (!this.movesEqual(move1, move2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private movesEqual(move1?: Move, move2?: Move): boolean {\n    if (!move1 || !move2) return false;\n    return (\n      move1.from.row === move2.from.row &&\n      move1.from.col === move2.from.col &&\n      move1.to.row === move2.to.row &&\n      move1.to.col === move2.to.col\n    );\n  }\n\n  private check40MoveRule(moveHistory: Move[]): boolean {\n    let movesWithoutCapture = 0;\n    for (let i = moveHistory.length - 1; i >= 0; i--) {\n      if (moveHistory[i]?.captures && moveHistory[i]!.captures!.length > 0) {\n        break;\n      }\n      movesWithoutCapture++;\n    }\n    return movesWithoutCapture >= 40;\n  }\n\n  private check25MoveRule(board: Board, moveHistory: Move[]): boolean {\n    // Simplified 25-move rule check for endgame\n    const totalPieces = this.countPieces(board);\n    if (totalPieces <= 6) {\n      let movesWithoutCapture = 0;\n      for (let i = moveHistory.length - 1; i >= 0; i--) {\n        if (moveHistory[i]?.captures && moveHistory[i]!.captures!.length > 0) {\n          break;\n        }\n        movesWithoutCapture++;\n      }\n      return movesWithoutCapture >= 25;\n    }\n    return false;\n  }\n\n  private checkInsufficientMaterial(board: Board): boolean {\n    let totalPieces = 0;\n    let kingCount = 0;\n\n    for (let row = 0; row < this.config.board.size; row++) {\n      for (let col = 0; col < this.config.board.size; col++) {\n        const piece = this.getPiece(board, { row, col });\n        if (piece) {\n          totalPieces++;\n          if (piece.type === \"king\") kingCount++;\n        }\n      }\n    }\n\n    // King vs King is insufficient\n    return totalPieces === 2 && kingCount === 2;\n  }\n\n  private countPieces(board: Board): number {\n    let count = 0;\n    for (let row = 0; row < this.config.board.size; row++) {\n      for (let col = 0; col < this.config.board.size; col++) {\n        if (this.getPiece(board, { row, col })) count++;\n      }\n    }\n    return count;\n  }\n\n  // Tournament mode methods\n  enforceTouch(): boolean {\n    return this.config.tournament?.touchMove ?? false;\n  }\n\n  allowUndo(): boolean {\n    return !this.enforceTouch(); // Tournament mode typically disallows undo\n  }\n\n  requiresNotation(): boolean {\n    return this.config.tournament?.notation.required ?? false;\n  }\n\n  get40MoveRule(): boolean {\n    return this.config.draws.fortyMoveRule;\n  }\n\n  getRepetitionLimit(): number {\n    return this.config.draws.repetitionLimit;\n  }\n\n  // Metadata getters\n  get name(): string {\n    return this.config.metadata.name;\n  }\n\n  get displayName(): string {\n    return this.config.metadata.displayName;\n  }\n\n  get description(): string {\n    return this.config.metadata.description;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/rule-configs/american.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/rule-configs/brazilian.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/rule-configs/canadian.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/rule-configs/international.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-engine/rule-schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-logic-multi-board.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":21,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":21,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":24,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":24,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":24,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":24,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":26,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":26,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":30,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":30,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":30,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":40,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":42,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":53,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":53,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":53,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":67,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":69,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":80,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":80,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":90,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":97,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":97,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":100,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":100,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":102,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":102,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":105,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":105,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":114,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":114,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":115,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":115,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":116,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":116,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":117,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":118,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":118,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":125,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":125,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":128,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":128,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":128,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":128,"endColumn":39},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Position' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":136,"column":24,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":136,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [redRow] on an `error` typed value.","line":138,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":146,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":146,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":146,"column":23,"nodeType":"Identifier","messageId":"unsafeCall","endLine":146,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":147,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":150,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":150,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":150,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":151,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number | bigint`.","line":151,"column":44,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":151,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `any` value.","line":151,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":157,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":157,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":157,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":157,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":168,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":168,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [corner.row] on an `error` typed value.","line":168,"column":29,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":168,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [corner.row] resolves to an `error` typed value.","line":168,"column":29,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":168,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `error` typed value.","line":168,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [corner.col] resolves to an `error` typed value.","line":168,"column":41,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":168,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `error` typed value.","line":168,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":170,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":170,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":170,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":170,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":170,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":171,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":171,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":171,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":172,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":172,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":172,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":172,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":180,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":180,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":183,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":183,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":183,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [testRow] on an `error` typed value.","line":189,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [redKingRow] on an `error` typed value.","line":192,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":199,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":199,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":199,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":199,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":200,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":200,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [redKingRow] on an `error` typed value.","line":200,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":203,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":204,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":208,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":208,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":208,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":208,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [testRow] on an `error` typed value.","line":215,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [blackKingRow] on an `error` typed value.","line":218,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":225,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":225,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":225,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":225,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":226,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":226,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [blackKingRow] on an `error` typed value.","line":226,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":226,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":229,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":230,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":235,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":235,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":240,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":240,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow] on an `error` typed value.","line":246,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow - 1] on an `error` typed value.","line":247,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":247,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":249,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":254,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":249,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":249,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow] on an `error` typed value.","line":252,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":256,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":257,"column":25,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":257,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":258,"column":25,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":258,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":259,"column":25,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":259,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":268,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":268,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow] on an `error` typed value.","line":274,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":274,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow - 1] on an `error` typed value.","line":275,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":275,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow] on an `error` typed value.","line":276,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":278,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":278,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":278,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":278,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":279,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":282,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":284,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":282,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":282,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .some on an `error` typed value.","line":282,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .row on an `any` value.","line":283,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .col on an `any` value.","line":283,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":290,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":290,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":295,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":295,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [rules.board.size - 2] on an `error` typed value.","line":298,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":298,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":300,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":300,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":300,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":300,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":307,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":307,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [rules.board.size - 1] on an `error` typed value.","line":310,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":310,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [rules.board.size - 2] on an `error` typed value.","line":312,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":312,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [rules.board.size - 2] on an `error` typed value.","line":313,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":313,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":315,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":315,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":315,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":315,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":320,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":320,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":320,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":320,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":321,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":321,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":321,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":321,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `string`.","line":327,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":327,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":330,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":330,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":330,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":330,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":331,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":331,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":331,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":331,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":335,"column":16,"nodeType":"Identifier","messageId":"unsafeCall","endLine":335,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":335,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":335,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":335,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":335,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":338,"column":16,"nodeType":"Identifier","messageId":"unsafeCall","endLine":338,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":338,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":338,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":341,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":341,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [aiMove.from.row] on an `error` typed value.","line":341,"column":29,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":341,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [aiMove.from.row] resolves to an `error` typed value.","line":341,"column":29,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":341,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":341,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":341,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [aiMove.from.col] resolves to an `error` typed value.","line":341,"column":46,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":341,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":341,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":341,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":343,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":350,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":350,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow] on an `error` typed value.","line":356,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":356,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [midRow - 1] on an `error` typed value.","line":357,"column":13,"nodeType":"BinaryExpression","messageId":"unsafeMemberExpression","endLine":357,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":359,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":359,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":359,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":359,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":363,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":363,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":364,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":364,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":364,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":364,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":372,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":372,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":372,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":372,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":373,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":373,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":373,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":373,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":374,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":374,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":374,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":374,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":374,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":374,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .flat on an `error` typed value.","line":374,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":374,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":375,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":375,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":375,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":375,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":375,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":375,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":376,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":376,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":376,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":376,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":376,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":376,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":383,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":383,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":383,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":383,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":384,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":384,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":384,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":384,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":385,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":385,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":385,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":385,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":385,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":385,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .flat on an `error` typed value.","line":385,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":385,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":386,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":386,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":386,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":386,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":386,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":386,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":386,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":386,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":387,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":387,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":387,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":387,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":387,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":387,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":394,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":394,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":394,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":394,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":395,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":395,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":395,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":395,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":396,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":396,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":396,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":396,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":396,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":396,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .flat on an `error` typed value.","line":396,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":396,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":397,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":397,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":397,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":397,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":397,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":397,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":398,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":398,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":398,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":398,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":398,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":398,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":398,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":398,"endColumn":56}],"suppressedMessages":[],"errorCount":190,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport {\n  createInitialBoard,\n  isValidSquare,\n  getValidMoves,\n  getCaptureMoves,\n  getMustCapturePositions,\n  makeMove,\n  checkWinner,\n  getRandomAIMove,\n  type Board,\n  type Position,\n} from \"./game-logic\";\nimport { GameConfigLoader } from \"./game-engine/config-loader\";\nimport type { BoardVariant } from \"./variants\";\n\ndescribe(\"Game Logic - Multiple Board Sizes\", () => {\n  const variants: BoardVariant[] = [\"american\", \"international\", \"canadian\"];\n\n  describe.each(variants)(\"createInitialBoard - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(`should create a ${rules.board.size}x${rules.board.size} board`, () => {\n      const board = createInitialBoard(rules);\n      expect(board).toHaveLength(rules.board.size);\n      board.forEach((row) => expect(row).toHaveLength(rules.board.size));\n    });\n\n    it(`should place correct number of black pieces in top rows`, () => {\n      const board = createInitialBoard(rules);\n      let blackPieces = 0;\n      const pieceRows = Math.max(\n        rules.board.startingRows.red.length,\n        rules.board.startingRows.black.length,\n      );\n      const expectedPieces = Math.floor((rules.board.size * pieceRows) / 2);\n\n      for (let row = 0; row < pieceRows; row++) {\n        for (let col = 0; col < rules.board.size; col++) {\n          if (board[row][col]?.color === \"black\") {\n            blackPieces++;\n            expect(board[row][col]?.type).toBe(\"regular\");\n            // Should only be on dark squares\n            expect((row + col) % 2).toBe(1);\n          }\n        }\n      }\n\n      expect(blackPieces).toBe(expectedPieces);\n    });\n\n    it(`should place correct number of red pieces in bottom rows`, () => {\n      const board = createInitialBoard(rules);\n      let redPieces = 0;\n      const pieceRows = Math.max(\n        rules.board.startingRows.red.length,\n        rules.board.startingRows.black.length,\n      );\n      const expectedPieces = Math.floor((rules.board.size * pieceRows) / 2);\n\n      for (\n        let row = rules.board.size - pieceRows;\n        row < rules.board.size;\n        row++\n      ) {\n        for (let col = 0; col < rules.board.size; col++) {\n          if (board[row][col]?.color === \"red\") {\n            redPieces++;\n            expect(board[row][col]?.type).toBe(\"regular\");\n            // Should only be on dark squares\n            expect((row + col) % 2).toBe(1);\n          }\n        }\n      }\n\n      expect(redPieces).toBe(expectedPieces);\n    });\n\n    it(\"should have empty middle rows\", () => {\n      const board = createInitialBoard(rules);\n      const pieceRows = Math.max(\n        rules.board.startingRows.red.length,\n        rules.board.startingRows.black.length,\n      );\n      const startEmptyRow = pieceRows;\n      const endEmptyRow = rules.board.size - pieceRows;\n\n      for (let row = startEmptyRow; row < endEmptyRow; row++) {\n        for (let col = 0; col < rules.board.size; col++) {\n          expect(board[row][col]).toBeNull();\n        }\n      }\n    });\n  });\n\n  describe.each(variants)(\"isValidSquare - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(\"should validate squares within board boundaries\", () => {\n      expect(isValidSquare(0, 0, rules)).toBe(true);\n      expect(\n        isValidSquare(rules.board.size - 1, rules.board.size - 1, rules),\n      ).toBe(true);\n      expect(\n        isValidSquare(\n          Math.floor(rules.board.size / 2),\n          Math.floor(rules.board.size / 2),\n          rules,\n        ),\n      ).toBe(true);\n    });\n\n    it(\"should invalidate squares outside board boundaries\", () => {\n      expect(isValidSquare(-1, 0, rules)).toBe(false);\n      expect(isValidSquare(0, -1, rules)).toBe(false);\n      expect(isValidSquare(rules.board.size, 0, rules)).toBe(false);\n      expect(isValidSquare(0, rules.board.size, rules)).toBe(false);\n      expect(isValidSquare(rules.board.size, rules.board.size, rules)).toBe(\n        false,\n      );\n    });\n  });\n\n  describe.each(variants)(\"getValidMoves - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(\"should find valid moves for red pieces at start\", () => {\n      const board = createInitialBoard(rules);\n      const pieceRows = Math.max(\n        rules.board.startingRows.red.length,\n        rules.board.startingRows.black.length,\n      );\n      const redRow = rules.board.size - pieceRows;\n\n      // Find a red piece\n      let redPosition: Position | null = null;\n      for (let col = 0; col < rules.board.size; col++) {\n        if (board[redRow][col]?.color === \"red\") {\n          redPosition = { row: redRow, col };\n          break;\n        }\n      }\n\n      expect(redPosition).not.toBeNull();\n      if (redPosition) {\n        const moves = getValidMoves(board, redPosition, \"red\", rules);\n        expect(moves.length).toBeGreaterThan(0);\n\n        // All moves should be forward (decreasing row)\n        moves.forEach((move) => {\n          expect(move.to.row).toBeLessThan(move.from.row);\n        });\n      }\n    });\n\n    it(\"should not allow moves outside board boundaries\", () => {\n      const board = createInitialBoard(rules);\n\n      // Test corner pieces\n      const corners: Position[] = [\n        { row: 0, col: 1 }, // Top-left dark square\n        { row: 0, col: rules.board.size - 2 }, // Top-right dark square\n        { row: rules.board.size - 1, col: 0 }, // Bottom-left dark square\n        { row: rules.board.size - 1, col: rules.board.size - 1 }, // Bottom-right dark square\n      ];\n\n      corners.forEach((corner) => {\n        const piece = board[corner.row][corner.col];\n        if (piece) {\n          const moves = getValidMoves(board, corner, piece.color, rules);\n          moves.forEach((move) => {\n            expect(isValidSquare(move.to.row, move.to.col, rules)).toBe(true);\n          });\n        }\n      });\n    });\n  });\n\n  describe.each(variants)(\"makeMove and king promotion - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(`should promote red piece to king at row`, () => {\n      const board = createInitialBoard(rules);\n\n      // Place a red piece near the king row\n      const redKingRow = rules.promotion.customRows?.red?.[0] ?? 0;\n      const testRow = redKingRow + 1;\n      const testCol = 0;\n      board[testRow][testCol] = { color: \"red\", type: \"regular\" };\n\n      // Clear the destination\n      board[redKingRow][testCol + 1] = null;\n\n      const move = {\n        from: { row: testRow, col: testCol },\n        to: { row: redKingRow, col: testCol + 1 },\n      };\n\n      const newBoard = makeMove(board, move, rules);\n      const movedPiece = newBoard[redKingRow][testCol + 1];\n\n      expect(movedPiece).not.toBeNull();\n      expect(movedPiece?.type).toBe(\"king\");\n      expect(movedPiece?.color).toBe(\"red\");\n    });\n\n    it(`should promote black piece to king at row`, () => {\n      const board = createInitialBoard(rules);\n\n      // Place a black piece near the king row\n      const blackKingRow =\n        rules.promotion.customRows?.black?.[0] ?? rules.board.size - 1;\n      const testRow = blackKingRow - 1;\n      const testCol = 0;\n      board[testRow][testCol] = { color: \"black\", type: \"regular\" };\n\n      // Clear the destination\n      board[blackKingRow][testCol + 1] = null;\n\n      const move = {\n        from: { row: testRow, col: testCol },\n        to: { row: blackKingRow, col: testCol + 1 },\n      };\n\n      const newBoard = makeMove(board, move, rules);\n      const movedPiece = newBoard[blackKingRow][testCol + 1];\n\n      expect(movedPiece).not.toBeNull();\n      expect(movedPiece?.type).toBe(\"king\");\n      expect(movedPiece?.color).toBe(\"black\");\n    });\n  });\n\n  describe.each(variants)(\"capture moves - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(\"should detect capture moves across different board sizes\", () => {\n      const board: Board = Array(rules.board.size)\n        .fill(null)\n        .map(() => Array(rules.board.size).fill(null));\n\n      // Set up a capture scenario in the middle of the board\n      const midRow = Math.floor(rules.board.size / 2);\n      const midCol = Math.floor(rules.board.size / 2);\n\n      board[midRow][midCol] = { color: \"red\", type: \"regular\" };\n      board[midRow - 1][midCol + 1] = { color: \"black\", type: \"regular\" };\n\n      const captures = getCaptureMoves(\n        board,\n        { row: midRow, col: midCol },\n        board[midRow][midCol],\n        rules,\n      );\n\n      if (captures.length > 0) {\n        expect(captures[0].to.row).toBe(midRow - 2);\n        expect(captures[0].to.col).toBe(midCol + 2);\n        expect(captures[0].captures).toEqual([\n          { row: midRow - 1, col: midCol + 1 },\n        ]);\n      }\n    });\n\n    it(\"should enforce mandatory captures\", () => {\n      const board: Board = Array(rules.board.size)\n        .fill(null)\n        .map(() => Array(rules.board.size).fill(null));\n\n      // Set up a scenario with a mandatory capture\n      const midRow = Math.floor(rules.board.size / 2);\n      const midCol = Math.floor(rules.board.size / 2);\n\n      board[midRow][midCol] = { color: \"red\", type: \"regular\" };\n      board[midRow - 1][midCol + 1] = { color: \"black\", type: \"regular\" };\n      board[midRow][midCol + 2] = { color: \"red\", type: \"regular\" }; // Another red piece\n\n      const mustCapture = getMustCapturePositions(board, \"red\", rules);\n      expect(mustCapture.length).toBeGreaterThan(0);\n\n      // The piece that can capture should be in the must-capture list\n      const canCapture = mustCapture.some(\n        (pos) => pos.row === midRow && pos.col === midCol,\n      );\n      expect(canCapture).toBe(true);\n    });\n  });\n\n  describe.each(variants)(\"checkWinner - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(\"should detect winner when opponent has no pieces\", () => {\n      const board: Board = Array(rules.board.size)\n        .fill(null)\n        .map(() => Array(rules.board.size).fill(null));\n\n      // Only red pieces on the board\n      board[rules.board.size - 2][1] = { color: \"red\", type: \"regular\" };\n\n      const winner = checkWinner(board, rules);\n      expect(winner).toBe(\"red\");\n    });\n\n    it(\"should detect winner when opponent has no valid moves\", () => {\n      const board: Board = Array(rules.board.size)\n        .fill(null)\n        .map(() => Array(rules.board.size).fill(null));\n\n      // Black piece completely blocked (cannot move forward)\n      board[rules.board.size - 1][1] = { color: \"black\", type: \"regular\" };\n      // Add red pieces to ensure red can move\n      board[rules.board.size - 2][0] = { color: \"red\", type: \"regular\" };\n      board[rules.board.size - 2][2] = { color: \"red\", type: \"regular\" };\n\n      const winner = checkWinner(board, rules);\n      expect(winner).toBe(\"red\");\n    });\n\n    it(\"should return null when game is ongoing\", () => {\n      const board = createInitialBoard(rules);\n      const winner = checkWinner(board, rules);\n      expect(winner).toBeNull();\n    });\n  });\n\n  describe.each(variants)(\"AI moves - %s\", (variant) => {\n    const rules = GameConfigLoader.exportVariant(variant)!;\n\n    it(\"should generate valid AI moves\", () => {\n      const board = createInitialBoard(rules);\n      const aiMove = getRandomAIMove(board, \"red\", rules);\n\n      expect(aiMove).not.toBeNull();\n      if (aiMove) {\n        expect(isValidSquare(aiMove.from.row, aiMove.from.col, rules)).toBe(\n          true,\n        );\n        expect(isValidSquare(aiMove.to.row, aiMove.to.col, rules)).toBe(true);\n\n        // Verify the piece exists and belongs to AI\n        const piece = board[aiMove.from.row][aiMove.from.col];\n        expect(piece).not.toBeNull();\n        expect(piece?.color).toBe(\"red\");\n      }\n    });\n\n    it(\"should prefer capture moves when available\", () => {\n      const board: Board = Array(rules.board.size)\n        .fill(null)\n        .map(() => Array(rules.board.size).fill(null));\n\n      // Set up a scenario where AI must capture\n      const midRow = Math.floor(rules.board.size / 2);\n      const midCol = Math.floor(rules.board.size / 2);\n\n      board[midRow][midCol] = { color: \"red\", type: \"regular\" };\n      board[midRow - 1][midCol + 1] = { color: \"black\", type: \"regular\" };\n\n      const aiMove = getRandomAIMove(board, \"red\", rules);\n\n      expect(aiMove).not.toBeNull();\n      if (aiMove) {\n        expect(aiMove.captures).toBeDefined();\n        expect(aiMove.captures!.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  // Test specific piece counts for each variant\n  describe(\"Piece counts per variant\", () => {\n    it(\"American checkers should have 12 pieces per side\", () => {\n      const config = getBoardConfig(\"american\");\n      const board = createInitialBoard(config);\n      const pieces = board.flat().filter((p) => p !== null);\n      const redPieces = pieces.filter((p) => p?.color === \"red\");\n      const blackPieces = pieces.filter((p) => p?.color === \"black\");\n\n      expect(redPieces).toHaveLength(12);\n      expect(blackPieces).toHaveLength(12);\n    });\n\n    it(\"International draughts should have 20 pieces per side\", () => {\n      const config = getBoardConfig(\"international\");\n      const board = createInitialBoard(config);\n      const pieces = board.flat().filter((p) => p !== null);\n      const redPieces = pieces.filter((p) => p?.color === \"red\");\n      const blackPieces = pieces.filter((p) => p?.color === \"black\");\n\n      expect(redPieces).toHaveLength(20);\n      expect(blackPieces).toHaveLength(20);\n    });\n\n    it(\"Canadian checkers should have 30 pieces per side\", () => {\n      const config = getBoardConfig(\"canadian\");\n      const board = createInitialBoard(config);\n      const pieces = board.flat().filter((p) => p !== null);\n      const redPieces = pieces.filter((p) => p?.color === \"red\");\n      const blackPieces = pieces.filter((p) => p?.color === \"black\");\n\n      expect(redPieces).toHaveLength(30);\n      expect(blackPieces).toHaveLength(30);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game-logic.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":17,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":17,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":17,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":19,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forEach on an `error` typed value.","line":19,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":23,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":23,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":23,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":28,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":30,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":39,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":39,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":39,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":44,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":46,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":55,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":55,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":55,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":61,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":61,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":68,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":68,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":68,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":72,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":80,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":80,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":81,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":81,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":82,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":82,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":86,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":86,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":87,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":87,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":88,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":88,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":89,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":89,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":90,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":90,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":98,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":98,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":99,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":99,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":101,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":101,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":101,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":117,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":117,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":118,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":118,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":120,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":120,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":120,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":120,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":136,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":136,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":137,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":137,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":139,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":139,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":139,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":163,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":163,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":164,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":164,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":165,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":165,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":167,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":167,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":167,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":167,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":179,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":179,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":180,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":180,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":181,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":181,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":184,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":184,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":184,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":184,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":188,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":188,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":202,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":202,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":203,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":203,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":205,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":205,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":205,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":205,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":208,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":208,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":219,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":219,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":220,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":220,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":221,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":221,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":223,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":223,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":223,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":223,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":223,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":223,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":226,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":226,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":240,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":240,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":241,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":241,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":242,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":242,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":243,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":243,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":245,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":245,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":245,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":245,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":245,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":245,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":253,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":253,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":254,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":254,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":255,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":255,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":256,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":256,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":258,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":258,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":258,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":258,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":258,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":258,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":261,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":261,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":261,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":261,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `any` value.","line":261,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":263,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":263,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":264,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":265,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":265,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":271,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":271,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":272,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":272,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":273,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":273,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":274,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":274,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":276,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":276,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":276,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":276,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":276,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":276,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":279,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":281,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":283,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":281,"column":31,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":281,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .find on an `error` typed value.","line":281,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":281,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":282,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `any` value.","line":282,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":285,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":291,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":291,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":292,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":292,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":293,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":293,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":295,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":295,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":295,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":295,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":295,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":295,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":303,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":303,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":304,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":304,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":305,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":305,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":306,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":306,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":308,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":308,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":308,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":308,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":308,"column":73,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":308,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":316,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":316,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":316,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":316,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":318,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":318,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":318,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":318,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":326,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":326,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":327,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":327,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":328,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":328,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":329,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":329,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":331,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":331,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":331,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":331,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":334,"column":24,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":334,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":340,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":340,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":341,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":341,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":342,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":342,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":343,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":343,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":344,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":344,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":346,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":346,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":346,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":346,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":358,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":358,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":359,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":359,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":361,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":364,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":361,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":361,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":366,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":366,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":367,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":367,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":373,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":373,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":374,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":374,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":375,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":375,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":377,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":381,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":377,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":377,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":383,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":383,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":384,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":384,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":385,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":385,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":391,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":391,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":392,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":392,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":393,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":393,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":394,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":394,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":396,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":403,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":396,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":396,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":405,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":405,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":406,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":406,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":407,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":407,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":413,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":413,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":414,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":414,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":416,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":419,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":416,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":416,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":421,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":421,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":427,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":427,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [6] on an `error` typed value.","line":428,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":428,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":430,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":433,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":430,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":430,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":435,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":435,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":441,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":441,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":442,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":442,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":444,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":447,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":444,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":444,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":449,"column":23,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":449,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":455,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":455,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":456,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":456,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":457,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":457,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":457,"column":35,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":457,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":459,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":459,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":464,"column":20,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":464,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":470,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":470,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":470,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":470,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":472,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":472,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":478,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":478,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":479,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":479,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [5] on an `error` typed value.","line":480,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":480,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":482,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":482,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":488,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":488,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":489,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":489,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `error` typed value.","line":490,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":490,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":492,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":492,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":500,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":500,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":502,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":502,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":504,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":504,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":504,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":504,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":511,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":511,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":513,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":513,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `error` typed value.","line":514,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":514,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":517,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":517,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":517,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":517,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":526,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":526,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":529,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":529,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":535,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":535,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":535,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":535,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":537,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":537,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":537,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":537,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [move.from.row] on an `error` typed value.","line":541,"column":22,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":541,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [move.from.row] resolves to an `error` typed value.","line":541,"column":22,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":541,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":541,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":541,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [move.from.col] resolves to an `error` typed value.","line":541,"column":37,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":541,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":541,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":541,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":543,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":543,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":543,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":543,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":543,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":543,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":551,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":551,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `error` typed value.","line":552,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":552,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":553,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":553,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":555,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":555,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":555,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":555,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":558,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":558,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":559,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":559,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":565,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":565,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [7] on an `error` typed value.","line":569,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":569,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":572,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":572,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":572,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":572,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":581,"column":20,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":581,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [4] on an `error` typed value.","line":582,"column":13,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":582,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":584,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":584,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":584,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":584,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":587,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":587,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":591,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":591,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":591,"column":21,"nodeType":"Identifier","messageId":"unsafeCall","endLine":591,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":596,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":596,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":596,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":596,"endColumn":37}],"suppressedMessages":[],"errorCount":225,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport {\n  createInitialBoard,\n  isValidSquare,\n  getValidMoves,\n  getCaptureMoves,\n  getMustCapturePositions,\n  makeMove,\n  checkWinner,\n  getRandomAIMove,\n  type Board,\n} from \"./game-logic\";\n\ndescribe(\"Game Logic\", () => {\n  describe(\"createInitialBoard\", () => {\n    it(\"should create an 8x8 board\", () => {\n      const board = createInitialBoard();\n      expect(board).toHaveLength(8);\n      board.forEach((row) => expect(row).toHaveLength(8));\n    });\n\n    it(\"should place 12 black pieces in top 3 rows\", () => {\n      const board = createInitialBoard();\n      let blackPieces = 0;\n\n      for (let row = 0; row < 3; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (board[row][col]?.color === \"black\") {\n            blackPieces++;\n            expect(board[row][col]?.type).toBe(\"regular\");\n          }\n        }\n      }\n\n      expect(blackPieces).toBe(12);\n    });\n\n    it(\"should place 12 red pieces in bottom 3 rows\", () => {\n      const board = createInitialBoard();\n      let redPieces = 0;\n\n      for (let row = 5; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (board[row][col]?.color === \"red\") {\n            redPieces++;\n            expect(board[row][col]?.type).toBe(\"regular\");\n          }\n        }\n      }\n\n      expect(redPieces).toBe(12);\n    });\n\n    it(\"should place pieces only on dark squares\", () => {\n      const board = createInitialBoard();\n\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if ((row + col) % 2 === 0) {\n            // Light squares should be empty\n            expect(board[row][col]).toBeNull();\n          }\n        }\n      }\n    });\n\n    it(\"should leave middle 2 rows empty\", () => {\n      const board = createInitialBoard();\n\n      for (let row = 3; row < 5; row++) {\n        for (let col = 0; col < 8; col++) {\n          expect(board[row][col]).toBeNull();\n        }\n      }\n    });\n  });\n\n  describe(\"isValidSquare\", () => {\n    it(\"should return true for valid board positions\", () => {\n      expect(isValidSquare(0, 0)).toBe(true);\n      expect(isValidSquare(7, 7)).toBe(true);\n      expect(isValidSquare(3, 4)).toBe(true);\n    });\n\n    it(\"should return false for invalid board positions\", () => {\n      expect(isValidSquare(-1, 0)).toBe(false);\n      expect(isValidSquare(0, -1)).toBe(false);\n      expect(isValidSquare(8, 0)).toBe(false);\n      expect(isValidSquare(0, 8)).toBe(false);\n      expect(isValidSquare(10, 10)).toBe(false);\n    });\n  });\n\n  describe(\"getValidMoves\", () => {\n    it(\"should return forward diagonal moves for red regular piece\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 5, col: 2 }, \"red\");\n\n      expect(moves).toHaveLength(2);\n      expect(moves).toContainEqual({\n        from: { row: 5, col: 2 },\n        to: { row: 4, col: 1 },\n      });\n      expect(moves).toContainEqual({\n        from: { row: 5, col: 2 },\n        to: { row: 4, col: 3 },\n      });\n    });\n\n    it(\"should return forward diagonal moves for black regular piece\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[2][3] = { color: \"black\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 2, col: 3 }, \"black\");\n\n      expect(moves).toHaveLength(2);\n      expect(moves).toContainEqual({\n        from: { row: 2, col: 3 },\n        to: { row: 3, col: 2 },\n      });\n      expect(moves).toContainEqual({\n        from: { row: 2, col: 3 },\n        to: { row: 3, col: 4 },\n      });\n    });\n\n    it(\"should return all diagonal moves for king piece\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[4][4] = { color: \"red\", type: \"king\" };\n\n      const moves = getValidMoves(board, { row: 4, col: 4 }, \"red\");\n\n      expect(moves).toHaveLength(4);\n      expect(moves).toContainEqual({\n        from: { row: 4, col: 4 },\n        to: { row: 3, col: 3 },\n      });\n      expect(moves).toContainEqual({\n        from: { row: 4, col: 4 },\n        to: { row: 3, col: 5 },\n      });\n      expect(moves).toContainEqual({\n        from: { row: 4, col: 4 },\n        to: { row: 5, col: 3 },\n      });\n      expect(moves).toContainEqual({\n        from: { row: 4, col: 4 },\n        to: { row: 5, col: 5 },\n      });\n    });\n\n    it(\"should not return moves to occupied squares\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][1] = { color: \"red\", type: \"regular\" }; // Block one move\n\n      const moves = getValidMoves(board, { row: 5, col: 2 }, \"red\");\n\n      expect(moves).toHaveLength(1);\n      expect(moves).toContainEqual({\n        from: { row: 5, col: 2 },\n        to: { row: 4, col: 3 },\n      });\n    });\n\n    it(\"should return only capture moves when captures are available\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n      // Empty at [3][4] for landing\n\n      const moves = getValidMoves(board, { row: 5, col: 2 }, \"red\");\n\n      // Should only return the capture move\n      expect(moves).toHaveLength(1);\n      expect(moves[0]).toEqual({\n        from: { row: 5, col: 2 },\n        to: { row: 3, col: 4 },\n        captures: [{ row: 4, col: 3 }],\n        path: [\n          { row: 5, col: 2 },\n          { row: 3, col: 4 },\n        ],\n      });\n    });\n\n    it(\"should not return moves at edge of board\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[0][0] = { color: \"black\", type: \"regular\" };\n\n      const moves = getValidMoves(board, { row: 0, col: 0 }, \"black\");\n\n      expect(moves).toHaveLength(1);\n      expect(moves[0]).toEqual({\n        from: { row: 0, col: 0 },\n        to: { row: 1, col: 1 },\n      });\n    });\n  });\n\n  describe(\"getCaptureMoves\", () => {\n    it(\"should detect single capture for regular piece\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n\n      const captures = getCaptureMoves(board, { row: 5, col: 2 }, board[5][2]);\n\n      expect(captures).toHaveLength(1);\n      expect(captures[0]).toEqual({\n        from: { row: 5, col: 2 },\n        to: { row: 3, col: 4 },\n        captures: [{ row: 4, col: 3 }],\n        path: [\n          { row: 5, col: 2 },\n          { row: 3, col: 4 },\n        ],\n      });\n    });\n\n    it(\"should detect multiple single captures\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][4] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n      board[4][5] = { color: \"black\", type: \"regular\" };\n\n      const captures = getCaptureMoves(board, { row: 5, col: 4 }, board[5][4]);\n\n      expect(captures).toHaveLength(2);\n    });\n\n    it(\"should detect multi-jump sequences\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[7][0] = { color: \"red\", type: \"regular\" };\n      board[6][1] = { color: \"black\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n\n      const captures = getCaptureMoves(board, { row: 7, col: 0 }, board[7][0]);\n\n      // Should detect the double jump\n      const multiJump = captures.find((m) => m.captures?.length === 2);\n      expect(multiJump).toBeDefined();\n      expect(multiJump?.captures).toContainEqual({ row: 6, col: 1 });\n      expect(multiJump?.captures).toContainEqual({ row: 4, col: 3 });\n      expect(multiJump?.to).toEqual({ row: 3, col: 4 });\n    });\n\n    it(\"should allow king to capture backwards\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[3][4] = { color: \"red\", type: \"king\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n      board[2][3] = { color: \"black\", type: \"regular\" };\n\n      const captures = getCaptureMoves(board, { row: 3, col: 4 }, board[3][4]);\n\n      // King should be able to capture in both directions\n      expect(captures.length).toBeGreaterThanOrEqual(2);\n\n      const backwardCapture = captures.find(\n        (m) => m.to.row === 1 && m.to.col === 2,\n      );\n      expect(backwardCapture).toBeDefined();\n      expect(backwardCapture?.captures).toContainEqual({ row: 2, col: 3 });\n    });\n\n    it(\"should not capture friendly pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"red\", type: \"regular\" }; // Friendly piece\n\n      const captures = getCaptureMoves(board, { row: 5, col: 2 }, board[5][2]);\n\n      expect(captures).toHaveLength(0);\n    });\n\n    it(\"should not capture if landing square is occupied\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n      board[3][4] = { color: \"black\", type: \"regular\" }; // Block landing\n\n      const captures = getCaptureMoves(board, { row: 5, col: 2 }, board[5][2]);\n\n      expect(captures).toHaveLength(0);\n    });\n  });\n\n  describe(\"getMustCapturePositions\", () => {\n    it(\"should return empty array when no captures available\", () => {\n      const board = createInitialBoard();\n\n      const positions = getMustCapturePositions(board, \"red\");\n\n      expect(positions).toEqual([]);\n    });\n\n    it(\"should detect positions with mandatory captures\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n      board[5][6] = { color: \"red\", type: \"regular\" }; // No capture available\n\n      const positions = getMustCapturePositions(board, \"red\");\n\n      expect(positions).toHaveLength(1);\n      expect(positions[0]).toEqual({ row: 5, col: 2 });\n    });\n\n    it(\"should detect multiple positions with captures\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n      board[5][6] = { color: \"red\", type: \"regular\" };\n      board[4][5] = { color: \"black\", type: \"regular\" };\n\n      const positions = getMustCapturePositions(board, \"red\");\n\n      expect(positions).toHaveLength(2);\n      expect(positions).toContainEqual({ row: 5, col: 2 });\n      expect(positions).toContainEqual({ row: 5, col: 6 });\n    });\n  });\n\n  describe(\"makeMove\", () => {\n    it(\"should move piece to new position\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n\n      const newBoard = makeMove(board, {\n        from: { row: 5, col: 2 },\n        to: { row: 4, col: 3 },\n      });\n\n      expect(newBoard[5][2]).toBeNull();\n      expect(newBoard[4][3]).toEqual({ color: \"red\", type: \"regular\" });\n    });\n\n    it(\"should remove captured pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n\n      const newBoard = makeMove(board, {\n        from: { row: 5, col: 2 },\n        to: { row: 3, col: 4 },\n        captures: [{ row: 4, col: 3 }],\n      });\n\n      expect(newBoard[5][2]).toBeNull();\n      expect(newBoard[4][3]).toBeNull(); // Captured piece removed\n      expect(newBoard[3][4]).toEqual({ color: \"red\", type: \"regular\" });\n    });\n\n    it(\"should remove multiple captured pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[7][0] = { color: \"red\", type: \"regular\" };\n      board[6][1] = { color: \"black\", type: \"regular\" };\n      board[4][3] = { color: \"black\", type: \"regular\" };\n\n      const newBoard = makeMove(board, {\n        from: { row: 7, col: 0 },\n        to: { row: 3, col: 4 },\n        captures: [\n          { row: 6, col: 1 },\n          { row: 4, col: 3 },\n        ],\n      });\n\n      expect(newBoard[6][1]).toBeNull();\n      expect(newBoard[4][3]).toBeNull();\n      expect(newBoard[3][4]).toEqual({ color: \"red\", type: \"regular\" });\n    });\n\n    it(\"should promote red piece to king when reaching row 0\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[1][2] = { color: \"red\", type: \"regular\" };\n\n      const newBoard = makeMove(board, {\n        from: { row: 1, col: 2 },\n        to: { row: 0, col: 3 },\n      });\n\n      expect(newBoard[0][3]).toEqual({ color: \"red\", type: \"king\" });\n    });\n\n    it(\"should promote black piece to king when reaching row 7\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[6][3] = { color: \"black\", type: \"regular\" };\n\n      const newBoard = makeMove(board, {\n        from: { row: 6, col: 3 },\n        to: { row: 7, col: 4 },\n      });\n\n      expect(newBoard[7][4]).toEqual({ color: \"black\", type: \"king\" });\n    });\n\n    it(\"should not promote king pieces again\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[1][2] = { color: \"red\", type: \"king\" };\n\n      const newBoard = makeMove(board, {\n        from: { row: 1, col: 2 },\n        to: { row: 0, col: 3 },\n      });\n\n      expect(newBoard[0][3]).toEqual({ color: \"red\", type: \"king\" });\n    });\n\n    it(\"should not modify original board\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      const originalPiece = board[5][2];\n\n      makeMove(board, {\n        from: { row: 5, col: 2 },\n        to: { row: 4, col: 3 },\n      });\n\n      expect(board[5][2]).toBe(originalPiece);\n    });\n  });\n\n  describe(\"checkWinner\", () => {\n    it(\"should return null for ongoing game\", () => {\n      const board = createInitialBoard();\n\n      expect(checkWinner(board)).toBeNull();\n    });\n\n    it(\"should return red when only red pieces remain\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[5][2] = { color: \"red\", type: \"regular\" };\n      board[5][4] = { color: \"red\", type: \"regular\" };\n\n      expect(checkWinner(board)).toBe(\"red\");\n    });\n\n    it(\"should return black when only black pieces remain\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[2][3] = { color: \"black\", type: \"regular\" };\n      board[2][5] = { color: \"black\", type: \"regular\" };\n\n      expect(checkWinner(board)).toBe(\"black\");\n    });\n\n    it(\"should return winner when opponent has no valid moves\", () => {\n      // Test is actually checking if the function works correctly\n      // When red has no pieces, black wins\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      // Just add a black piece, no red pieces\n      board[0][0] = { color: \"black\", type: \"regular\" };\n\n      const winner = checkWinner(board);\n      expect(winner).toBe(\"black\"); // Black wins because red has no pieces\n    });\n\n    it(\"should return draw when neither player can move\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      // Create a blocked situation where neither can move\n      board[0][1] = { color: \"black\", type: \"regular\" };\n      board[1][0] = { color: \"red\", type: \"regular\" };\n\n      // Mock a situation where both are blocked\n      const winner = checkWinner(board);\n      // This might be 'red' or 'black' depending on who can move\n      // The key is it returns a definitive result\n      expect(winner).not.toBeNull();\n    });\n\n    it(\"should handle empty board\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n\n      // Empty board has no red pieces, so black wins\n      expect(checkWinner(board)).toBe(\"black\");\n    });\n  });\n\n  describe(\"getRandomAIMove\", () => {\n    it(\"should return a valid move for AI\", () => {\n      const board = createInitialBoard();\n\n      const move = getRandomAIMove(board, \"black\");\n\n      expect(move).not.toBeNull();\n      if (move) {\n        expect(board[move.from.row][move.from.col]?.color).toBe(\"black\");\n        // Verify it's a valid move\n        const validMoves = getValidMoves(board, move.from, \"black\");\n        expect(validMoves).toContainEqual(move);\n      }\n    });\n\n    it(\"should prioritize capture moves\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[3][2] = { color: \"black\", type: \"regular\" };\n      board[4][3] = { color: \"red\", type: \"regular\" };\n\n      const move = getRandomAIMove(board, \"black\");\n\n      expect(move).not.toBeNull();\n      expect(move?.captures).toBeDefined();\n      expect(move?.captures?.length).toBeGreaterThan(0);\n    });\n\n    it(\"should return null when no moves available\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      // Black regular piece at row 7 can still capture backwards!\n      // Let's place it where it truly can't move\n      // Put a black regular piece with no valid moves\n      board[7][7] = { color: \"black\", type: \"regular\" };\n      // At corner [7][7], it can't move anywhere as regular piece\n\n      const move = getRandomAIMove(board, \"black\");\n\n      // Black regular piece at bottom-right corner can't move\n      expect(move).toBeNull();\n    });\n\n    it(\"should handle king pieces\", () => {\n      const board: Board = Array(8)\n        .fill(null)\n        .map(() => Array(8).fill(null));\n      board[4][3] = { color: \"black\", type: \"king\" };\n\n      const move = getRandomAIMove(board, \"black\");\n\n      expect(move).not.toBeNull();\n      expect(move?.from).toEqual({ row: 4, col: 3 });\n    });\n\n    it(\"should be deterministic with captures but random without\", () => {\n      const board = createInitialBoard();\n\n      // Collect multiple moves to check randomness\n      const moves = new Set<string>();\n      for (let i = 0; i < 10; i++) {\n        const move = getRandomAIMove(board, \"black\");\n        if (move) {\n          moves.add(JSON.stringify(move));\n        }\n      }\n\n      // Should have some variety in moves (not always the same)\n      // Note: This could theoretically fail if random always picks same\n      // but probability is very low with multiple valid moves\n      expect(moves.size).toBeGreaterThanOrEqual(1);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/ai-engine.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'OPENING_BOOK' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":102,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":143,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":143,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3097,3099],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":176,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":176,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4075,4077],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'bestScore' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":190,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":247,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":247,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5885,5887],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":248,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":248,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5934,5936],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":296,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":296,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7099,7101],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":416,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":416,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10955,10957],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":419,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":419,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11030,11032],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'board' is defined but never used. Allowed unused args must match /^_/u.","line":423,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":423,"endColumn":10},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'color' is defined but never used. Allowed unused args must match /^_/u.","line":424,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":10},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'moveNumber' is defined but never used. Allowed unused args must match /^_/u.","line":425,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":425,"endColumn":15},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'color' is defined but never used. Allowed unused args must match /^_/u.","line":432,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":432,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":606,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":606,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15730,15732],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AmericanConfig } from \"../game-engine/rule-configs/american\";\nimport type { VariantConfig } from \"../game-engine/rule-schema\";\nimport {\n  type Board,\n  type Move,\n  type Piece,\n  type PieceColor,\n  type Position,\n  checkWinner,\n  getValidMoves,\n  makeMove,\n} from \"./logic\";\n\nexport type AIDifficulty = \"easy\" | \"medium\" | \"hard\" | \"expert\";\n\nexport interface AIConfig {\n  difficulty: AIDifficulty;\n  maxDepth?: number;\n  timeLimit?: number; // milliseconds\n  useOpeningBook?: boolean;\n  useEndgameDatabase?: boolean;\n  evaluationWeights?: EvaluationWeights;\n}\n\nexport interface EvaluationWeights {\n  piece: number;\n  king: number;\n  backRow: number;\n  centerControl: number;\n  mobility: number;\n  forwardPosition: number;\n  protection: number;\n  tempo: number;\n}\n\nconst DEFAULT_WEIGHTS: EvaluationWeights = {\n  piece: 100,\n  king: 150,\n  backRow: 10,\n  centerControl: 5,\n  mobility: 2,\n  forwardPosition: 3,\n  protection: 5,\n  tempo: 1,\n};\n\n// Difficulty presets\nconst DIFFICULTY_CONFIGS: Record<AIDifficulty, Partial<AIConfig>> = {\n  easy: {\n    maxDepth: 2,\n    timeLimit: 500,\n    evaluationWeights: {\n      ...DEFAULT_WEIGHTS,\n      piece: 100,\n      king: 120,\n      centerControl: 2,\n      mobility: 1,\n    },\n  },\n  medium: {\n    maxDepth: 4,\n    timeLimit: 2000,\n    evaluationWeights: {\n      ...DEFAULT_WEIGHTS,\n      piece: 100,\n      king: 150,\n      centerControl: 5,\n      mobility: 3,\n    },\n  },\n  hard: {\n    maxDepth: 6,\n    timeLimit: 5000,\n    useOpeningBook: true,\n    evaluationWeights: {\n      ...DEFAULT_WEIGHTS,\n      piece: 100,\n      king: 175,\n      centerControl: 8,\n      mobility: 4,\n      protection: 7,\n    },\n  },\n  expert: {\n    maxDepth: 8,\n    timeLimit: 10000,\n    useOpeningBook: true,\n    useEndgameDatabase: true,\n    evaluationWeights: {\n      ...DEFAULT_WEIGHTS,\n      piece: 100,\n      king: 200,\n      centerControl: 10,\n      mobility: 5,\n      protection: 10,\n      tempo: 2,\n    },\n  },\n};\n\n// Opening book - common strong opening moves\nconst OPENING_BOOK = new Map<string, Move[]>([\n  // Standard opening positions\n  [\n    \"initial\",\n    [\n      { from: { row: 5, col: 0 }, to: { row: 4, col: 1 } },\n      { from: { row: 5, col: 2 }, to: { row: 4, col: 3 } },\n      { from: { row: 5, col: 2 }, to: { row: 4, col: 1 } },\n    ],\n  ],\n]);\n\nexport class CheckersAI {\n  private config: AIConfig;\n  private rules: VariantConfig;\n  private nodesEvaluated = 0;\n  private startTime = 0;\n  private timeLimit: number;\n  private transpositionTable = new Map<\n    string,\n    { score: number; depth: number; bestMove?: Move }\n  >();\n\n  constructor(\n    config: Partial<AIConfig> = {},\n    rules: VariantConfig = AmericanConfig,\n  ) {\n    const difficultyConfig = config.difficulty\n      ? DIFFICULTY_CONFIGS[config.difficulty]\n      : {};\n    this.config = {\n      difficulty: \"medium\",\n      maxDepth: 4,\n      timeLimit: 5000,\n      useOpeningBook: false,\n      useEndgameDatabase: false,\n      evaluationWeights: DEFAULT_WEIGHTS,\n      ...difficultyConfig,\n      ...config,\n    };\n    this.rules = rules;\n    this.timeLimit = this.config.timeLimit || 5000;\n  }\n\n  public async getBestMove(\n    board: Board,\n    color: PieceColor,\n    moveNumber = 0,\n  ): Promise<Move | null> {\n    this.nodesEvaluated = 0;\n    this.startTime = Date.now();\n    this.transpositionTable.clear();\n\n    // Random difficulty - just return a random move\n    if (this.config.difficulty === \"easy\") {\n      return this.getRandomMove(board, color);\n    }\n\n    // Check opening book for early game\n    if (this.config.useOpeningBook && moveNumber < 6) {\n      const bookMove = this.getOpeningBookMove(board, color, moveNumber);\n      if (bookMove) return bookMove;\n    }\n\n    // Check endgame database for late game\n    if (this.config.useEndgameDatabase) {\n      const endgameMove = this.getEndgameMove(board, color);\n      if (endgameMove) return endgameMove;\n    }\n\n    // Use iterative deepening for better time management\n    let bestMove: Move | null = null;\n    let bestScore = -Infinity;\n\n    for (let depth = 1; depth <= (this.config.maxDepth || 4); depth++) {\n      if (this.isTimeUp()) break;\n\n      const result = this.minimax(\n        board,\n        depth,\n        -Infinity,\n        Infinity,\n        true,\n        color,\n      );\n\n      if (result.move && !this.isTimeUp()) {\n        bestMove = result.move;\n        bestScore = result.score;\n      }\n    }\n\n    console.log(\n      `AI evaluated ${this.nodesEvaluated} nodes in ${Date.now() - this.startTime}ms`,\n    );\n    return bestMove;\n  }\n\n  private minimax(\n    board: Board,\n    depth: number,\n    alpha: number,\n    beta: number,\n    maximizingPlayer: boolean,\n    playerColor: PieceColor,\n  ): { score: number; move?: Move } {\n    this.nodesEvaluated++;\n\n    // Check for timeout\n    if (this.isTimeUp()) {\n      return { score: this.evaluatePosition(board, playerColor) };\n    }\n\n    // Check transposition table\n    const boardKey = this.getBoardKey(board);\n    const cached = this.transpositionTable.get(boardKey);\n    if (cached && cached.depth >= depth) {\n      return { score: cached.score, move: cached.bestMove };\n    }\n\n    // Terminal node checks\n    const winner = checkWinner(board, this.rules);\n    if (winner) {\n      const score =\n        winner === playerColor ? 10000 : winner === \"draw\" ? 0 : -10000;\n      return { score: score * (depth + 1) }; // Prefer quicker wins\n    }\n\n    if (depth === 0) {\n      return { score: this.evaluatePosition(board, playerColor) };\n    }\n\n    const currentColor = maximizingPlayer\n      ? playerColor\n      : playerColor === \"red\"\n        ? \"black\"\n        : \"red\";\n    const moves = this.getAllMoves(board, currentColor);\n\n    if (moves.length === 0) {\n      return { score: maximizingPlayer ? -10000 : 10000 };\n    }\n\n    // Move ordering - evaluate captures first\n    moves.sort((a, b) => {\n      const aCaptures = a.captures?.length || 0;\n      const bCaptures = b.captures?.length || 0;\n      return bCaptures - aCaptures;\n    });\n\n    let bestMove: Move | undefined;\n    let bestScore = maximizingPlayer ? -Infinity : Infinity;\n\n    for (const move of moves) {\n      const newBoard = makeMove(board, move, this.rules);\n      const result = this.minimax(\n        newBoard,\n        depth - 1,\n        alpha,\n        beta,\n        !maximizingPlayer,\n        playerColor,\n      );\n\n      if (maximizingPlayer) {\n        if (result.score > bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        alpha = Math.max(alpha, bestScore);\n      } else {\n        if (result.score < bestScore) {\n          bestScore = result.score;\n          bestMove = move;\n        }\n        beta = Math.min(beta, bestScore);\n      }\n\n      if (beta <= alpha) {\n        break; // Alpha-beta pruning\n      }\n    }\n\n    // Store in transposition table\n    this.transpositionTable.set(boardKey, {\n      score: bestScore,\n      depth,\n      bestMove,\n    });\n\n    return { score: bestScore, move: bestMove };\n  }\n\n  private evaluatePosition(board: Board, playerColor: PieceColor): number {\n    const weights = this.config.evaluationWeights || DEFAULT_WEIGHTS;\n    let score = 0;\n\n    const opponentColor = playerColor === \"red\" ? \"black\" : \"red\";\n\n    // Material and positional evaluation\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (!piece) continue;\n\n        const isPlayer = piece.color === playerColor;\n        const multiplier = isPlayer ? 1 : -1;\n\n        // Material value\n        score +=\n          multiplier * (piece.type === \"king\" ? weights.king : weights.piece);\n\n        // Positional bonuses\n        if (piece.type === \"regular\") {\n          // Forward position bonus (encourage advancement)\n          const advanceBonus =\n            piece.color === \"red\" ? this.rules.board.size - 1 - row : row;\n          score += multiplier * weights.forwardPosition * advanceBonus;\n\n          // Back row protection\n          if (\n            (piece.color === \"red\" && row === this.rules.board.size - 1) ||\n            (piece.color === \"black\" && row === 0)\n          ) {\n            score += multiplier * weights.backRow;\n          }\n        }\n\n        // Center control bonus (scaled to board size)\n        const center = (this.rules.board.size - 1) / 2;\n        const maxCenterDistance = this.rules.board.size - 1;\n        const centerDistance = Math.abs(row - center) + Math.abs(col - center);\n        score +=\n          multiplier *\n          weights.centerControl *\n          (maxCenterDistance - centerDistance);\n\n        // Protection bonus (pieces protected by back row or other pieces)\n        if (this.isPieceProtected(board, { row, col }, piece)) {\n          score += multiplier * weights.protection;\n        }\n      }\n    }\n\n    // Mobility evaluation\n    const playerMoves = this.getAllMoves(board, playerColor).length;\n    const opponentMoves = this.getAllMoves(board, opponentColor).length;\n    score += weights.mobility * (playerMoves - opponentMoves);\n\n    // Tempo (whose turn it is)\n    score += weights.tempo;\n\n    return score;\n  }\n\n  private isPieceProtected(\n    board: Board,\n    position: Position,\n    piece: Piece,\n  ): boolean {\n    // Check if piece is on back row\n    if (\n      (piece.color === \"red\" && position.row === this.rules.board.size - 1) ||\n      (piece.color === \"black\" && position.row === 0)\n    ) {\n      return true;\n    }\n\n    // Check if piece has friendly pieces behind it\n    const behindRow =\n      piece.color === \"red\" ? position.row + 1 : position.row - 1;\n    if (behindRow >= 0 && behindRow < this.rules.board.size) {\n      for (const colOffset of [-1, 1]) {\n        const checkCol = position.col + colOffset;\n        if (checkCol >= 0 && checkCol < this.rules.board.size) {\n          const behindPiece = board[behindRow]?.[checkCol];\n          if (behindPiece && behindPiece.color === piece.color) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private getAllMoves(board: Board, color: PieceColor): Move[] {\n    const moves: Move[] = [];\n\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (piece && piece.color === color) {\n          const pieceMoves = getValidMoves(\n            board,\n            { row, col },\n            color,\n            this.rules,\n          );\n          moves.push(...pieceMoves);\n        }\n      }\n    }\n\n    return moves;\n  }\n\n  private getRandomMove(board: Board, color: PieceColor): Move | null {\n    const moves = this.getAllMoves(board, color);\n    if (moves.length === 0) return null;\n\n    // Prefer captures even in random mode\n    const captures = moves.filter((m) => m.captures && m.captures.length > 0);\n    if (captures.length > 0) {\n      return captures[Math.floor(Math.random() * captures.length)] || null;\n    }\n\n    return moves[Math.floor(Math.random() * moves.length)] || null;\n  }\n\n  private getOpeningBookMove(\n    board: Board,\n    color: PieceColor,\n    moveNumber: number,\n  ): Move | null {\n    // Simple opening book - just return null for now\n    // In a full implementation, this would have a database of strong openings\n    return null;\n  }\n\n  private getEndgameMove(board: Board, color: PieceColor): Move | null {\n    // Count pieces to determine if we're in endgame\n    let pieceCount = 0;\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        if (board[row]?.[col]) pieceCount++;\n      }\n    }\n\n    // Only use endgame database if we have 6 or fewer pieces\n    if (pieceCount > 6) return null;\n\n    // In a full implementation, this would query a precomputed endgame database\n    // For now, just return null and let minimax handle it\n    return null;\n  }\n\n  private getBoardKey(board: Board): string {\n    // Create a unique string representation of the board for caching\n    let key = \"\";\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (!piece) {\n          key += \"0\";\n        } else {\n          key +=\n            piece.color === \"red\"\n              ? piece.type === \"king\"\n                ? \"R\"\n                : \"r\"\n              : piece.type === \"king\"\n                ? \"B\"\n                : \"b\";\n        }\n      }\n    }\n    return key;\n  }\n\n  private isTimeUp(): boolean {\n    return Date.now() - this.startTime > this.timeLimit;\n  }\n\n  public setDifficulty(difficulty: AIDifficulty): void {\n    const difficultyConfig = DIFFICULTY_CONFIGS[difficulty];\n    this.config = {\n      ...this.config,\n      difficulty,\n      ...difficultyConfig,\n    };\n  }\n\n  public getConfig(): AIConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Public method for position analysis\n   * Returns a normalized score from -100 to +100\n   */\n  public async analyzePosition(\n    board: Board,\n    playerColor: PieceColor,\n    depth = 4,\n  ): Promise<number> {\n    const result = this.minimax(\n      board,\n      depth,\n      -Infinity,\n      Infinity,\n      true,\n      playerColor,\n    );\n\n    // Normalize score to -100 to +100 range\n    // Positive = red advantage, negative = black advantage\n    const normalizedScore = Math.max(-100, Math.min(100, result.score / 100));\n    return playerColor === \"red\" ? normalizedScore : -normalizedScore;\n  }\n\n  /**\n   * Get the top N moves with their evaluations\n   */\n  public async getTopMoves(\n    board: Board,\n    color: PieceColor,\n    topN = 5,\n    depth = 4,\n  ): Promise<Array<{ move: Move; score: number; evaluation: number }>> {\n    const moves = this.getAllMoves(board, color);\n    const evaluatedMoves: Array<{ move: Move; score: number }> = [];\n\n    for (const move of moves) {\n      const newBoard = makeMove(board, move, this.rules);\n      const result = this.minimax(\n        newBoard,\n        depth - 1,\n        -Infinity,\n        Infinity,\n        false,\n        color,\n      );\n      evaluatedMoves.push({ move, score: result.score });\n    }\n\n    // Sort by score and take top N\n    evaluatedMoves.sort((a, b) => b.score - a.score);\n    const topMoves = evaluatedMoves.slice(0, topN);\n\n    // Add normalized evaluation\n    return topMoves.map(({ move, score }) => ({\n      move,\n      score,\n      evaluation: Math.max(-100, Math.min(100, score / 100)),\n    }));\n  }\n\n  /**\n   * Compare two moves and return the score difference\n   */\n  public async compareMoves(\n    board: Board,\n    move1: Move,\n    move2: Move,\n    playerColor: PieceColor,\n    depth = 4,\n  ): Promise<{\n    move1Score: number;\n    move2Score: number;\n    difference: number;\n    betterMove: Move;\n  }> {\n    const board1 = makeMove(board, move1, this.rules);\n    const result1 = this.minimax(\n      board1,\n      depth - 1,\n      -Infinity,\n      Infinity,\n      false,\n      playerColor,\n    );\n\n    const board2 = makeMove(board, move2, this.rules);\n    const result2 = this.minimax(\n      board2,\n      depth - 1,\n      -Infinity,\n      Infinity,\n      false,\n      playerColor,\n    );\n\n    return {\n      move1Score: result1.score,\n      move2Score: result2.score,\n      difference: Math.abs(result1.score - result2.score),\n      betterMove: result1.score > result2.score ? move1 : move2,\n    };\n  }\n\n  /**\n   * Evaluate a position and return detailed analysis\n   */\n  public evaluatePositionDetailed(\n    board: Board,\n    playerColor: PieceColor,\n  ): {\n    totalScore: number;\n    material: number;\n    position: number;\n    mobility: number;\n    protection: number;\n  } {\n    const weights = this.config.evaluationWeights || DEFAULT_WEIGHTS;\n    const opponentColor = playerColor === \"red\" ? \"black\" : \"red\";\n\n    let material = 0;\n    let position = 0;\n    let protection = 0;\n\n    // Material and positional evaluation\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (!piece) continue;\n\n        const isPlayer = piece.color === playerColor;\n        const multiplier = isPlayer ? 1 : -1;\n\n        // Material value\n        material +=\n          multiplier * (piece.type === \"king\" ? weights.king : weights.piece);\n\n        // Positional value\n        if (piece.type === \"regular\") {\n          const advanceBonus =\n            piece.color === \"red\" ? this.rules.board.size - 1 - row : row;\n          position += multiplier * weights.forwardPosition * advanceBonus;\n\n          if (\n            (piece.color === \"red\" && row === this.rules.board.size - 1) ||\n            (piece.color === \"black\" && row === 0)\n          ) {\n            position += multiplier * weights.backRow;\n          }\n        }\n\n        // Center control (scaled to board size)\n        const center = (this.rules.board.size - 1) / 2;\n        const maxCenterDistance = this.rules.board.size - 1;\n        const centerDistance = Math.abs(row - center) + Math.abs(col - center);\n        position +=\n          multiplier *\n          weights.centerControl *\n          (maxCenterDistance - centerDistance);\n\n        // Protection\n        if (this.isPieceProtected(board, { row, col }, piece)) {\n          protection += multiplier * weights.protection;\n        }\n      }\n    }\n\n    // Mobility\n    const playerMoves = this.getAllMoves(board, playerColor).length;\n    const opponentMoves = this.getAllMoves(board, opponentColor).length;\n    const mobility = weights.mobility * (playerMoves - opponentMoves);\n\n    const totalScore = material + position + mobility + protection;\n\n    return {\n      totalScore,\n      material,\n      position,\n      mobility,\n      protection,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/checkers-notation.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":12,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":72,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":73,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":74,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":74,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":74,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":74,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":78,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":78,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":82,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":80,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":80,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":83,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":83,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":83,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":83,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `error` typed value.","line":83,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":99,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":102,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":102,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":102,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":34},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'Move' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":110,"column":66,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":110,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":122,"column":9,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":122,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":124,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":124,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":130,"column":16,"nodeType":"Property","messageId":"anyAssignment","endLine":130,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":130,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":130,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":140,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":140,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":141,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":141,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":221,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":221,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":225,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":225,"endColumn":13}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Move, Position, Board } from \"./game-logic\";\n\n/**\n * Convert a board position to standard checkers notation.\n * Standard checkers notation numbers squares from 1-32 (for 8x8 board) on dark squares only.\n * Numbering goes from top-left to bottom-right, only counting dark squares.\n */\nexport function positionToSquareNumber(\n  position: Position,\n  boardSize = 8,\n): number {\n  const { row, col } = position;\n  // Calculate the square number (1-based) for dark squares only\n  // Dark squares are where (row + col) % 2 === 1\n  const squaresBefore = Math.floor((row * boardSize) / 2);\n  const squareInRow = Math.floor(col / 2);\n\n  // For odd rows, dark squares are at even columns\n  // For even rows, dark squares are at odd columns\n  if (row % 2 === 0) {\n    // Even row: dark squares at odd columns (1, 3, 5, 7)\n    return squaresBefore + squareInRow + 1;\n  } else {\n    // Odd row: dark squares at even columns (0, 2, 4, 6)\n    return squaresBefore + squareInRow + 1;\n  }\n}\n\n/**\n * Convert square number back to board position\n */\nexport function squareNumberToPosition(\n  squareNum: number,\n  boardSize = 8,\n): Position {\n  const squareIndex = squareNum - 1; // Convert to 0-based\n  const row = Math.floor(squareIndex / (boardSize / 2));\n  const colIndex = squareIndex % (boardSize / 2);\n\n  // Calculate actual column based on row parity\n  let col: number;\n  if (row % 2 === 0) {\n    // Even row: dark squares at odd columns\n    col = colIndex * 2 + 1;\n  } else {\n    // Odd row: dark squares at even columns\n    col = colIndex * 2;\n  }\n\n  return { row, col };\n}\n\nexport interface NotatedMove {\n  notation: string;\n  move: Move;\n  isCapture: boolean;\n  isKinging: boolean;\n  capturedPieces?: Position[];\n}\n\n/**\n * Convert a move to standard checkers notation.\n * Format: \"from-to\" for regular moves, \"fromxto\" for captures\n * Multiple captures: \"fromxmidxto\"\n */\nexport function moveToNotation(\n  move: Move,\n  board: Board,\n  boardSize: number,\n  wasKinged = false,\n): NotatedMove {\n  const fromSquare = positionToSquareNumber(move.from, boardSize);\n  const toSquare = positionToSquareNumber(move.to, boardSize);\n  const isCapture = move.captures && move.captures.length > 0;\n\n  let notation: string;\n\n  if (isCapture && move.path && move.path.length > 2) {\n    // Multi-jump capture - show all intermediate squares\n    const squares = move.path.map((pos) =>\n      positionToSquareNumber(pos, boardSize),\n    );\n    notation = squares.join(\"x\");\n  } else if (isCapture) {\n    // Single capture\n    notation = `${fromSquare}x${toSquare}`;\n  } else {\n    // Regular move\n    notation = `${fromSquare}-${toSquare}`;\n  }\n\n  // Add king annotation if piece was kinged\n  if (wasKinged) {\n    notation += \"(K)\";\n  }\n\n  return {\n    notation,\n    move,\n    isCapture: !!isCapture,\n    isKinging: wasKinged,\n    capturedPieces: move.captures,\n  };\n}\n\n/**\n * Parse notation string back to positions\n * Returns null if notation is invalid\n */\nexport function notationToMove(notation: string, boardSize = 8): Move | null {\n  try {\n    // Remove king annotation if present\n    const cleanNotation = notation.replace(\"(K)\", \"\");\n\n    // Check if it's a capture (contains 'x') or regular move (contains '-')\n    if (cleanNotation.includes(\"x\")) {\n      // Capture move\n      const squares = cleanNotation.split(\"x\").map((s) => parseInt(s.trim()));\n      if (squares.some(isNaN) || squares.length < 2) return null;\n\n      const positions = squares.map((sq) =>\n        squareNumberToPosition(sq, boardSize),\n      );\n      const from = positions[0]!;\n      const to = positions[positions.length - 1]!;\n\n      // For multi-jump, include the full path\n      const path = positions.length > 2 ? positions : undefined;\n\n      return { from, to, path };\n    } else if (cleanNotation.includes(\"-\")) {\n      // Regular move\n      const [fromStr, toStr] = cleanNotation.split(\"-\");\n      const fromSquare = parseInt(fromStr!.trim());\n      const toSquare = parseInt(toStr!.trim());\n\n      if (isNaN(fromSquare) || isNaN(toSquare)) return null;\n\n      return {\n        from: squareNumberToPosition(fromSquare, boardSize),\n        to: squareNumberToPosition(toSquare, boardSize),\n      };\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Format a complete game history into standard notation\n */\nexport interface GameHistoryEntry {\n  moveNumber: number;\n  redMove?: NotatedMove;\n  blackMove?: NotatedMove;\n}\n\nexport function formatGameHistory(moves: NotatedMove[]): GameHistoryEntry[] {\n  const history: GameHistoryEntry[] = [];\n\n  for (let i = 0; i < moves.length; i += 2) {\n    const entry: GameHistoryEntry = {\n      moveNumber: Math.floor(i / 2) + 1,\n      redMove: moves[i],\n    };\n\n    if (i + 1 < moves.length) {\n      entry.blackMove = moves[i + 1];\n    }\n\n    history.push(entry);\n  }\n\n  return history;\n}\n\n/**\n * Convert history entries back to a string format (for export/saving)\n */\nexport function historyToString(history: GameHistoryEntry[]): string {\n  return history\n    .map((entry) => {\n      const parts = [`${entry.moveNumber}.`];\n      if (entry.redMove) parts.push(entry.redMove.notation);\n      if (entry.blackMove) parts.push(entry.blackMove.notation);\n      return parts.join(\" \");\n    })\n    .join(\" \");\n}\n\n/**\n * Parse a string format back to history entries\n */\nexport function stringToHistory(\n  str: string,\n  boardSize = 8,\n): GameHistoryEntry[] {\n  const history: GameHistoryEntry[] = [];\n  const tokens = str.split(/\\s+/).filter((t) => t.length > 0);\n\n  let currentEntry: GameHistoryEntry | null = null;\n  let expectingRed = false;\n  let expectingBlack = false;\n\n  for (const token of tokens) {\n    // Check if it's a move number\n    if (token.endsWith(\".\")) {\n      const moveNum = parseInt(token.slice(0, -1));\n      if (!isNaN(moveNum)) {\n        if (currentEntry) history.push(currentEntry);\n        currentEntry = { moveNumber: moveNum };\n        expectingRed = true;\n        expectingBlack = false;\n        continue;\n      }\n    }\n\n    // Otherwise it should be a move notation\n    const move = notationToMove(token, boardSize);\n    if (move && currentEntry) {\n      const notatedMove: NotatedMove = {\n        notation: token,\n        move,\n        isCapture: token.includes(\"x\"),\n        isKinging: token.includes(\"(K)\"),\n      };\n\n      if (expectingRed) {\n        currentEntry.redMove = notatedMove;\n        expectingRed = false;\n        expectingBlack = true;\n      } else if (expectingBlack) {\n        currentEntry.blackMove = notatedMove;\n        expectingBlack = false;\n      }\n    }\n  }\n\n  if (currentEntry) history.push(currentEntry);\n\n  return history;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/draw-detection.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":47,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":53,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":47,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":53,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":47,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":48,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `error` typed value.","line":48,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":49,"column":7,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":51,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":51,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":50,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":50,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":50,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":50,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":51,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `error` typed value.","line":53,"column":6,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":70,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":70,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":88,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":88,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1990,1992],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .draws on an `error` typed value.","line":101,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .draws on an `error` typed value.","line":105,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .draws on an `error` typed value.","line":120,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .draws on an `error` typed value.","line":138,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":149,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":150,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":153,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .draws on an `error` typed value.","line":178,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":189,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":190,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":193,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":226,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":226,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":281,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":283,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":281,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":283,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":281,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":282,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .flat on an `error` typed value.","line":282,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":282,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":283,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":283,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":283,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":283,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":284,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":286,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":284,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":286,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":284,"column":24,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":285,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .flat on an `error` typed value.","line":285,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `error` typed value.","line":286,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":286,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":286,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":286,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":287,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":287,"endColumn":40}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Board, Move, PieceColor } from \"./game-logic\";\nimport type { VariantConfig } from \"./game-engine/rule-schema\";\n\n/**\n * Draw result with explanation\n */\nexport interface DrawResult {\n  type: \"draw\";\n  reason:\n    | \"threefold-repetition\"\n    | \"forty-move-rule\"\n    | \"twenty-five-move-rule\"\n    | \"insufficient-material\"\n    | \"stalemate\";\n  explanation: string;\n}\n\n/**\n * Game state for tracking draw conditions\n */\nexport interface DrawState {\n  movesSinceCapture: number;\n  movesSincePromotion: number;\n  boardPositions: string[];\n  positionCounts: Map<string, number>;\n}\n\n/**\n * Create an initial draw state\n */\nexport function createDrawState(): DrawState {\n  return {\n    movesSinceCapture: 0,\n    movesSincePromotion: 0,\n    boardPositions: [],\n    positionCounts: new Map(),\n  };\n}\n\n/**\n * Serialize board position for repetition detection\n */\nexport function serializeBoard(\n  board: Board,\n  currentPlayer: PieceColor,\n): string {\n  const rows = board\n    .map((row) =>\n      row\n        .map((piece) => (piece ? `${piece.color[0]}${piece.type[0]}` : \"--\"))\n        .join(\"\"),\n    )\n    .join(\"|\");\n  return `${rows}:${currentPlayer}`;\n}\n\n/**\n * Update draw state after a move\n */\nexport function updateDrawState(\n  state: DrawState,\n  board: Board,\n  move: Move,\n  currentPlayer: PieceColor,\n  wasPromotion: boolean,\n): DrawState {\n  const newState = { ...state };\n\n  // Update counters for forty-move rule\n  if (move.captures && move.captures.length > 0) {\n    newState.movesSinceCapture = 0;\n  } else {\n    newState.movesSinceCapture++;\n  }\n\n  if (wasPromotion) {\n    newState.movesSincePromotion = 0;\n  } else {\n    newState.movesSincePromotion++;\n  }\n\n  // Update position tracking for repetition\n  const position = serializeBoard(board, currentPlayer);\n  newState.boardPositions = [...state.boardPositions, position];\n\n  // Update position counts\n  newState.positionCounts = new Map(state.positionCounts);\n  const count = newState.positionCounts.get(position) || 0;\n  newState.positionCounts.set(position, count + 1);\n\n  return newState;\n}\n\n/**\n * Check for threefold repetition\n */\nexport function checkThreefoldRepetition(\n  state: DrawState,\n  config: VariantConfig,\n): boolean {\n  if (!config.draws.repetitionLimit) return false;\n\n  // Check if any position has occurred the repetition limit times\n  for (const count of state.positionCounts.values()) {\n    if (count >= config.draws.repetitionLimit) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Check for forty-move rule (no captures or promotions)\n */\nexport function checkFortyMoveRule(\n  state: DrawState,\n  config: VariantConfig,\n): boolean {\n  if (!config.draws.fortyMoveRule) return false;\n\n  // In checkers, it's typically 40 moves by each player (80 plies)\n  const moveLimit = 80;\n  return (\n    state.movesSinceCapture >= moveLimit &&\n    state.movesSincePromotion >= moveLimit\n  );\n}\n\n/**\n * Check for twenty-five move rule in king endgames\n */\nexport function checkTwentyFiveMoveRule(\n  board: Board,\n  state: DrawState,\n  config: VariantConfig,\n): boolean {\n  if (!config.draws.twentyFiveMoveRule) return false;\n\n  // Count pieces\n  let redKings = 0,\n    blackKings = 0;\n  let redRegular = 0,\n    blackRegular = 0;\n\n  for (const row of board) {\n    for (const piece of row) {\n      if (piece) {\n        if (piece.type === \"king\") {\n          if (piece.color === \"red\") redKings++;\n          else blackKings++;\n        } else {\n          if (piece.color === \"red\") redRegular++;\n          else blackRegular++;\n        }\n      }\n    }\n  }\n\n  // Check if it's a king endgame (only kings remain)\n  const isKingEndgame =\n    redRegular === 0 && blackRegular === 0 && redKings > 0 && blackKings > 0;\n\n  if (!isKingEndgame) return false;\n\n  // In king endgames, limit is typically 25 moves (50 plies)\n  const moveLimit = 50;\n  return state.movesSinceCapture >= moveLimit;\n}\n\n/**\n * Check for insufficient material to win\n */\nexport function checkInsufficientMaterial(\n  board: Board,\n  config: VariantConfig,\n): boolean {\n  if (!config.draws.insufficientMaterial) return false;\n\n  // Count pieces\n  let redKings = 0,\n    blackKings = 0;\n  let redRegular = 0,\n    blackRegular = 0;\n\n  for (const row of board) {\n    for (const piece of row) {\n      if (piece) {\n        if (piece.type === \"king\") {\n          if (piece.color === \"red\") redKings++;\n          else blackKings++;\n        } else {\n          if (piece.color === \"red\") redRegular++;\n          else blackRegular++;\n        }\n      }\n    }\n  }\n\n  const redTotal = redKings + redRegular;\n  const blackTotal = blackKings + blackRegular;\n\n  // Draw conditions:\n  // 1. One king vs one king\n  if (\n    redTotal === 1 &&\n    blackTotal === 1 &&\n    redKings === 1 &&\n    blackKings === 1\n  ) {\n    return true;\n  }\n\n  // 2. Two kings vs one king (can't force a win in most variants)\n  if (\n    (redTotal === 2 &&\n      blackTotal === 1 &&\n      redKings === 2 &&\n      blackKings === 1) ||\n    (redTotal === 1 && blackTotal === 2 && redKings === 1 && blackKings === 2)\n  ) {\n    return true;\n  }\n\n  // 3. Three kings vs one king on larger boards (depends on variant)\n  if (config.board.size >= 10) {\n    if (\n      (redTotal === 3 &&\n        blackTotal === 1 &&\n        redKings === 3 &&\n        blackKings === 1) ||\n      (redTotal === 1 && blackTotal === 3 && redKings === 1 && blackKings === 3)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Check all draw conditions and return detailed result\n */\nexport function checkDrawConditions(\n  board: Board,\n  state: DrawState,\n  config: VariantConfig,\n): DrawResult | null {\n  // Check threefold repetition\n  if (checkThreefoldRepetition(state, config)) {\n    return {\n      type: \"draw\",\n      reason: \"threefold-repetition\",\n      explanation:\n        \"The same position has occurred three times. This results in a draw by threefold repetition.\",\n    };\n  }\n\n  // Check forty-move rule\n  if (checkFortyMoveRule(state, config)) {\n    return {\n      type: \"draw\",\n      reason: \"forty-move-rule\",\n      explanation:\n        \"Neither player has captured a piece or promoted a checker in the last 40 moves. This results in a draw by the forty-move rule.\",\n    };\n  }\n\n  // Check twenty-five move rule for king endgames\n  if (checkTwentyFiveMoveRule(board, state, config)) {\n    return {\n      type: \"draw\",\n      reason: \"twenty-five-move-rule\",\n      explanation:\n        \"In this king-only endgame, no captures have occurred in the last 25 moves. This results in a draw by the twenty-five-move rule.\",\n    };\n  }\n\n  // Check insufficient material\n  if (checkInsufficientMaterial(board, config)) {\n    const redKings = board\n      .flat()\n      .filter((p) => p?.color === \"red\" && p.type === \"king\").length;\n    const blackKings = board\n      .flat()\n      .filter((p) => p?.color === \"black\" && p.type === \"king\").length;\n    const total = redKings + blackKings;\n\n    let explanation = \"Neither player has sufficient pieces to force a win. \";\n    if (total === 2) {\n      explanation += \"With only one king each, checkmate is impossible.\";\n    } else if (total === 3) {\n      explanation += \"Two kings cannot force a win against one king.\";\n    } else {\n      explanation += \"The remaining pieces cannot force a checkmate.\";\n    }\n\n    return {\n      type: \"draw\",\n      reason: \"insufficient-material\",\n      explanation,\n    };\n  }\n\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-auto-save.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'saveMutation', 'state.board', 'state.currentPlayer', 'state.gameMode', 'state.moveCount', and 'state.moveHistory'. Either include them or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [state.winner, state.gameId, state.board, state.currentPlayer, state.moveCount, state.gameMode, state.moveHistory, saveMutation]","fix":{"range":[2312,2340],"text":"[state.winner, state.gameId, state.board, state.currentPlayer, state.moveCount, state.gameMode, state.moveHistory, saveMutation]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from \"react\";\nimport { api } from \"~/trpc/react\";\nimport { useGame } from \"../state/game-context\";\n\nexport function useAutoSave() {\n  const { state } = useGame();\n  const saveMutation = api.game.save.useMutation();\n  const lastSavedMoveCount = useRef(state.moveCount);\n  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Save game state whenever a move is made\n  useEffect(() => {\n    // Don't save if:\n    // - No gameId (local game without persistence)\n    // - No actual moves made yet\n    // - Move count hasn't changed\n    // - We're viewing history (not at the latest move)\n    if (\n      !state.gameId ||\n      state.moveCount === 0 ||\n      state.moveCount === lastSavedMoveCount.current ||\n      state.isViewingHistory\n    ) {\n      return;\n    }\n\n    // Clear any pending save\n    if (saveTimeoutRef.current) {\n      clearTimeout(saveTimeoutRef.current);\n    }\n\n    // Debounce the save by 500ms to avoid too many requests\n    saveTimeoutRef.current = setTimeout(() => {\n      saveMutation.mutate(\n        {\n          id: state.gameId,\n          board: state.board,\n          currentPlayer: state.currentPlayer,\n          moveCount: state.moveCount,\n          gameMode: state.gameMode,\n          winner: state.winner,\n          moves: state.moveHistory,\n        },\n        {\n          onSuccess: () => {\n            lastSavedMoveCount.current = state.moveCount;\n            console.log(\"Game auto-saved\");\n          },\n          onError: (error) => {\n            console.error(\"Failed to auto-save game:\", error);\n          },\n        },\n      );\n    }, 500);\n\n    return () => {\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeoutRef.current);\n      }\n    };\n  }, [\n    state.gameId,\n    state.board,\n    state.currentPlayer,\n    state.moveCount,\n    state.gameMode,\n    state.winner,\n    state.moveHistory,\n    state.isViewingHistory,\n    saveMutation,\n  ]);\n\n  // Save immediately when game ends\n  useEffect(() => {\n    if (state.gameId && state.winner) {\n      saveMutation.mutate({\n        id: state.gameId,\n        board: state.board,\n        currentPlayer: state.currentPlayer,\n        moveCount: state.moveCount,\n        gameMode: state.gameMode,\n        winner: state.winner,\n        moves: state.moveHistory,\n      });\n    }\n  }, [state.winner, state.gameId]);\n\n  return {\n    isSaving: saveMutation.isPending,\n    saveError: saveMutation.error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-game-timers.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [state.moveCount, state.currentPlayer, state.timeControl, state.winner, state.isViewingHistory, state.isReviewMode, timer]","fix":{"range":[1996,2140],"text":"[state.moveCount, state.currentPlayer, state.timeControl, state.winner, state.isViewingHistory, state.isReviewMode, timer]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [state.winner, state.isViewingHistory, state.isReviewMode, timer]","fix":{"range":[2387,2445],"text":"[state.winner, state.isViewingHistory, state.isReviewMode, timer]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-must-capture.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useMemo } from \"react\";\nimport {\n  getMustCapturePositions,\n  getValidMoves,\n  makeMove,\n  type Move,\n  type Position,\n} from \"~/lib/game/logic\";\nimport { checkWinner } from \"~/lib/game/logic\";\nimport { useGame } from \"../state/game-context\";\n\nexport function useMustCapture() {\n  const { state, dispatch } = useGame();\n\n  const mustCapturePositions = useMemo(() => {\n    return getMustCapturePositions(\n      state.board,\n      state.currentPlayer,\n      state.rules,\n    );\n  }, [state.board, state.currentPlayer, state.rules]);\n\n  const handleMove = useCallback(\n    (move: Move) => {\n      const newBoard = makeMove(state.board, move, state.rules);\n      // Pass draw state to check for draw conditions after the move is applied\n      // Note: The draw state will be updated in the reducer after this move\n      const winner = checkWinner(newBoard, state.rules, state.drawState);\n      dispatch({ type: \"APPLY_MOVE\", payload: { newBoard, move, winner } });\n    },\n    [dispatch, state.board, state.rules, state.drawState],\n  );\n\n  const onSquareClick = useCallback(\n    (position: Position, event?: React.MouseEvent) => {\n      const piece = state.board[position.row]?.[position.col];\n      if (state.selectedPosition) {\n        const move = state.validMoves.find(\n          (m) => m.to.row === position.row && m.to.col === position.col,\n        );\n        if (move) {\n          handleMove(move);\n        } else if (piece?.color === state.currentPlayer) {\n          const moves = getValidMoves(\n            state.board,\n            position,\n            state.currentPlayer,\n            state.rules,\n          );\n          dispatch({ type: \"SET_SELECTED\", payload: position });\n          dispatch({ type: \"SET_VALID_MOVES\", payload: moves });\n        } else {\n          dispatch({ type: \"SET_SELECTED\", payload: null });\n          dispatch({ type: \"SET_VALID_MOVES\", payload: [] });\n        }\n      } else if (piece?.color === state.currentPlayer) {\n        // Enforce mandatory capture only if variant requires it\n        if (state.rules.capture.mandatory && mustCapturePositions.length > 0) {\n          const canThisCapture = mustCapturePositions.some(\n            (p) => p.row === position.row && p.col === position.col,\n          );\n          const firstCapture = mustCapturePositions[0];\n          if (!canThisCapture && firstCapture) {\n            const moves = getValidMoves(\n              state.board,\n              firstCapture,\n              state.currentPlayer,\n              state.rules,\n            );\n            dispatch({ type: \"SET_SELECTED\", payload: firstCapture });\n            dispatch({ type: \"SET_VALID_MOVES\", payload: moves });\n            return;\n          }\n        }\n        const moves = getValidMoves(\n          state.board,\n          position,\n          state.currentPlayer,\n          state.rules,\n        );\n        dispatch({ type: \"SET_SELECTED\", payload: position });\n        dispatch({ type: \"SET_VALID_MOVES\", payload: moves });\n      }\n    },\n    [\n      state.board,\n      state.selectedPosition,\n      state.validMoves,\n      state.currentPlayer,\n      state.rules,\n      mustCapturePositions,\n      handleMove,\n      dispatch,\n    ],\n  );\n\n  const onDragStart = useCallback(\n    (position: Position) => {\n      const piece = state.board[position.row]?.[position.col];\n      if (piece?.color === state.currentPlayer) {\n        const moves = getValidMoves(\n          state.board,\n          position,\n          state.currentPlayer,\n          state.rules,\n        );\n        dispatch({ type: \"SET_SELECTED\", payload: position });\n        dispatch({ type: \"SET_DRAGGING\", payload: position });\n        dispatch({ type: \"SET_VALID_MOVES\", payload: moves });\n      }\n    },\n    [state.board, state.currentPlayer, state.rules, dispatch],\n  );\n\n  const onDrop = useCallback(\n    (position: Position) => {\n      if (state.selectedPosition) {\n        const move = state.validMoves.find(\n          (m) => m.to.row === position.row && m.to.col === position.col,\n        );\n        if (move) {\n          handleMove(move);\n        }\n      }\n    },\n    [state.selectedPosition, state.validMoves, handleMove],\n  );\n\n  return { mustCapturePositions, onSquareClick, onDragStart, onDrop };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-online-sync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-player-card.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/hooks/use-variant-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/logic.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'canRegularMoveBackward' is defined but never used. Allowed unused vars must match /^_/u.","line":113,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":32},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'regularCaptureAllowsBackward' is defined but never used. Allowed unused vars must match /^_/u.","line":117,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":127,"column":9,"nodeType":"VariableDeclarator","messageId":"unsafeAssignment","endLine":129,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":129,"column":16,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":129,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":387,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":387,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11487,11489],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":391,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":391,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11655,11657],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":447,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":447,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13502,13504],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":452,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":452,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13670,13672],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":636,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":636,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18851,18853],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":640,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":640,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18934,18936],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AmericanConfig } from \"../game-engine/rule-configs/american\";\nimport type { VariantConfig } from \"../game-engine/rule-schema\";\nimport {\n  checkDrawConditions,\n  type DrawResult,\n  type DrawState,\n} from \"./draw-detection\";\n\nexport type PieceColor = \"red\" | \"black\";\nexport type PieceType = \"regular\" | \"king\";\n\nexport interface Piece {\n  color: PieceColor;\n  type: PieceType;\n}\n\nexport interface Position {\n  row: number;\n  col: number;\n}\n\nexport interface Move {\n  from: Position;\n  to: Position;\n  captures?: Position[];\n  path?: Position[]; // Full path for multi-jump sequences, including from and to\n}\n\nexport type Board = (Piece | null)[][];\n\n/**\n * Create a checkers board with initial piece placement based on configuration.\n * Black pieces start at the top; red pieces at the bottom (dark squares only).\n * @param config Board configuration (defaults to American checkers)\n * @returns Board initialized for a new game.\n */\ntype RulesConfig = VariantConfig;\n\nconst DEFAULT_RULES: VariantConfig = AmericanConfig;\n\nfunction getSize(config: RulesConfig): number {\n  return config.board.size;\n}\n\nfunction getPieceRows(config: RulesConfig): number {\n  return Math.max(\n    config.board.startingRows.red.length,\n    config.board.startingRows.black.length,\n  );\n}\n\nfunction getRedKingRow(config: RulesConfig): number {\n  return config.promotion.customRows?.red?.[0] ?? 0;\n}\n\nfunction getBlackKingRow(config: RulesConfig): number {\n  return config.promotion.customRows?.black?.[0] ?? config.board.size - 1;\n}\n\nfunction getFlyingKings(config: RulesConfig): boolean {\n  return !!config.movement.kings.canFly;\n}\n\nfunction getMovementDirectionsForPiece(\n  piece: Piece,\n  config: RulesConfig,\n): readonly Direction[] {\n  if (piece.type === \"king\") return KING_DIRECTIONS;\n  const baseAllowed =\n    piece.color === \"red\"\n      ? config.movement.regularPieces.directions.red\n      : config.movement.regularPieces.directions.black;\n  const allowed = config.movement.regularPieces.canMoveBackward\n    ? \"all\"\n    : baseAllowed;\n  if (allowed === \"all\") return KING_DIRECTIONS;\n  if (piece.color === \"red\") {\n    return allowed === \"forward\" ? RED_DIRECTIONS : BLACK_DIRECTIONS;\n  }\n  // piece.color === 'black'\n  return allowed === \"forward\" ? BLACK_DIRECTIONS : RED_DIRECTIONS;\n}\n\nfunction getCaptureDirectionsForPiece(\n  piece: Piece,\n  config: RulesConfig,\n): readonly Direction[] {\n  if (piece.type === \"king\") return KING_DIRECTIONS;\n  const captureDir = config.capture.captureDirection.regular;\n  const canBackward = !!config.movement.regularPieces.canCaptureBackward;\n\n  const allowForward = captureDir === \"all\" || captureDir === \"forward\";\n  const allowBackward =\n    (captureDir === \"all\" || captureDir === \"backward\") && canBackward;\n\n  if (allowForward && allowBackward) return KING_DIRECTIONS;\n\n  if (piece.color === \"red\") {\n    return allowForward\n      ? RED_DIRECTIONS\n      : allowBackward\n        ? BLACK_DIRECTIONS\n        : ([] as unknown as readonly Direction[]);\n  }\n  // piece.color === 'black'\n  return allowForward\n    ? BLACK_DIRECTIONS\n    : allowBackward\n      ? RED_DIRECTIONS\n      : ([] as unknown as readonly Direction[]);\n}\n\nfunction canRegularMoveBackward(config: RulesConfig): boolean {\n  return !!config.movement.regularPieces.canMoveBackward;\n}\n\nfunction regularCaptureAllowsBackward(config: RulesConfig): boolean {\n  return config.capture.captureDirection.regular !== \"forward\";\n}\n\nfunction isMandatoryCapture(config: RulesConfig): boolean {\n  return !!config.capture.mandatory;\n}\n\nexport function createInitialBoard(config: RulesConfig = DEFAULT_RULES): Board {\n  const size = getSize(config);\n  const board: Board = Array(size)\n    .fill(null)\n    .map(() => Array(size).fill(null));\n\n  // Place black pieces (top)\n  for (let row = 0; row < getPieceRows(config); row++) {\n    for (let col = 0; col < size; col++) {\n      if ((row + col) % 2 === 1) {\n        set(board, row, col, { color: \"black\", type: \"regular\" }, config);\n      }\n    }\n  }\n\n  // Place red pieces (bottom)\n  const redStartRow = size - getPieceRows(config);\n  for (let row = redStartRow; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if ((row + col) % 2 === 1) {\n        set(board, row, col, { color: \"red\", type: \"regular\" }, config);\n      }\n    }\n  }\n\n  return board;\n}\n\n/**\n * Check if a given position is inside the board bounds.\n * @param row Row index\n * @param col Column index\n * @param config Board configuration (defaults to American checkers)\n * @returns True if the square is on the board.\n */\nexport function isValidSquare(\n  row: number,\n  col: number,\n  config: RulesConfig = DEFAULT_RULES,\n): boolean {\n  const size = getSize(config);\n  return row >= 0 && row < size && col >= 0 && col < size;\n}\n\n// Typed direction tuples for clarity and safety\ntype Direction = readonly [number, number];\nconst KING_DIRECTIONS: readonly Direction[] = [\n  [-1, -1],\n  [-1, 1],\n  [1, -1],\n  [1, 1],\n] as const;\nconst RED_DIRECTIONS: readonly Direction[] = [\n  [-1, -1],\n  [-1, 1],\n] as const;\nconst BLACK_DIRECTIONS: readonly Direction[] = [\n  [1, -1],\n  [1, 1],\n] as const;\n\n/**\n * Safely read a board cell. Returns null if out of bounds or empty.\n * @param board The game board\n * @param row Row index\n * @param col Column index\n * @param config Board configuration (defaults to American checkers)\n * @returns The piece at the square, or null\n */\nfunction at(\n  board: Board,\n  row: number,\n  col: number,\n  config: RulesConfig = DEFAULT_RULES,\n): Piece | null {\n  return isValidSquare(row, col, config) ? (board[row]?.[col] ?? null) : null;\n}\n\n/**\n * Safely write a value into a board cell. No-op if out of bounds.\n * @param board The game board\n * @param row Row index\n * @param col Column index\n * @param value The piece to place, or null to clear\n * @param config Board configuration (defaults to American checkers)\n */\nfunction set(\n  board: Board,\n  row: number,\n  col: number,\n  value: Piece | null,\n  config: RulesConfig = DEFAULT_RULES,\n): void {\n  if (isValidSquare(row, col, config)) {\n    board[row]![col] = value;\n  }\n}\n\n/**\n * Compute valid moves for a given piece position for the current player.\n * If any captures exist for the player, only capture moves from this\n * position are returned; otherwise, regular diagonal moves are returned.\n * @param board The game board\n * @param position Starting position\n * @param currentPlayer Player whose turn it is\n * @param config Board configuration (defaults to American checkers)\n * @returns List of legal moves from the position\n */\nexport function getValidMoves(\n  board: Board,\n  position: Position,\n  currentPlayer: PieceColor,\n  config: RulesConfig = DEFAULT_RULES,\n): Move[] {\n  const piece = at(board, position.row, position.col, config);\n  if (!piece || piece.color !== currentPlayer) return [];\n\n  const moves: Move[] = [];\n  const mustCapture = getMustCapturePositions(board, currentPlayer, config);\n\n  if (isMandatoryCapture(config) && mustCapture.length > 0) {\n    // If there are mandatory captures, only return capture moves\n    if (\n      mustCapture.some(\n        (pos) => pos.row === position.row && pos.col === position.col,\n      )\n    ) {\n      return getCaptureMoves(board, position, piece, config);\n    }\n    return [];\n  }\n\n  // Movement (non-captures)\n  const directions: readonly Direction[] = getMovementDirectionsForPiece(\n    piece,\n    config,\n  );\n\n  if (piece.type === \"king\" && getFlyingKings(config)) {\n    // Flying kings can move multiple squares in a diagonal\n    for (const [dRow, dCol] of directions) {\n      let distance = 1;\n      while (true) {\n        const newRow = position.row + dRow * distance;\n        const newCol = position.col + dCol * distance;\n\n        if (!isValidSquare(newRow, newCol, config)) break;\n\n        const targetSquare = at(board, newRow, newCol, config);\n        if (targetSquare === null) {\n          moves.push({\n            from: position,\n            to: { row: newRow, col: newCol },\n          });\n          distance++;\n        } else {\n          // Can't move through pieces\n          break;\n        }\n      }\n    }\n  } else {\n    // Regular movement (one square only)\n    for (const [dRow, dCol] of directions) {\n      const newRow = position.row + dRow;\n      const newCol = position.col + dCol;\n\n      if (\n        isValidSquare(newRow, newCol, config) &&\n        at(board, newRow, newCol, config) === null\n      ) {\n        moves.push({\n          from: position,\n          to: { row: newRow, col: newCol },\n        });\n      }\n    }\n  }\n\n  return moves;\n}\n\n/**\n * Generate all capture sequences (including multi-jumps) from a position.\n * Returns composite moves with an ordered list of captured squares.\n * @param board The game board\n * @param position Starting position\n * @param piece The piece to move\n * @param config Board configuration (defaults to American checkers)\n * @returns List of capture moves (possibly multi-jump)\n */\nexport function getCaptureMoves(\n  board: Board,\n  position: Position,\n  piece: Piece,\n  config: RulesConfig = DEFAULT_RULES,\n): Move[] {\n  const moves: Move[] = [];\n  // Determine capture directions by rules\n  const directions: readonly Direction[] = getCaptureDirectionsForPiece(\n    piece,\n    config,\n  );\n\n  if (piece.type === \"king\" && getFlyingKings(config)) {\n    // Flying kings can capture at any distance along a diagonal\n    for (const [dRow, dCol] of directions) {\n      let captureDistance = 1;\n      let capturedPiece: Position | null = null;\n\n      // Find the first opponent piece in this direction\n      while (true) {\n        const checkRow = position.row + dRow * captureDistance;\n        const checkCol = position.col + dCol * captureDistance;\n\n        if (!isValidSquare(checkRow, checkCol, config)) break;\n\n        const pieceAtSquare = at(board, checkRow, checkCol, config);\n        if (pieceAtSquare) {\n          if (pieceAtSquare.color !== piece.color && !capturedPiece) {\n            // Found an opponent piece to capture\n            capturedPiece = { row: checkRow, col: checkCol };\n            captureDistance++;\n            break;\n          } else {\n            // Can't capture own piece or jump over multiple pieces\n            break;\n          }\n        }\n        captureDistance++;\n      }\n\n      // If we found a piece to capture, check landing squares\n      if (capturedPiece) {\n        let landDistance = captureDistance;\n        while (true) {\n          const landRow = position.row + dRow * landDistance;\n          const landCol = position.col + dCol * landDistance;\n\n          if (!isValidSquare(landRow, landCol, config)) break;\n\n          const landingSquare = at(board, landRow, landCol, config);\n          if (landingSquare === null) {\n            // Valid landing square\n            const tempBoard = structuredClone(board);\n            set(tempBoard, landRow, landCol, piece, config);\n            set(tempBoard, position.row, position.col, null, config);\n            set(tempBoard, capturedPiece.row, capturedPiece.col, null, config);\n\n            const furtherCaptures = getCaptureMoves(\n              tempBoard,\n              { row: landRow, col: landCol },\n              piece,\n              config,\n            );\n\n            if (furtherCaptures.length > 0) {\n              // Add multi-jump moves\n              for (const furtherMove of furtherCaptures) {\n                moves.push({\n                  from: position,\n                  to: furtherMove.to,\n                  captures: [capturedPiece, ...(furtherMove.captures || [])],\n                  path: [\n                    position,\n                    { row: landRow, col: landCol },\n                    ...(furtherMove.path?.slice(1) || [furtherMove.to]),\n                  ],\n                });\n              }\n            } else {\n              // Single capture\n              moves.push({\n                from: position,\n                to: { row: landRow, col: landCol },\n                captures: [capturedPiece],\n                path: [position, { row: landRow, col: landCol }],\n              });\n            }\n            landDistance++;\n          } else {\n            // Can't land on occupied square\n            break;\n          }\n        }\n      }\n    }\n  } else {\n    // Regular capture (adjacent squares only)\n    for (const [dRow, dCol] of directions) {\n      const captureRow = position.row + dRow;\n      const captureCol = position.col + dCol;\n      const landRow = position.row + dRow * 2;\n      const landCol = position.col + dCol * 2;\n\n      if (\n        isValidSquare(landRow, landCol, config) &&\n        at(board, captureRow, captureCol, config) &&\n        at(board, captureRow, captureCol, config)!.color !== piece.color &&\n        at(board, landRow, landCol, config) === null\n      ) {\n        // Check for multiple jumps\n        const tempBoard = structuredClone(board);\n        set(tempBoard, landRow, landCol, piece, config);\n        set(tempBoard, position.row, position.col, null, config);\n        set(tempBoard, captureRow, captureCol, null, config);\n\n        const furtherCaptures = getCaptureMoves(\n          tempBoard,\n          { row: landRow, col: landCol },\n          piece,\n          config,\n        );\n\n        if (furtherCaptures.length > 0) {\n          // Add multi-jump moves\n          for (const furtherMove of furtherCaptures) {\n            moves.push({\n              from: position,\n              to: furtherMove.to,\n              captures: [\n                { row: captureRow, col: captureCol },\n                ...(furtherMove.captures || []),\n              ],\n              path: [\n                position,\n                { row: landRow, col: landCol },\n                ...(furtherMove.path?.slice(1) || [furtherMove.to]),\n              ],\n            });\n          }\n        } else {\n          // Single capture\n          moves.push({\n            from: position,\n            to: { row: landRow, col: landCol },\n            captures: [{ row: captureRow, col: captureCol }],\n            path: [position, { row: landRow, col: landCol }],\n          });\n        }\n      }\n    }\n  }\n\n  return moves;\n}\n\n/**\n * Find all positions for the current player that have at least one capture.\n * @param board The game board\n * @param currentPlayer Player to check\n * @param config Board configuration (defaults to American checkers)\n * @returns Positions that must capture according to rules\n */\nexport function getMustCapturePositions(\n  board: Board,\n  currentPlayer: PieceColor,\n  config: RulesConfig = DEFAULT_RULES,\n): Position[] {\n  const positions: Position[] = [];\n\n  const size = getSize(config);\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const piece = at(board, row, col, config);\n      if (piece && piece.color === currentPlayer) {\n        const captures = getCaptureMoves(board, { row, col }, piece, config);\n        if (captures.length > 0) {\n          positions.push({ row, col });\n        }\n      }\n    }\n  }\n\n  return positions;\n}\n\n/**\n * Apply a move to the board, removing captured pieces and promoting kings.\n * Returns a new board; does not mutate the input board.\n * @param board The current game board\n * @param move The move to apply\n * @param config Board configuration (defaults to American checkers)\n * @returns A new board after the move\n */\nexport function makeMove(\n  board: Board,\n  move: Move,\n  config: RulesConfig = DEFAULT_RULES,\n): Board {\n  const newBoard = structuredClone(board);\n  const piece = at(newBoard, move.from.row, move.from.col, config);\n\n  if (!piece) return board;\n\n  // Move piece\n  set(newBoard, move.to.row, move.to.col, piece, config);\n  set(newBoard, move.from.row, move.from.col, null, config);\n\n  // Remove captured pieces\n  if (move.captures) {\n    for (const capture of move.captures) {\n      set(newBoard, capture.row, capture.col, null, config);\n    }\n  }\n\n  // King promotion\n  if (piece.type === \"regular\") {\n    if (\n      (piece.color === \"red\" && move.to.row === getRedKingRow(config)) ||\n      (piece.color === \"black\" && move.to.row === getBlackKingRow(config))\n    ) {\n      set(\n        newBoard,\n        move.to.row,\n        move.to.col,\n        { ...piece, type: \"king\" },\n        config,\n      );\n    }\n  }\n\n  return newBoard;\n}\n\n/**\n * Determine if the game has a winner based on pieces and legal moves.\n * @param board The game board\n * @param config Board configuration (defaults to American checkers)\n * @param drawState Optional draw state for checking draw conditions\n * @returns 'red' or 'black' if a winner exists, 'draw' if drawn, or null\n */\nexport function checkWinner(\n  board: Board,\n  config: RulesConfig = DEFAULT_RULES,\n  drawState?: DrawState,\n): PieceColor | DrawResult | null {\n  let redCount = 0;\n  let blackCount = 0;\n  let redHasMoves = false;\n  let blackHasMoves = false;\n\n  const size = getSize(config);\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const piece = at(board, row, col, config);\n      if (piece) {\n        if (piece.color === \"red\") {\n          redCount++;\n          if (!redHasMoves) {\n            const moves = getValidMoves(board, { row, col }, \"red\", config);\n            if (moves.length > 0) redHasMoves = true;\n          }\n        } else {\n          blackCount++;\n          if (!blackHasMoves) {\n            const moves = getValidMoves(board, { row, col }, \"black\", config);\n            if (moves.length > 0) blackHasMoves = true;\n          }\n        }\n      }\n    }\n  }\n\n  // Check for wins\n  if (redCount === 0 || !redHasMoves) return \"black\";\n  if (blackCount === 0 || !blackHasMoves) return \"red\";\n\n  // Check for draws if draw state is provided\n  if (drawState) {\n    const drawResult = checkDrawConditions(board, drawState, config);\n    if (drawResult) return drawResult;\n  }\n\n  return null;\n}\n\n/**\n * Choose a simple AI move for the given color.\n * Prefers any available capture; otherwise chooses a random legal move.\n * @param board The game board\n * @param color The AI piece color\n * @param config Board configuration (defaults to American checkers)\n * @returns A selected move, or null if no moves\n */\nexport function getRandomAIMove(\n  board: Board,\n  color: PieceColor,\n  config: RulesConfig = DEFAULT_RULES,\n): Move | null {\n  const allMoves: Move[] = [];\n  const size = getSize(config);\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const piece = at(board, row, col, config);\n      if (piece && piece.color === color) {\n        const moves = getValidMoves(board, { row, col }, color, config);\n        allMoves.push(...moves);\n      }\n    }\n  }\n\n  if (allMoves.length === 0) return null;\n\n  // Prefer captures\n  const captureMoves = allMoves.filter(\n    (move) => move.captures && move.captures.length > 0,\n  );\n  if (captureMoves.length > 0) {\n    return (\n      captureMoves[Math.floor(Math.random() * captureMoves.length)] || null\n    );\n  }\n\n  return allMoves[Math.floor(Math.random() * allMoves.length)] || null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/move-evaluation.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":26,"column":5,"nodeType":"AssignmentPattern","messageId":"anyAssignment","endLine":26,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":29,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":29,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `{ draws: { fortyMoveRule: boolean; twentyFiveMoveRule: boolean; repetitionLimit: number; insufficientMaterial: boolean; staleMate: boolean; customDrawConditions?: string[] | undefined; }; ... 9 more ...; customRules?: Record<...> | undefined; }`.","line":30,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":30,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":41,"column":5,"nodeType":"AssignmentPattern","messageId":"anyAssignment","endLine":41,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .useCache on an `error` typed value.","line":44,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":46,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":46,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":58,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .depth on an `error` typed value.","line":58,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `number`.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":59,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timeLimit on an `error` typed value.","line":59,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":7,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":9,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2030,2032],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":70,"column":12,"nodeType":"Property","messageId":"anyAssignment","endLine":70,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":80,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":80,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":88,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":95,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":98,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includeAlternatives on an `error` typed value.","line":114,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":120,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":127,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":129,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":136,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":136,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .useCache on an `error` typed value.","line":142,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":156,"column":5,"nodeType":"AssignmentPattern","messageId":"anyAssignment","endLine":156,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":165,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":176,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":176,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":177,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .category on an `error` typed value.","line":188,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .category on an `error` typed value.","line":191,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .context on an `error` typed value.","line":196,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionEvalAfter on an `error` typed value.","line":201,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [currentPlayer] resolves to an `error` typed value.","line":206,"column":24,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":206,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [evaluation.category] on an `error` typed value.","line":206,"column":39,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":206,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [evaluation.category] resolves to an `error` typed value.","line":206,"column":39,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":206,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .category on an `error` typed value.","line":206,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":211,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":211,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionEvalAfter on an `error` typed value.","line":211,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":215,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":215,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":215,"column":22,"nodeType":"Identifier","messageId":"unsafeCall","endLine":215,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":217,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":217,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionEvalAfter on an `error` typed value.","line":217,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .best on an `error` typed value.","line":264,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .good on an `error` typed value.","line":267,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":267,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .inaccuracy on an `error` typed value.","line":270,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":270,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .mistake on an `error` typed value.","line":273,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":289,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":299,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveComplexity on an `error` typed value.","line":291,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":291,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":293,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":293,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .alternativesQuality on an `error` typed value.","line":293,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .alternativesQuality on an `error` typed value.","line":295,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":295,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .forcedMoveCount on an `error` typed value.","line":297,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .positionVolatility on an `error` typed value.","line":298,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":310,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":318,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .threatLevel on an `error` typed value.","line":312,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":312,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .isOnlyGoodMove on an `error` typed value.","line":313,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":313,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":314,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":314,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .alternativesQuality on an `error` typed value.","line":314,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":314,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .alternativesQuality on an `error` typed value.","line":316,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":316,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":333,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":333,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":336,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":336,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":353,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":353,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":353,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":353,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":354,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":354,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":354,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":354,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .detectBrilliant on an `error` typed value.","line":362,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":371,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":371,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":372,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":372,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":373,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":373,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":384,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":384,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":385,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":385,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":386,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":386,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":386,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":386,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":387,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":387,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":388,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":393,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":388,"column":30,"nodeType":"Identifier","messageId":"unsafeCall","endLine":388,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an error typed type.","line":394,"column":22,"nodeType":"SpreadElement","messageId":"unsafeSpread","endLine":394,"endColumn":35},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'timeLimit' is defined but never used. Allowed unused args must match /^_/u.","line":406,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":411,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":411,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":411,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":411,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":418,"column":22,"nodeType":"Property","messageId":"anyAssignment","endLine":418,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Board`.","line":439,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":439,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `PieceColor`.","line":439,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":439,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":454,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":454,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":455,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":455,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":456,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":456,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":469,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":469,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":469,"column":25,"nodeType":"Identifier","messageId":"unsafeCall","endLine":469,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":471,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":475,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":471,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":471,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":477,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":477,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":477,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":477,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":480,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":480,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `error` typed value.","line":480,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":480,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":513,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":513,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":514,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":514,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":515,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":515,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":515,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":515,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":517,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":517,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":518,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":518,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":532,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":532,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":532,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":532,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":532,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":532,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":533,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":533,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":533,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":533,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":533,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":533,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":540,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":540,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":540,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":540,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":557,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":557,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":557,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":557,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":566,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":566,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":566,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":566,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":576,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":576,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .path on an `error` typed value.","line":576,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":576,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveComplexity on an `error` typed value.","line":587,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":587,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .threatLevel on an `error` typed value.","line":597,"column":94,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":597,"endColumn":105},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [category as MoveCategory] resolves to an `error` typed value.","line":624,"column":30,"nodeType":"TSAsExpression","messageId":"unsafeComputedMemberAccess","endLine":624,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":633,"column":49,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":633,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .context on an `error` typed value.","line":633,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":633,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":635,"column":39,"nodeType":"BinaryExpression","messageId":"unsafeReturn","endLine":635,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":654,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":654,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":654,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":654,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":655,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":655,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":655,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":655,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":656,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":656,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":656,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":656,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":657,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":657,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":657,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":657,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":662,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":662,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":662,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":662,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":663,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":663,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":663,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":663,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":664,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":664,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .captures on an `error` typed value.","line":664,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":664,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":674,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":674,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `error` typed value.","line":675,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":675,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":676,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":676,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [row] on an `error` typed value.","line":676,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":676,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `error` typed value.","line":681,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":681,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":682,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":682,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `error` typed value.","line":685,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":685,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":691,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":691,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .from on an `error` typed value.","line":691,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":691,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":691,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":691,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .to on an `error` typed value.","line":691,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":691,"endColumn":80}],"suppressedMessages":[],"errorCount":142,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Move, Board, PieceColor } from \"./game-logic\";\nimport { makeMove, getValidMoves, getMustCapturePositions } from \"./game-logic\";\nimport type { VariantConfig } from \"./game-engine/rule-schema\";\nimport { AmericanConfig } from \"./game-engine/rule-configs/american\";\nimport { CheckersAI } from \"./ai-engine\";\nimport type {\n  MoveCategory,\n  MoveContext,\n  MoveEvaluation,\n  GameAnalysis,\n  AnalysisConfig,\n  GamePhase,\n  ThreatLevel,\n} from \"./types/move-analysis\";\nimport {\n  MOVE_QUALITY_THRESHOLDS,\n  DEFAULT_ANALYSIS_CONFIG,\n} from \"./types/move-analysis\";\n\nexport class MoveEvaluator {\n  private ai: CheckersAI;\n  private rules: VariantConfig;\n  private analysisCache = new Map<string, MoveEvaluation>();\n\n  constructor(\n    rules: VariantConfig = AmericanConfig,\n    aiDifficulty: \"medium\" | \"hard\" | \"expert\" = \"expert\",\n  ) {\n    this.rules = rules;\n    this.ai = new CheckersAI({ difficulty: aiDifficulty }, rules);\n  }\n\n  /**\n   * Evaluates a single move in the context of the position\n   */\n  async evaluateMove(\n    board: Board,\n    move: Move,\n    playerColor: PieceColor,\n    moveIndex: number,\n    config: AnalysisConfig = DEFAULT_ANALYSIS_CONFIG,\n  ): Promise<MoveEvaluation> {\n    // Check cache if enabled\n    if (config.useCache) {\n      const cacheKey = this.getCacheKey(board, move, playerColor);\n      const cached = this.analysisCache.get(cacheKey);\n      if (cached) return cached;\n    }\n\n    // Get all legal moves for comparison\n    const allMoves = this.getAllLegalMoves(board, playerColor);\n\n    // Evaluate each move at the specified depth\n    const moveScores = await this.evaluateAllMoves(\n      board,\n      allMoves,\n      playerColor,\n      config.depth,\n      config.timeLimit,\n    );\n\n    // Find the best move and score\n    const bestMoveData = moveScores.reduce((best, current) =>\n      current.score > best.score ? current : best,\n    );\n\n    // Find the score for the actual move played\n    const actualMoveData = moveScores.find((m) =>\n      this.movesEqual(m.move, move),\n    ) || { move, score: -Infinity };\n\n    // Calculate score differential (percentage)\n    const scoreDifferential = this.calculateScoreDifferential(\n      actualMoveData.score,\n      bestMoveData.score,\n    );\n\n    // Evaluate positions before and after the move\n    const positionEvalBefore = await this.evaluatePosition(board, playerColor);\n    const boardAfter = makeMove(board, move, this.rules);\n    const positionEvalAfter = await this.evaluatePosition(\n      boardAfter,\n      playerColor,\n    );\n    const swingValue = positionEvalAfter - positionEvalBefore;\n\n    // Analyze the context\n    const context = await this.analyzeContext(\n      board,\n      move,\n      allMoves,\n      moveScores,\n      playerColor,\n      config,\n    );\n\n    // Categorize the move\n    const category = this.categorizeMove(\n      scoreDifferential,\n      swingValue,\n      context,\n      actualMoveData.score === bestMoveData.score,\n    );\n\n    // Generate explanation\n    const explanation = this.generateExplanation(\n      category,\n      context,\n      scoreDifferential,\n      swingValue,\n    );\n\n    // Prepare alternative moves if requested\n    const alternativeMoves = config.includeAlternatives\n      ? moveScores\n          .filter((m) => !this.movesEqual(m.move, move))\n          .sort((a, b) => b.score - a.score)\n          .slice(0, 3)\n          .map((m) => ({\n            move: m.move,\n            score: m.score,\n            notation: this.moveToSimpleNotation(m.move),\n          }))\n      : undefined;\n\n    const evaluation: MoveEvaluation = {\n      move,\n      moveIndex,\n      category,\n      score: actualMoveData.score,\n      bestScore: bestMoveData.score,\n      scoreDifferential,\n      positionEvalBefore,\n      positionEvalAfter,\n      swingValue,\n      context,\n      explanation,\n      alternativeMoves,\n    };\n\n    // Cache the result\n    if (config.useCache) {\n      const cacheKey = this.getCacheKey(board, move, playerColor);\n      this.analysisCache.set(cacheKey, evaluation);\n    }\n\n    return evaluation;\n  }\n\n  /**\n   * Analyzes a complete game\n   */\n  async analyzeGame(\n    moves: Move[],\n    initialBoard: Board,\n    config: AnalysisConfig = DEFAULT_ANALYSIS_CONFIG,\n  ): Promise<GameAnalysis> {\n    const evaluations: MoveEvaluation[] = [];\n    const turningPoints: number[] = [];\n    const criticalMoments: number[] = [];\n    const brilliantMoves: number[] = [];\n    const blunders: number[] = [];\n    const evaluationGraph: { moveIndex: number; evaluation: number }[] = [];\n\n    let currentBoard = initialBoard;\n    let currentPlayer: PieceColor = \"red\";\n    let previousEval = 0;\n\n    const moveQualityCount = {\n      red: this.initializeMoveQualityCount(),\n      black: this.initializeMoveQualityCount(),\n    };\n\n    // Analyze each move\n    for (let i = 0; i < moves.length; i++) {\n      const move = moves[i]!;\n      const evaluation = await this.evaluateMove(\n        currentBoard,\n        move,\n        currentPlayer,\n        i,\n        config,\n      );\n\n      evaluations.push(evaluation);\n\n      // Track special moves\n      if (evaluation.category === \"brilliant\") {\n        brilliantMoves.push(i);\n      }\n      if (evaluation.category === \"blunder\") {\n        blunders.push(i);\n      }\n\n      // Track critical moments\n      if (evaluation.context.threatLevel === \"critical\") {\n        criticalMoments.push(i);\n      }\n\n      // Track turning points (large evaluation swings)\n      if (Math.abs(evaluation.positionEvalAfter - previousEval) > 30) {\n        turningPoints.push(i);\n      }\n\n      // Update move quality count\n      moveQualityCount[currentPlayer][evaluation.category]++;\n\n      // Add to evaluation graph\n      evaluationGraph.push({\n        moveIndex: i,\n        evaluation: evaluation.positionEvalAfter,\n      });\n\n      // Update for next iteration\n      currentBoard = makeMove(currentBoard, move, this.rules);\n      currentPlayer = currentPlayer === \"red\" ? \"black\" : \"red\";\n      previousEval = evaluation.positionEvalAfter;\n    }\n\n    // Calculate accuracy scores\n    const averageAccuracy = {\n      red: this.calculateAccuracy(moveQualityCount.red),\n      black: this.calculateAccuracy(moveQualityCount.black),\n    };\n\n    // Calculate game sharpness\n    const gameSharpness = this.calculateGameSharpness(evaluations);\n\n    return {\n      moves: evaluations,\n      turningPoints,\n      criticalMoments,\n      averageAccuracy,\n      moveQualityCount,\n      brilliantMoves,\n      blunders,\n      gameSharpness,\n      evaluationGraph,\n    };\n  }\n\n  /**\n   * Categorizes a move based on its quality\n   */\n  private categorizeMove(\n    scoreDifferential: number,\n    swingValue: number,\n    context: MoveContext,\n    isBestMove: boolean,\n  ): MoveCategory {\n    // Check for brilliant move\n    if (\n      this.isBrilliantMove(scoreDifferential, swingValue, context, isBestMove)\n    ) {\n      return \"brilliant\";\n    }\n\n    // Check for excellent move\n    if (this.isExcellentMove(scoreDifferential, context, isBestMove)) {\n      return \"excellent\";\n    }\n\n    // Standard categorization based on score differential\n    if (scoreDifferential <= MOVE_QUALITY_THRESHOLDS.best) {\n      return \"best\";\n    }\n    if (scoreDifferential <= MOVE_QUALITY_THRESHOLDS.good) {\n      return \"good\";\n    }\n    if (scoreDifferential <= MOVE_QUALITY_THRESHOLDS.inaccuracy) {\n      return \"inaccuracy\";\n    }\n    if (scoreDifferential <= MOVE_QUALITY_THRESHOLDS.mistake) {\n      return \"mistake\";\n    }\n\n    return \"blunder\";\n  }\n\n  /**\n   * Detects if a move qualifies as \"brilliant\"\n   */\n  private isBrilliantMove(\n    scoreDifferential: number,\n    swingValue: number,\n    context: MoveContext,\n    isBestMove: boolean,\n  ): boolean {\n    return (\n      isBestMove && // Must be the best move\n      context.moveComplexity >= 4 && // Requires deep calculation\n      swingValue >= 30 && // Significant improvement\n      context.alternativesQuality.every(\n        // All other moves are much worse\n        (alt) => alt < context.alternativesQuality[0]! - 20,\n      ) &&\n      context.forcedMoveCount === 0 && // Not a forced capture\n      context.positionVolatility > 60 // In a sharp position\n    );\n  }\n\n  /**\n   * Detects if a move qualifies as \"excellent\"\n   */\n  private isExcellentMove(\n    scoreDifferential: number,\n    context: MoveContext,\n    isBestMove: boolean,\n  ): boolean {\n    return (\n      isBestMove && // Must be the best move\n      context.threatLevel === \"critical\" && // In a critical position\n      context.isOnlyGoodMove && // Only move that maintains advantage\n      context.alternativesQuality.every(\n        // All alternatives lose\n        (alt) => alt < context.alternativesQuality[0]! - 40,\n      )\n    );\n  }\n\n  /**\n   * Analyzes the context of a move\n   */\n  private async analyzeContext(\n    board: Board,\n    move: Move,\n    allMoves: Move[],\n    moveScores: { move: Move; score: number }[],\n    playerColor: PieceColor,\n    config: AnalysisConfig,\n  ): Promise<MoveContext> {\n    // Determine game phase\n    const gamePhase = this.determineGamePhase(board);\n\n    // Assess threat level\n    const threatLevel = this.assessThreatLevel(board, playerColor);\n\n    // Calculate position volatility\n    const positionVolatility = this.calculatePositionVolatility(\n      board,\n      playerColor,\n    );\n\n    // Calculate material balance\n    const materialBalance = this.calculateMaterialBalance(board);\n\n    // Get alternative move scores\n    const alternativesQuality = moveScores\n      .filter((m) => !this.movesEqual(m.move, move))\n      .map((m) => m.score);\n\n    // Determine if this is a forced move\n    const mustCapture = getMustCapturePositions(board, playerColor, this.rules);\n    const forcedMoveCount = mustCapture.length;\n\n    // Check if this is the only good move\n    const bestScore = Math.max(...moveScores.map((m) => m.score));\n    const goodMoves = moveScores.filter((m) => m.score >= bestScore - 20);\n    const isOnlyGoodMove = goodMoves.length === 1;\n\n    // Estimate move complexity (simplified - in real implementation would use search depth)\n    const moveComplexity = config.detectBrilliant\n      ? await this.estimateMoveComplexity(board, move, playerColor)\n      : 2;\n\n    return {\n      moveComplexity,\n      alternativesQuality,\n      positionVolatility,\n      materialBalance,\n      gamePhase,\n      threatLevel,\n      forcedMoveCount,\n      isOnlyGoodMove,\n    };\n  }\n\n  /**\n   * Helper methods\n   */\n\n  private getAllLegalMoves(board: Board, color: PieceColor): Move[] {\n    const moves: Move[] = [];\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (piece && piece.color === color) {\n          const pieceMoves = getValidMoves(\n            board,\n            { row, col },\n            color,\n            this.rules,\n          );\n          moves.push(...pieceMoves);\n        }\n      }\n    }\n    return moves;\n  }\n\n  private async evaluateAllMoves(\n    board: Board,\n    moves: Move[],\n    playerColor: PieceColor,\n    depth: number,\n    timeLimit: number,\n  ): Promise<{ move: Move; score: number }[]> {\n    const results: { move: Move; score: number }[] = [];\n\n    for (const move of moves) {\n      const boardAfter = makeMove(board, move, this.rules);\n      // Use AI to evaluate the position after the move\n      const score = await this.evaluatePositionWithAI(\n        boardAfter,\n        playerColor,\n        depth,\n      );\n      results.push({ move, score });\n    }\n\n    return results;\n  }\n\n  private async evaluatePosition(\n    board: Board,\n    playerColor: PieceColor,\n  ): Promise<number> {\n    // Simplified evaluation - returns a value from -100 to +100\n    // Positive = red advantage, negative = black advantage\n    return this.evaluatePositionWithAI(board, playerColor, 2);\n  }\n\n  private async evaluatePositionWithAI(\n    board: Board,\n    playerColor: PieceColor,\n    depth: number,\n  ): Promise<number> {\n    // Use the AI engine's analysis method\n    return this.ai.analyzePosition(board, playerColor, depth);\n  }\n\n  private calculateScoreDifferential(\n    actualScore: number,\n    bestScore: number,\n  ): number {\n    if (bestScore === 0) return 0;\n    const diff = Math.abs(bestScore - actualScore);\n    const percentage = (diff / Math.abs(bestScore)) * 100;\n    return Math.min(100, percentage);\n  }\n\n  private determineGamePhase(board: Board): GamePhase {\n    let pieceCount = 0;\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        if (board[row]?.[col]) pieceCount++;\n      }\n    }\n\n    if (pieceCount > 20) return \"opening\";\n    if (pieceCount > 8) return \"midgame\";\n    return \"endgame\";\n  }\n\n  private assessThreatLevel(\n    board: Board,\n    playerColor: PieceColor,\n  ): ThreatLevel {\n    const mustCapture = getMustCapturePositions(board, playerColor, this.rules);\n    const opponentColor = playerColor === \"red\" ? \"black\" : \"red\";\n    const opponentMustCapture = getMustCapturePositions(\n      board,\n      opponentColor,\n      this.rules,\n    );\n\n    if (mustCapture.length > 2 || opponentMustCapture.length > 2) {\n      return \"critical\";\n    }\n    if (mustCapture.length > 0 || opponentMustCapture.length > 0) {\n      return \"severe\";\n    }\n\n    // Check for pieces under threat\n    const threatenedPieces = this.countThreatenedPieces(board, playerColor);\n    if (threatenedPieces > 2) return \"severe\";\n    if (threatenedPieces > 0) return \"mild\";\n\n    return \"none\";\n  }\n\n  private calculatePositionVolatility(\n    board: Board,\n    playerColor: PieceColor,\n  ): number {\n    // Measure how tactical/sharp the position is (0-100)\n    const captures = this.countPossibleCaptures(board);\n    const multipleCaptureSequences = this.countMultiCaptureSequences(\n      board,\n      playerColor,\n    );\n\n    // Simple heuristic: more captures = more volatile\n    const volatility = Math.min(\n      100,\n      captures * 10 + multipleCaptureSequences * 20,\n    );\n    return volatility;\n  }\n\n  private calculateMaterialBalance(board: Board): number {\n    let balance = 0;\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (piece) {\n          const value = piece.type === \"king\" ? 3 : 2;\n          balance += piece.color === \"red\" ? value : -value;\n        }\n      }\n    }\n    return balance;\n  }\n\n  private async estimateMoveComplexity(\n    board: Board,\n    move: Move,\n    playerColor: PieceColor,\n  ): Promise<number> {\n    // Simplified complexity estimation\n    // In full implementation, would measure search depth needed to find the move\n    const hasCaptures = move.captures && move.captures.length > 0;\n    const isMultiJump = move.path && move.path.length > 2;\n\n    let complexity = 1;\n    if (hasCaptures) complexity += 1;\n    if (isMultiJump) complexity += 2;\n\n    // Check if move creates threats\n    const boardAfter = makeMove(board, move, this.rules);\n    const opponentColor = playerColor === \"red\" ? \"black\" : \"red\";\n    const threatsCreated = this.countThreatenedPieces(\n      boardAfter,\n      opponentColor,\n    );\n    complexity += threatsCreated;\n\n    return Math.min(10, complexity);\n  }\n\n  private countThreatenedPieces(board: Board, playerColor: PieceColor): number {\n    // Simplified threat detection\n    // Count pieces that could be captured on the next move\n    const opponentColor = playerColor === \"red\" ? \"black\" : \"red\";\n    const opponentMoves = this.getAllLegalMoves(board, opponentColor);\n    const captureCount = opponentMoves.filter(\n      (m) => m.captures && m.captures.length > 0,\n    ).length;\n    return captureCount;\n  }\n\n  private countPossibleCaptures(board: Board): number {\n    let count = 0;\n    for (const color of [\"red\", \"black\"] as PieceColor[]) {\n      const moves = this.getAllLegalMoves(board, color);\n      count += moves.filter((m) => m.captures && m.captures.length > 0).length;\n    }\n    return count;\n  }\n\n  private countMultiCaptureSequences(\n    board: Board,\n    playerColor: PieceColor,\n  ): number {\n    const moves = this.getAllLegalMoves(board, playerColor);\n    return moves.filter((m) => m.path && m.path.length > 2).length;\n  }\n\n  private generateExplanation(\n    category: MoveCategory,\n    context: MoveContext,\n    scoreDifferential: number,\n    swingValue: number,\n  ): string {\n    switch (category) {\n      case \"brilliant\":\n        return `A deep, non-obvious move that required ${context.moveComplexity}+ moves of calculation. Improves position by ${swingValue.toFixed(1)} points.`;\n      case \"excellent\":\n        return `The only good move in this critical position. All alternatives would have lost significant advantage.`;\n      case \"best\":\n        return `The objectively best move in this position.`;\n      case \"good\":\n        return `A solid move, only ${scoreDifferential.toFixed(0)}% worse than the best option.`;\n      case \"inaccuracy\":\n        return `Suboptimal move. A better option was available that would have been ${scoreDifferential.toFixed(0)}% stronger.`;\n      case \"mistake\":\n        return `This move loses ${scoreDifferential.toFixed(0)}% of the advantage. ${context.threatLevel === \"critical\" ? \"Particularly costly in this critical position.\" : \"\"}`;\n      case \"blunder\":\n        return `Severe error that loses ${scoreDifferential.toFixed(0)}% of position value. ${swingValue < -30 ? \"Game-changing mistake.\" : \"Significant material or positional loss.\"}`;\n      default:\n        return \"\";\n    }\n  }\n\n  private calculateAccuracy(moveQuality: Record<MoveCategory, number>): number {\n    const total = Object.values(moveQuality).reduce(\n      (sum, count) => sum + count,\n      0,\n    );\n    if (total === 0) return 100;\n\n    const weights = {\n      brilliant: 110, // Bonus for brilliant moves\n      excellent: 105, // Bonus for excellent moves\n      best: 100,\n      good: 90,\n      inaccuracy: 60,\n      mistake: 30,\n      blunder: 0,\n    };\n\n    let weightedSum = 0;\n    for (const [category, count] of Object.entries(moveQuality)) {\n      weightedSum += weights[category as MoveCategory] * count;\n    }\n\n    return Math.round(weightedSum / total);\n  }\n\n  private calculateGameSharpness(evaluations: MoveEvaluation[]): number {\n    if (evaluations.length === 0) return 0;\n\n    const volatilities = evaluations.map((e) => e.context.positionVolatility);\n    const average =\n      volatilities.reduce((sum, v) => sum + v, 0) / volatilities.length;\n\n    return Math.round(average);\n  }\n\n  private initializeMoveQualityCount(): Record<MoveCategory, number> {\n    return {\n      brilliant: 0,\n      excellent: 0,\n      best: 0,\n      good: 0,\n      inaccuracy: 0,\n      mistake: 0,\n      blunder: 0,\n    };\n  }\n\n  private movesEqual(move1: Move, move2: Move): boolean {\n    return (\n      move1.from.row === move2.from.row &&\n      move1.from.col === move2.from.col &&\n      move1.to.row === move2.to.row &&\n      move1.to.col === move2.to.col\n    );\n  }\n\n  private moveToSimpleNotation(move: Move): string {\n    const fromSquare = `${move.from.row}-${move.from.col}`;\n    const toSquare = `${move.to.row}-${move.to.col}`;\n    const capture = move.captures && move.captures.length > 0 ? \"x\" : \"-\";\n    return `${fromSquare}${capture}${toSquare}`;\n  }\n\n  private getCacheKey(\n    board: Board,\n    move: Move,\n    playerColor: PieceColor,\n  ): string {\n    let boardStr = \"\";\n    for (let row = 0; row < this.rules.board.size; row++) {\n      for (let col = 0; col < this.rules.board.size; col++) {\n        const piece = board[row]?.[col];\n        if (!piece) {\n          boardStr += \"0\";\n        } else {\n          boardStr +=\n            piece.color === \"red\"\n              ? piece.type === \"king\"\n                ? \"R\"\n                : \"r\"\n              : piece.type === \"king\"\n                ? \"B\"\n                : \"b\";\n        }\n      }\n    }\n    return `${boardStr}-${move.from.row}${move.from.col}${move.to.row}${move.to.col}-${playerColor}`;\n  }\n\n  /**\n   * Clear the analysis cache\n   */\n  clearCache(): void {\n    this.analysisCache.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/player-types.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":55,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":73,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":87,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":121,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":121,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [color] resolves to an `error` typed value.","line":121,"column":18,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":121,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":148,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":148,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3132,3134],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":152,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":10},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":170,"column":19,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":170,"endColumn":21,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3694,3696],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":195,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":195,"endColumn":10}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type PieceColor } from \"./game-logic\";\n\nexport interface PlayerStats {\n  wins: number;\n  draws: number;\n  losses: number;\n  rating?: number;\n}\n\nexport interface PlayerInfo {\n  id?: string;\n  name: string;\n  avatar?: string;\n  stats?: PlayerStats;\n  isAI?: boolean;\n  aiDifficulty?: \"easy\" | \"medium\" | \"hard\" | \"expert\";\n  isCurrentUser?: boolean;\n  isGuest?: boolean;\n  color?: PieceColor;\n}\n\nexport interface GamePlayers {\n  red: PlayerInfo;\n  black: PlayerInfo;\n}\n\n/**\n * Create default player info for AI opponents\n */\nexport function createAIPlayer(\n  difficulty: \"easy\" | \"medium\" | \"hard\" | \"expert\" = \"medium\",\n  color: PieceColor,\n): PlayerInfo {\n  const aiNames = {\n    easy: \"AI Player\",\n    medium: \"AI Player\",\n    hard: \"AI Player\",\n    expert: \"AI Player\",\n  };\n\n  const aiStats = {\n    easy: { wins: 245, draws: 12, losses: 183, rating: 1200 },\n    medium: { wins: 487, draws: 23, losses: 120, rating: 1500 },\n    hard: { wins: 892, draws: 45, losses: 63, rating: 1800 },\n    expert: { wins: 1247, draws: 78, losses: 25, rating: 2200 },\n  };\n\n  return {\n    id: `ai-${difficulty}`,\n    name: aiNames[difficulty],\n    stats: aiStats[difficulty],\n    isAI: true,\n    aiDifficulty: difficulty,\n    isCurrentUser: false,\n    color,\n  };\n}\n\n/**\n * Create default player info for human players\n */\nexport function createHumanPlayer(\n  name = \"Player\",\n  color: PieceColor,\n  isCurrentUser = false,\n): PlayerInfo {\n  return {\n    id: `player-${color}`,\n    name,\n    stats: { wins: 0, draws: 0, losses: 0, rating: 1000 },\n    isAI: false,\n    isCurrentUser,\n    color,\n  };\n}\n\n/**\n * Create guest/anonymous player\n */\nexport function createGuestPlayer(color: PieceColor): PlayerInfo {\n  return {\n    id: `guest-${color}`,\n    name: `Guest ${color === \"red\" ? \"Red\" : \"Black\"}`,\n    stats: undefined, // No stats for guests\n    isAI: false,\n    isCurrentUser: false,\n    color,\n  };\n}\n\n/**\n * Create default players for local games\n */\nexport function createLocalGamePlayers(): GamePlayers {\n  return {\n    red: createHumanPlayer(\"Player 1\", \"red\", true),\n    black: createHumanPlayer(\"Player 2\", \"black\", false),\n  };\n}\n\n/**\n * Create players for AI games\n */\nexport function createAIGamePlayers(\n  difficulty: \"easy\" | \"medium\" | \"hard\" | \"expert\" = \"medium\",\n  playerName = \"You\",\n): GamePlayers {\n  return {\n    red: createHumanPlayer(playerName, \"red\", true),\n    black: createAIPlayer(difficulty, \"black\"),\n  };\n}\n\n/**\n * Get player by color from GamePlayers\n */\nexport function getPlayerByColor(\n  players: GamePlayers,\n  color: PieceColor,\n): PlayerInfo {\n  return players[color];\n}\n\n/**\n * Get opponent by color from GamePlayers\n */\nexport function getOpponentByColor(\n  players: GamePlayers,\n  color: PieceColor,\n): PlayerInfo {\n  return color === \"red\" ? players.black : players.red;\n}\n\n/**\n * Create fallback player when player info is missing or invalid\n */\nexport function createFallbackPlayer(\n  color: PieceColor,\n  originalName?: string,\n  isAI?: boolean,\n): PlayerInfo {\n  if (isAI) {\n    return createAIPlayer(\"medium\", color);\n  }\n\n  return {\n    id: `fallback-${color}`,\n    name: originalName || `${color === \"red\" ? \"Red\" : \"Black\"} Player`,\n    stats: undefined,\n    isAI: false,\n    isCurrentUser: false,\n    color,\n  };\n}\n\n/**\n * Validate and sanitize player info, providing fallbacks for missing data\n */\nexport function sanitizePlayerInfo(\n  player: Partial<PlayerInfo>,\n  color: PieceColor,\n): PlayerInfo {\n  // Provide fallback for missing or invalid player info\n  if (!player || typeof player !== \"object\") {\n    return createFallbackPlayer(color);\n  }\n\n  // Ensure required fields are present\n  const sanitized: PlayerInfo = {\n    id: player.id || `player-${color}-${Date.now()}`,\n    name:\n      player.name && typeof player.name === \"string\" && player.name.trim()\n        ? player.name.trim()\n        : `${color === \"red\" ? \"Red\" : \"Black\"} Player`,\n    avatar:\n      player.avatar && typeof player.avatar === \"string\"\n        ? player.avatar\n        : undefined,\n    stats:\n      player.stats && typeof player.stats === \"object\"\n        ? {\n            wins: Math.max(0, Number(player.stats.wins) || 0),\n            draws: Math.max(0, Number(player.stats.draws) || 0),\n            losses: Math.max(0, Number(player.stats.losses) || 0),\n            rating:\n              player.stats.rating && Number(player.stats.rating) > 0\n                ? Number(player.stats.rating)\n                : undefined,\n          }\n        : undefined,\n    isAI: Boolean(player.isAI),\n    aiDifficulty:\n      player.isAI && player.aiDifficulty ? player.aiDifficulty : undefined,\n    isCurrentUser: Boolean(player.isCurrentUser),\n    color,\n  };\n\n  return sanitized;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/state/game-context.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1231,1234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1231,1234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1397,1400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1397,1400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1925,1927],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2011,2014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2011,2014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Move`.","line":76,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":76,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":85,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":85,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2600,2602],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport React, {\n  createContext,\n  useContext,\n  useMemo,\n  useReducer,\n  useCallback,\n} from \"react\";\nimport type { BoardVariant } from \"~/lib/game/variants\";\nimport { createInitialBoard, makeMove } from \"~/lib/game/logic\";\nimport { GameConfigLoader } from \"~/lib/game-engine/config-loader\";\nimport { gameReducer } from \"./game-reducer\";\nimport type { GameState, GameAction, GameMode } from \"./game-types\";\nimport {\n  createAIGamePlayers,\n  createLocalGamePlayers,\n} from \"~/lib/game/player-types\";\nimport type { VariantConfig } from \"~/lib/game-engine/rule-schema\";\nimport type { TimeControl } from \"~/lib/game/time-control-types\";\nimport type { AIDifficulty } from \"~/lib/game/ai-engine\";\nimport { useGameSounds } from \"~/hooks/useGameSounds\";\nimport { useSettings } from \"~/contexts/settings-context\";\nimport { createDrawState } from \"~/lib/game/draw-detection\";\n\nconst GameContext = createContext<{\n  state: GameState;\n  dispatch: React.Dispatch<GameAction>;\n} | null>(null);\n\ninterface GameConfig {\n  boardVariant: BoardVariant;\n  rules: VariantConfig;\n  playerColor: \"red\" | \"black\";\n  aiDifficulty: AIDifficulty | null;\n  timeControl: TimeControl | null;\n}\n\ninterface InitialGameData {\n  id: string;\n  board: any;\n  currentPlayer: string;\n  moveCount: number;\n  gameMode: string;\n  winner: string | null;\n  gameConfig: GameConfig;\n  timeControl: TimeControl | null;\n  moves: any[];\n  gameStartTime: Date;\n}\n\nexport function GameProvider({\n  children,\n  gameId,\n  initialConfig,\n}: {\n  children: React.ReactNode;\n  gameId?: string;\n  initialConfig?: InitialGameData | null;\n}) {\n  // If we have initial config from database, use it\n  // Otherwise create a default local game\n  const initialState: GameState = useMemo(() => {\n    if (initialConfig) {\n      const { gameConfig } = initialConfig;\n      const gameMode = initialConfig.gameMode as GameMode;\n      const aiDifficulty = gameConfig.aiDifficulty || \"medium\";\n\n      // Reconstruct board history from moves\n      const boardHistory: any[] = [];\n      let currentBoard = createInitialBoard(gameConfig.rules);\n      boardHistory.push(currentBoard);\n\n      // Apply each move to reconstruct the board history\n      if (initialConfig.moves && initialConfig.moves.length > 0) {\n        for (const move of initialConfig.moves) {\n          currentBoard = makeMove(currentBoard, move, gameConfig.rules);\n          boardHistory.push(currentBoard);\n        }\n      }\n\n      return {\n        gameId: initialConfig.id,\n        rules: gameConfig.rules,\n        boardVariant: gameConfig.boardVariant,\n        board: initialConfig.board || currentBoard,\n        currentPlayer: initialConfig.currentPlayer as \"red\" | \"black\",\n        playerColor: gameConfig.playerColor,\n        selectedPosition: null,\n        draggingPosition: null,\n        validMoves: [],\n        moveCount: initialConfig.moveCount,\n        moveHistory: initialConfig.moves || [],\n        boardHistory,\n        currentMoveIndex: (initialConfig.moves?.length || 0) - 1,\n        isViewingHistory: false,\n        winner: initialConfig.winner as \"red\" | \"black\" | \"draw\" | null,\n        drawState: createDrawState(),\n        drawReason: null,\n        showWinnerDialog: false,\n        showContinueDialog: false,\n        showKeyboardHelp: false,\n        showTimeControlDialog: false,\n        showDrawDialog: false,\n        drawRequestedBy: null,\n        timeControl: gameConfig.timeControl,\n        audioWarningsEnabled: true,\n        gameMode,\n        aiDifficulty,\n        players:\n          gameMode === \"ai\"\n            ? createAIGamePlayers(aiDifficulty)\n            : createLocalGamePlayers(),\n        isAIThinking: false,\n        isReviewMode: false,\n        gameAnalysis: null,\n        isAnalyzing: false,\n        analyzeProgress: 0,\n        gameStartTime: new Date(initialConfig.gameStartTime),\n      };\n    } else {\n      // Default local game\n      const resolved: VariantConfig = GameConfigLoader.loadVariant(\"american\");\n      const initialBoard = createInitialBoard(resolved);\n\n      return {\n        gameId,\n        rules: resolved,\n        boardVariant: \"american\",\n        board: initialBoard,\n        currentPlayer: \"red\",\n        playerColor: \"red\",\n        selectedPosition: null,\n        draggingPosition: null,\n        validMoves: [],\n        moveCount: 0,\n        moveHistory: [],\n        boardHistory: [initialBoard],\n        currentMoveIndex: -1,\n        isViewingHistory: false,\n        winner: null,\n        drawState: createDrawState(),\n        drawReason: null,\n        showWinnerDialog: false,\n        showContinueDialog: false,\n        showKeyboardHelp: false,\n        showTimeControlDialog: false,\n        showDrawDialog: false,\n        drawRequestedBy: null,\n        timeControl: null,\n        audioWarningsEnabled: true,\n        gameMode: \"local\",\n        aiDifficulty: \"medium\",\n        players: createLocalGamePlayers(),\n        isAIThinking: false,\n        isReviewMode: false,\n        gameAnalysis: null,\n        isAnalyzing: false,\n        analyzeProgress: 0,\n        gameStartTime: new Date(),\n      };\n    }\n  }, [gameId, initialConfig]);\n\n  const [state, baseDispatch] = useReducer(gameReducer, initialState);\n  const { settings } = useSettings();\n\n  const { playMove, playCapture, playKing, playComplete, playStartGame } =\n    useGameSounds({\n      enabled: settings.soundEffectsEnabled,\n      volume: settings.sfxVolume / 100,\n    });\n\n  const dispatch = useCallback(\n    (action: GameAction) => {\n      if (action.type === \"APPLY_MOVE\") {\n        const { move, newBoard } = action.payload;\n        const pieceBeforeMove = state.board[move.from.row]?.[move.from.col];\n        const pieceAfterMove = newBoard[move.to.row]?.[move.to.col];\n        const becameKing =\n          pieceBeforeMove &&\n          pieceBeforeMove.type === \"regular\" &&\n          pieceAfterMove?.type === \"king\";\n\n        if (becameKing) {\n          playKing();\n        } else if (move.captures && move.captures.length > 0) {\n          playCapture();\n        } else {\n          playMove();\n        }\n      }\n\n      // Start game SFX on reset, controlled by settings-context in useGameSounds\n      if (action.type === \"RESET\") {\n        playStartGame();\n      }\n\n      // Winner/complete SFX triggers\n      if (action.type === \"APPLY_MOVE\" && action.payload.winner) {\n        playComplete();\n      } else if (action.type === \"SET_WINNER\" && action.payload) {\n        playComplete();\n      } else if (action.type === \"RESIGN\") {\n        // Reducer sets winner accordingly; play on resign as well\n        playComplete();\n      } else if (action.type === \"ACCEPT_DRAW\") {\n        playComplete();\n      }\n\n      baseDispatch(action);\n    },\n    [\n      baseDispatch,\n      state.board,\n      playMove,\n      playCapture,\n      playKing,\n      playComplete,\n      playStartGame,\n    ],\n  );\n\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n}\n\nexport function useGame() {\n  const ctx = useContext(GameContext);\n  if (!ctx) throw new Error(\"useGame must be used within GameProvider\");\n  return ctx;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/state/game-reducer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/state/game-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/time-control-types.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'PieceColor' is an 'error' type that acts as 'any' and overrides all other types in this union type.","line":29,"column":17,"nodeType":"TSTypeReference","messageId":"errorTypeOverrides","endLine":29,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { PieceColor } from \"./game-logic\";\n\n// Re-export PieceColor for convenience\nexport type { PieceColor } from \"./game-logic\";\n\n/**\n * Time control configuration for a game\n */\nexport interface TimeControl {\n  /** Display format preference */\n  format: \"X|Y\" | \"X+Y\";\n  /** Starting time in minutes */\n  initialMinutes: number;\n  /** Seconds added per move (increment) */\n  incrementSeconds: number;\n  /** Preset type or custom */\n  preset?: \"bullet\" | \"blitz\" | \"rapid\" | \"classical\" | \"custom\";\n}\n\n/**\n * Current time state for both players\n */\nexport interface TimeState {\n  /** Red player's remaining time in milliseconds */\n  redTime: number;\n  /** Black player's remaining time in milliseconds */\n  blackTime: number;\n  /** Which player's clock is currently running */\n  activePlayer: PieceColor | null;\n  /** Whether the timers are paused */\n  isPaused: boolean;\n  /** Timestamp when time was last updated (for sync) */\n  lastUpdateTime: number;\n  /** Timestamp when current player's turn started */\n  turnStartTime: number | null;\n}\n\n/**\n * Move with timing information\n */\nexport interface TimedMove {\n  /** Standard move information */\n  from: { row: number; col: number };\n  to: { row: number; col: number };\n  captures?: { row: number; col: number }[];\n  /** Time spent thinking on this move (milliseconds) */\n  timeSpent: number;\n  /** Time remaining after making this move (milliseconds) */\n  timeRemaining: number;\n}\n\n/**\n * Time control presets\n */\nexport const TIME_CONTROL_PRESETS: Record<string, TimeControl> = {\n  bullet: {\n    format: \"X|Y\",\n    initialMinutes: 1,\n    incrementSeconds: 0,\n    preset: \"bullet\",\n  },\n  blitz: {\n    format: \"X|Y\",\n    initialMinutes: 5,\n    incrementSeconds: 0,\n    preset: \"blitz\",\n  },\n  rapid: {\n    format: \"X|Y\",\n    initialMinutes: 10,\n    incrementSeconds: 5,\n    preset: \"rapid\",\n  },\n  classical: {\n    format: \"X|Y\",\n    initialMinutes: 30,\n    incrementSeconds: 0,\n    preset: \"classical\",\n  },\n} as const;\n\n/**\n * Time warning levels\n */\nexport interface TimeWarning {\n  /** Warning level */\n  level: \"low\" | \"critical\" | \"urgent\";\n  /** Threshold in milliseconds */\n  threshold: number;\n  /** Visual indicator */\n  color: string;\n  /** Audio warning enabled */\n  playSound: boolean;\n}\n\n/**\n * Default warning thresholds\n */\nexport const DEFAULT_TIME_WARNINGS: TimeWarning[] = [\n  {\n    level: \"low\",\n    threshold: 30000, // 30 seconds\n    color: \"orange\",\n    playSound: false,\n  },\n  {\n    level: \"critical\",\n    threshold: 10000, // 10 seconds\n    color: \"red\",\n    playSound: true,\n  },\n  {\n    level: \"urgent\",\n    threshold: 5000, // 5 seconds\n    color: \"red\",\n    playSound: true,\n  },\n];\n\n/**\n * Time control settings with preferences\n */\nexport interface TimeControlSettings {\n  /** Current time control configuration */\n  timeControl: TimeControl | null;\n  /** Audio warnings enabled */\n  audioWarnings: boolean;\n  /** Custom warning thresholds */\n  warnings: TimeWarning[];\n  /** Auto-pause on tab blur */\n  autoPause: boolean;\n}\n\n/**\n * Helper function to format time in MM:SS or SS.T format\n */\nexport function formatTime(milliseconds: number, showTenths = false): string {\n  const totalSeconds = Math.max(0, Math.ceil(milliseconds / 1000));\n\n  if (totalSeconds < 60 && showTenths) {\n    const tenths = Math.floor((milliseconds % 1000) / 100);\n    return `${totalSeconds}.${tenths}`;\n  }\n\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n}\n\n/**\n * Parse time control string in X|Y or X+Y format\n */\nexport function parseTimeControl(input: string): TimeControl | null {\n  const trimmed = input.trim();\n\n  // Match X|Y format\n  const pipeMatch = /^(\\d+(?:\\.\\d+)?)\\|(\\d+)$/.exec(trimmed);\n  if (pipeMatch) {\n    return {\n      format: \"X|Y\",\n      initialMinutes: parseFloat(pipeMatch[1]!),\n      incrementSeconds: parseInt(pipeMatch[2]!, 10),\n      preset: \"custom\",\n    };\n  }\n\n  // Match X+Y format\n  const plusMatch = /^(\\d+(?:\\.\\d+)?)\\+(\\d+)$/.exec(trimmed);\n  if (plusMatch) {\n    return {\n      format: \"X+Y\",\n      initialMinutes: parseFloat(plusMatch[1]!),\n      incrementSeconds: parseInt(plusMatch[2]!, 10),\n      preset: \"custom\",\n    };\n  }\n\n  return null;\n}\n\n/**\n * Validate time control configuration\n */\nexport function validateTimeControl(timeControl: TimeControl): string | null {\n  if (timeControl.initialMinutes < 0.5) {\n    return \"Initial time must be at least 0.5 minutes\";\n  }\n\n  if (timeControl.initialMinutes > 180) {\n    return \"Initial time cannot exceed 180 minutes\";\n  }\n\n  if (timeControl.incrementSeconds < 0) {\n    return \"Increment cannot be negative\";\n  }\n\n  if (timeControl.incrementSeconds > 60) {\n    return \"Increment cannot exceed 60 seconds\";\n  }\n\n  return null;\n}\n\n/**\n * Create initial time state from time control\n */\nexport function createInitialTimeState(timeControl: TimeControl): TimeState {\n  const initialTime = Math.floor(timeControl.initialMinutes * 60 * 1000);\n\n  return {\n    redTime: initialTime,\n    blackTime: initialTime,\n    activePlayer: null,\n    isPaused: false,\n    lastUpdateTime: Date.now(),\n    turnStartTime: null,\n  };\n}\n\n/**\n * Check if time has expired for a player\n */\nexport function isTimeExpired(\n  timeState: TimeState,\n  player: PieceColor,\n): boolean {\n  const playerTime = player === \"red\" ? timeState.redTime : timeState.blackTime;\n  // Don't consider time expired if it's -1 (uninitialized)\n  return playerTime === 0 || (playerTime > 0 && playerTime < 1);\n}\n\n/**\n * Get current time warning level for a player\n */\nexport function getTimeWarningLevel(\n  timeState: TimeState,\n  player: PieceColor,\n  warnings: TimeWarning[] = DEFAULT_TIME_WARNINGS,\n): TimeWarning | null {\n  const playerTime = player === \"red\" ? timeState.redTime : timeState.blackTime;\n\n  // Find the most severe warning that applies\n  for (const warning of warnings.sort((a, b) => a.threshold - b.threshold)) {\n    if (playerTime <= warning.threshold) {\n      return warning;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Convert time control to display string\n */\nexport function timeControlToString(timeControl: TimeControl): string {\n  const { format, initialMinutes, incrementSeconds } = timeControl;\n  const separator = format === \"X|Y\" ? \"|\" : \"+\";\n  return `${initialMinutes}${separator}${incrementSeconds}`;\n}\n\n/**\n * Get time control preset by key\n */\nexport function getTimeControlPreset(key: string): TimeControl | null {\n  return TIME_CONTROL_PRESETS[key] ?? null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/game/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/motion/dynamic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1336,1339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1336,1339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1472,1475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1472,1475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dynamic from \"next/dynamic\";\nimport type { ComponentType } from \"react\";\n\n/**\n * Utility functions for dynamically importing Framer Motion components\n * These help reduce initial bundle size by loading animation features on-demand\n */\n\n// AnimatePresence - needed for exit animations\nexport const DynamicAnimatePresence = dynamic(\n  () =>\n    import(\"framer-motion\").then((mod) => ({\n      default: mod.AnimatePresence,\n    })),\n  {\n    ssr: false,\n    loading: () => null,\n  },\n);\n\n// LayoutGroup - needed for shared layout animations\nexport const DynamicLayoutGroup = dynamic(\n  () =>\n    import(\"framer-motion\").then((mod) => ({\n      default: mod.LayoutGroup,\n    })),\n  {\n    ssr: false,\n    loading: () => null,\n  },\n);\n\n// Reorder components for drag-to-reorder functionality\nexport const DynamicReorder = {\n  Group: dynamic(\n    () =>\n      import(\"framer-motion\").then((mod) => ({\n        default: mod.Reorder.Group,\n      })),\n    { ssr: false },\n  ),\n  Item: dynamic(\n    () =>\n      import(\"framer-motion\").then((mod) => ({\n        default: mod.Reorder.Item,\n      })),\n    { ssr: false },\n  ),\n};\n\n/**\n * Helper to create a dynamic motion component\n * Usage: const MotionDiv = createDynamicMotion('div');\n */\nexport function createDynamicMotion<T extends keyof JSX.IntrinsicElements>(\n  element: T,\n): ComponentType<any> {\n  return dynamic(\n    () =>\n      import(\"framer-motion\").then((mod) => ({\n        default: mod.motion[element] as ComponentType<any>,\n      })),\n    {\n      ssr: false,\n      loading: () => null,\n    },\n  );\n}\n\n/**\n * Pre-defined dynamic motion components for common HTML elements\n * These are loaded on-demand when used\n */\nexport const DynamicMotion = {\n  div: createDynamicMotion(\"div\"),\n  span: createDynamicMotion(\"span\"),\n  button: createDynamicMotion(\"button\"),\n  a: createDynamicMotion(\"a\"),\n  section: createDynamicMotion(\"section\"),\n  article: createDynamicMotion(\"article\"),\n  header: createDynamicMotion(\"header\"),\n  footer: createDynamicMotion(\"footer\"),\n  nav: createDynamicMotion(\"nav\"),\n  aside: createDynamicMotion(\"aside\"),\n  main: createDynamicMotion(\"main\"),\n  ul: createDynamicMotion(\"ul\"),\n  li: createDynamicMotion(\"li\"),\n  img: createDynamicMotion(\"img\"),\n  svg: createDynamicMotion(\"svg\"),\n};\n\n/**\n * Helper to lazy load heavy animation features\n * Use this when you need complex animations that aren't needed initially\n */\nexport async function loadAnimationFeatures() {\n  const {\n    AnimatePresence,\n    motion,\n    useAnimation,\n    useInView,\n    useScroll,\n    useTransform,\n    useSpring,\n    useMotionValue,\n  } = await import(\"framer-motion\");\n\n  return {\n    AnimatePresence,\n    motion,\n    useAnimation,\n    useInView,\n    useScroll,\n    useTransform,\n    useSpring,\n    useMotionValue,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/motion/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/motion/provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/motion/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/multi-tab/polling-fallback.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Error`.","line":44,"column":24,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":44,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":126,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":126,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":144,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":144,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5390,5393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5390,5393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { GameId, TabId, SyncEvent, InitialStatePayload } from \"./types\";\n\nexport interface PollingFallbackOptions {\n  gameId: GameId;\n  tabId: TabId;\n  pollInterval: number; // milliseconds\n  onSyncEvent: (event: SyncEvent) => void;\n  onError: (error: Error) => void;\n}\n\nexport class PollingFallback {\n  private gameId: GameId;\n  private tabId: TabId;\n  private pollInterval: number;\n  private onSyncEvent: (event: SyncEvent) => void;\n  private onError: (error: Error) => void;\n\n  private intervalId: NodeJS.Timeout | null = null;\n  private lastGameVersion = 0;\n  private lastPollTime = 0;\n  private isPolling = false;\n\n  constructor(options: PollingFallbackOptions) {\n    this.gameId = options.gameId;\n    this.tabId = options.tabId;\n    this.pollInterval = options.pollInterval;\n    this.onSyncEvent = options.onSyncEvent;\n    this.onError = options.onError;\n  }\n\n  async start(): Promise<void> {\n    if (this.isPolling) return;\n\n    this.isPolling = true;\n\n    try {\n      // Get initial game state\n      await this.pollGameState(true);\n\n      // Start polling interval\n      this.intervalId = setInterval(() => {\n        this.pollGameState().catch((error) => {\n          console.error(\"Polling error:\", error);\n          this.onError(error);\n        });\n      }, this.pollInterval);\n\n      console.log(\n        `Started polling fallback for game ${this.gameId} every ${this.pollInterval}ms`,\n      );\n    } catch (error) {\n      this.isPolling = false;\n      throw error;\n    }\n  }\n\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.isPolling = false;\n    console.log(`Stopped polling fallback for game ${this.gameId}`);\n  }\n\n  private async pollGameState(isInitial = false): Promise<void> {\n    try {\n      // This would need to be adapted to work with the actual API\n      // For now, we'll create a mock implementation\n      const gameState = await this.fetchGameState();\n\n      if (!gameState) {\n        throw new Error(\"Game not found\");\n      }\n\n      // Check if game has been updated since last poll\n      if (isInitial || gameState.version > this.lastGameVersion) {\n        this.lastGameVersion = gameState.version;\n\n        // Send initial state or update event\n        const eventType = isInitial ? \"INITIAL_STATE\" : \"MOVE_APPLIED\";\n\n        const event: SyncEvent = {\n          type: eventType,\n          payload: gameState,\n          timestamp: new Date().toISOString(),\n          gameId: this.gameId,\n          tabId: this.tabId,\n        };\n\n        this.onSyncEvent(event);\n      }\n\n      // Also poll for tab status updates (simplified)\n      const tabStatus = await this.fetchTabStatus();\n      if (tabStatus) {\n        const tabEvent: SyncEvent = {\n          type: \"TAB_STATUS_UPDATE\",\n          payload: tabStatus,\n          timestamp: new Date().toISOString(),\n          gameId: this.gameId,\n          tabId: this.tabId,\n        };\n\n        this.onSyncEvent(tabEvent);\n      }\n\n      this.lastPollTime = Date.now();\n    } catch (error) {\n      console.error(\"Failed to poll game state:\", error);\n      throw error;\n    }\n  }\n\n  private async fetchGameState(): Promise<InitialStatePayload | null> {\n    // This is a simplified version - in reality, you'd use tRPC here\n    // For the actual implementation, you'd need to modify this to use the tRPC client\n    try {\n      // Mock API call - replace with actual tRPC call\n      const response = await fetch(`/api/game/${this.gameId}/state`);\n      if (!response.ok) {\n        if (response.status === 404) return null;\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to fetch game state:\", error);\n      return null;\n    }\n  }\n\n  private async fetchTabStatus(): Promise<{\n    activeTabId: TabId | null;\n    totalTabs: number;\n  } | null> {\n    try {\n      // Mock API call - replace with actual tRPC call\n      const response = await fetch(\n        `/api/game/${this.gameId}/tab-status?tabId=${this.tabId}`,\n      );\n      if (!response.ok) return null;\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Failed to fetch tab status:\", error);\n      return null;\n    }\n  }\n\n  // Utility method to check if browser supports SSE\n  static isSSESupported(): boolean {\n    return (\n      typeof EventSource !== \"undefined\" &&\n      EventSource.prototype.constructor === EventSource\n    );\n  }\n\n  // Get recommended poll interval based on browser and connection\n  static getRecommendedPollInterval(): number {\n    // More frequent polling for better browsers\n    if (PollingFallback.isSSESupported()) {\n      return 5000; // 5 seconds for modern browsers as fallback\n    }\n\n    // Less frequent for older browsers to reduce load\n    return 10000; // 10 seconds for older browsers\n  }\n\n  // Public getters\n  get isActive(): boolean {\n    return this.isPolling;\n  }\n\n  get lastUpdate(): Date | null {\n    return this.lastPollTime > 0 ? new Date(this.lastPollTime) : null;\n  }\n\n  get gameVersion(): number {\n    return this.lastGameVersion;\n  }\n}\n\n// Utility function to create appropriate sync mechanism\nexport function createSyncMechanism(\n  gameId: GameId,\n  tabId: TabId,\n  onSyncEvent: (event: SyncEvent) => void,\n  onError: (error: Error) => void,\n): { type: \"sse\" | \"polling\"; mechanism: any } {\n  if (PollingFallback.isSSESupported()) {\n    // Use SSE (handled by MultiTabSyncManager)\n    return {\n      type: \"sse\",\n      mechanism: null, // SSE handling is in MultiTabSyncManager\n    };\n  } else {\n    // Use polling fallback\n    const polling = new PollingFallback({\n      gameId,\n      tabId,\n      pollInterval: PollingFallback.getRecommendedPollInterval(),\n      onSyncEvent,\n      onError,\n    });\n\n    return {\n      type: \"polling\",\n      mechanism: polling,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/multi-tab/session-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/multi-tab/sync-manager.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":6,"column":1,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":14,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":106,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3054,3057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3054,3057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notifyEventListeners on an `any` value.","line":106,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3306,3309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3306,3309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notifyEventListeners on an `any` value.","line":113,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":131,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3933,3936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3933,3936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notifyEventListeners on an `any` value.","line":131,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":48},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":141,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":141,"endColumn":39},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":164,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":164,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":177,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":177,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5282,5285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5282,5285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notifyEventListeners on an `any` value.","line":177,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5757,5760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5757,5760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eventSource on an `any` value.","line":196,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5815,5818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5815,5818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .heartbeatInterval on an `any` value.","line":197,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":45},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":197,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":197,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5891,5894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5891,5894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reconnectTimeout on an `any` value.","line":198,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":44},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":198,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":198,"endColumn":66}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from \"vitest\";\nimport { MultiTabSyncManager } from \"./sync-manager\";\nimport type { SyncEvent } from \"./types\";\n\n// Mock EventSource\nglobal.EventSource = vi.fn(() => ({\n  addEventListener: vi.fn(),\n  removeEventListener: vi.fn(),\n  close: vi.fn(),\n  readyState: EventSource.OPEN,\n  onopen: null,\n  onmessage: null,\n  onerror: null,\n})) as any;\n\n// Mock fetch\nglobal.fetch = vi.fn();\n\ndescribe(\"MultiTabSyncManager\", () => {\n  let syncManager: MultiTabSyncManager;\n  const testGameId = \"test-game-123\";\n\n  beforeEach(() => {\n    syncManager = new MultiTabSyncManager(testGameId);\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    if (syncManager) {\n      syncManager.disconnect();\n    }\n  });\n\n  describe(\"constructor\", () => {\n    it(\"should create a sync manager with a unique tab ID\", () => {\n      expect(syncManager.getTabId).toMatch(/^tab_\\d+_/);\n      expect(syncManager.isConnected).toBe(false);\n      expect(syncManager.isActiveTab).toBe(false);\n    });\n\n    it(\"should generate unique tab IDs for different instances\", () => {\n      const manager1 = new MultiTabSyncManager(testGameId);\n      const manager2 = new MultiTabSyncManager(testGameId);\n\n      expect(manager1.getTabId).not.toBe(manager2.getTabId);\n\n      manager1.disconnect();\n      manager2.disconnect();\n    });\n  });\n\n  describe(\"state management\", () => {\n    it(\"should track connection state\", () => {\n      const state = syncManager.getState;\n\n      expect(state.isConnected).toBe(false);\n      expect(state.isActiveTab).toBe(false);\n      expect(state.totalTabs).toBe(1);\n      expect(state.connectionAttempts).toBe(0);\n      expect(state.optimisticUpdates).toHaveLength(0);\n    });\n\n    it(\"should track optimistic updates\", () => {\n      const testMove = {\n        from: { row: 2, col: 1 },\n        to: { row: 3, col: 2 },\n      };\n\n      const update = syncManager.addOptimisticUpdate(testMove);\n\n      expect(update.id).toMatch(/^opt_\\d+_/);\n      expect(update.move).toEqual(testMove);\n      expect(update.applied).toBe(false);\n      expect(syncManager.getState.optimisticUpdates).toHaveLength(1);\n    });\n\n    it(\"should remove optimistic updates\", () => {\n      const testMove = {\n        from: { row: 2, col: 1 },\n        to: { row: 3, col: 2 },\n      };\n\n      const update = syncManager.addOptimisticUpdate(testMove);\n      expect(syncManager.getState.optimisticUpdates).toHaveLength(1);\n\n      syncManager.removeOptimisticUpdate(update.id);\n      expect(syncManager.getState.optimisticUpdates).toHaveLength(0);\n    });\n  });\n\n  describe(\"event listeners\", () => {\n    it(\"should add and remove event listeners\", () => {\n      const mockListener = vi.fn();\n\n      syncManager.addEventListener(\"MOVE_APPLIED\", mockListener);\n\n      // Simulate an event\n      const testEvent: SyncEvent = {\n        type: \"MOVE_APPLIED\",\n        payload: { test: \"data\" },\n        timestamp: new Date().toISOString(),\n        gameId: testGameId,\n      };\n\n      // Access private method for testing\n      (syncManager as any).notifyEventListeners(\"MOVE_APPLIED\", testEvent);\n\n      expect(mockListener).toHaveBeenCalledWith(testEvent);\n\n      syncManager.removeEventListener(\"MOVE_APPLIED\", mockListener);\n\n      // Should not be called after removal\n      (syncManager as any).notifyEventListeners(\"MOVE_APPLIED\", testEvent);\n      expect(mockListener).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should handle multiple listeners for the same event\", () => {\n      const listener1 = vi.fn();\n      const listener2 = vi.fn();\n\n      syncManager.addEventListener(\"TAB_STATUS_UPDATE\", listener1);\n      syncManager.addEventListener(\"TAB_STATUS_UPDATE\", listener2);\n\n      const testEvent: SyncEvent = {\n        type: \"TAB_STATUS_UPDATE\",\n        payload: { activeTabId: \"test-tab\", totalTabs: 2 },\n        timestamp: new Date().toISOString(),\n        gameId: testGameId,\n      };\n\n      (syncManager as any).notifyEventListeners(\"TAB_STATUS_UPDATE\", testEvent);\n\n      expect(listener1).toHaveBeenCalledWith(testEvent);\n      expect(listener2).toHaveBeenCalledWith(testEvent);\n    });\n  });\n\n  describe(\"connection handling\", () => {\n    it(\"should handle tab visibility changes\", () => {\n      // Test that visibility change handler is set up\n      expect(document.addEventListener).toHaveBeenCalledWith(\n        \"visibilitychange\",\n        expect.any(Function),\n      );\n    });\n\n    it(\"should handle beforeunload events\", () => {\n      // Test that beforeunload handler is set up\n      expect(window.addEventListener).toHaveBeenCalledWith(\n        \"beforeunload\",\n        expect.any(Function),\n      );\n    });\n  });\n\n  describe(\"error handling\", () => {\n    it(\"should handle event listener errors gracefully\", () => {\n      const faultyListener = vi.fn(() => {\n        throw new Error(\"Listener error\");\n      });\n\n      const consoleErrorSpy = vi\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n\n      syncManager.addEventListener(\"MOVE_APPLIED\", faultyListener);\n\n      const testEvent: SyncEvent = {\n        type: \"MOVE_APPLIED\",\n        payload: { test: \"data\" },\n        timestamp: new Date().toISOString(),\n        gameId: testGameId,\n      };\n\n      // Should not throw\n      expect(() => {\n        (syncManager as any).notifyEventListeners(\"MOVE_APPLIED\", testEvent);\n      }).not.toThrow();\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        \"Error in sync event listener:\",\n        expect.any(Error),\n      );\n\n      consoleErrorSpy.mockRestore();\n    });\n  });\n\n  describe(\"cleanup\", () => {\n    it(\"should clean up resources on disconnect\", () => {\n      const mockEventSource = {\n        close: vi.fn(),\n        readyState: EventSource.OPEN,\n      };\n\n      (syncManager as any).eventSource = mockEventSource;\n      (syncManager as any).heartbeatInterval = setInterval(() => {}, 1000);\n      (syncManager as any).reconnectTimeout = setTimeout(() => {}, 1000);\n\n      syncManager.disconnect();\n\n      expect(mockEventSource.close).toHaveBeenCalled();\n      expect(syncManager.isConnected).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/multi-tab/sync-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":63,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":63,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2001,2001],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2001,2001],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2242,2242],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2242,2242],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":96,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":96,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2880,2880],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2880,2880],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":128,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":128,"endColumn":40,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3728,3728],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3728,3728],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":133,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":133,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":133,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":133,"endColumn":61},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'payload' is defined but never used. Allowed unused args must match /^_/u.","line":190,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":37},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":218,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":218,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6567,6567],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6567,6567],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":248,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":248,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7400,7400],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7400,7400],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":337,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":337,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .result on an `any` value.","line":339,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":339,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .result on an `any` value.","line":343,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .result on an `any` value.","line":345,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":345,"endColumn":27},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":464,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":464,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12950,12950],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[12950,12950],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type {\n  TabId,\n  GameId,\n  MultiTabState,\n  SyncEvent,\n  OptimisticUpdate,\n  ConnectionStatus,\n  InitialStatePayload,\n  MoveAppliedPayload,\n  TabStatusUpdatePayload,\n} from \"./types\";\nimport type { Move } from \"~/lib/game/logic\";\n\nexport class MultiTabSyncManager {\n  private gameId: GameId;\n  private tabId: TabId;\n  private eventSource: EventSource | null = null;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private state: MultiTabState;\n  private listeners = new Map<string, Set<(event: SyncEvent) => void>>();\n  private offlineMoveQueue: Move[] = [];\n  private lastSuccessfulConnection: Date | null = null;\n  private connectionCheckInterval: NodeJS.Timeout | null = null;\n  private isManuallyDisconnected = false;\n\n  // Configuration\n  private readonly HEARTBEAT_INTERVAL = 30000; // 30 seconds\n  private readonly RECONNECT_DELAY = 1000; // Start with 1 second\n  private readonly MAX_RECONNECT_ATTEMPTS = 10; // Increased for better resilience\n  private readonly CONNECTION_CHECK_INTERVAL = 5000; // Check connection every 5 seconds\n\n  constructor(gameId: GameId) {\n    this.gameId = gameId;\n    this.tabId = this.generateTabId();\n    this.state = {\n      tabId: this.tabId,\n      isConnected: false,\n      isActiveTab: false,\n      totalTabs: 1,\n      connectionAttempts: 0,\n      lastHeartbeat: null,\n      optimisticUpdates: [],\n    };\n\n    this.setupTabVisibilityHandling();\n    this.setupBeforeUnloadHandling();\n    this.setupOnlineStatusHandling();\n    this.startConnectionMonitoring();\n  }\n\n  private generateTabId(): TabId {\n    return `tab_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n  }\n\n  private setupTabVisibilityHandling(): void {\n    document.addEventListener(\"visibilitychange\", () => {\n      if (!document.hidden && !this.isManuallyDisconnected) {\n        if (\n          this.eventSource?.readyState === EventSource.CLOSED ||\n          !this.state.isConnected\n        ) {\n          this.reconnect();\n        }\n      }\n    });\n  }\n\n  private setupOnlineStatusHandling(): void {\n    window.addEventListener(\"online\", () => {\n      console.log(\"Network connection restored\");\n      if (!this.isManuallyDisconnected) {\n        this.reconnect();\n      }\n    });\n\n    window.addEventListener(\"offline\", () => {\n      console.log(\"Network connection lost\");\n      this.notifyConnectionStatusListeners();\n    });\n  }\n\n  private startConnectionMonitoring(): void {\n    if (this.connectionCheckInterval) {\n      clearInterval(this.connectionCheckInterval);\n    }\n\n    this.connectionCheckInterval = setInterval(() => {\n      if (\n        this.eventSource &&\n        this.eventSource.readyState === EventSource.CLOSED &&\n        !this.isManuallyDisconnected &&\n        navigator.onLine\n      ) {\n        console.log(\"Connection lost, attempting to reconnect...\");\n        this.reconnect();\n      }\n    }, this.CONNECTION_CHECK_INTERVAL);\n  }\n\n  private setupBeforeUnloadHandling(): void {\n    window.addEventListener(\"beforeunload\", () => {\n      this.disconnect();\n    });\n  }\n\n  async connect(): Promise<void> {\n    if (this.eventSource?.readyState === EventSource.OPEN) {\n      return;\n    }\n\n    this.isManuallyDisconnected = false;\n\n    try {\n      this.eventSource = new EventSource(\n        `/api/game/${this.gameId}/stream?tabId=${this.tabId}`,\n      );\n\n      this.eventSource.onopen = () => {\n        console.log(\"SSE connection established\");\n        this.state.isConnected = true;\n        this.state.connectionAttempts = 0;\n        this.lastSuccessfulConnection = new Date();\n        this.startHeartbeat();\n        this.notifyConnectionStatusListeners();\n\n        // Process any queued offline moves\n        this.processOfflineMoveQueue();\n      };\n\n      this.eventSource.onmessage = (event) => {\n        try {\n          const syncEvent: SyncEvent = JSON.parse(event.data);\n          this.handleSyncEvent(syncEvent);\n        } catch (error) {\n          console.error(\"Failed to parse SSE message:\", error);\n        }\n      };\n\n      this.eventSource.onerror = (error) => {\n        console.error(\"SSE connection error:\", error);\n        this.state.isConnected = false;\n        this.notifyConnectionStatusListeners();\n\n        if (\n          !this.isManuallyDisconnected &&\n          this.state.connectionAttempts < this.MAX_RECONNECT_ATTEMPTS &&\n          navigator.onLine\n        ) {\n          this.scheduleReconnect();\n        } else if (!navigator.onLine) {\n          console.log(\"Offline - will retry when connection is restored\");\n        }\n      };\n\n      // Register tab with server via tRPC\n      await this.registerTab();\n    } catch (error) {\n      console.error(\"Failed to establish SSE connection:\", error);\n      throw error;\n    }\n  }\n\n  private async registerTab(): Promise<void> {\n    // This would be implemented with tRPC call\n    // For now, we'll implement this when we enhance the game router\n  }\n\n  private handleSyncEvent(event: SyncEvent): void {\n    switch (event.type) {\n      case \"INITIAL_STATE\":\n        this.handleInitialState(event.payload as InitialStatePayload);\n        break;\n      case \"MOVE_APPLIED\":\n        this.handleMoveApplied(event.payload as MoveAppliedPayload);\n        break;\n      case \"TAB_STATUS_UPDATE\":\n        this.handleTabStatusUpdate(event.payload as TabStatusUpdatePayload);\n        break;\n      case \"ACTIVE_TAB_CHANGED\":\n        this.handleActiveTabChanged(event.payload as { activeTabId: TabId });\n        break;\n      default:\n        console.warn(\"Unknown sync event type:\", event.type);\n    }\n\n    this.notifyEventListeners(event.type, event);\n  }\n\n  private handleInitialState(payload: InitialStatePayload): void {\n    // Initial state will be handled by GameController\n  }\n\n  private handleMoveApplied(payload: MoveAppliedPayload): void {\n    // Remove any matching optimistic update\n    if (payload.optimisticMoveId) {\n      this.state.optimisticUpdates = this.state.optimisticUpdates.filter(\n        (update) => update.id !== payload.optimisticMoveId,\n      );\n    }\n  }\n\n  private handleTabStatusUpdate(payload: TabStatusUpdatePayload): void {\n    this.state.isActiveTab = payload.activeTabId === this.tabId;\n    this.state.totalTabs = payload.totalTabs;\n  }\n\n  private handleActiveTabChanged(payload: { activeTabId: TabId }): void {\n    this.state.isActiveTab = payload.activeTabId === this.tabId;\n  }\n\n  private startHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n\n    this.heartbeatInterval = setInterval(() => {\n      this.sendHeartbeat();\n    }, this.HEARTBEAT_INTERVAL);\n  }\n\n  private async sendHeartbeat(): Promise<void> {\n    try {\n      // This would be implemented with tRPC call\n      this.state.lastHeartbeat = new Date();\n    } catch (error) {\n      console.error(\"Failed to send heartbeat:\", error);\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n\n    const delay = Math.min(\n      this.RECONNECT_DELAY * Math.pow(1.5, this.state.connectionAttempts),\n      30000, // Max 30 seconds\n    );\n    this.state.connectionAttempts++;\n\n    console.log(\n      `Scheduling reconnect in ${delay}ms (attempt ${this.state.connectionAttempts})`,\n    );\n\n    this.reconnectTimeout = setTimeout(() => {\n      if (navigator.onLine && !this.isManuallyDisconnected) {\n        this.reconnect();\n      }\n    }, delay);\n  }\n\n  private async reconnect(): Promise<void> {\n    if (this.isManuallyDisconnected) {\n      return;\n    }\n\n    console.log(\"Attempting to reconnect...\");\n\n    // Clean up existing connection but preserve the queue\n    const preservedQueue = [...this.offlineMoveQueue];\n    this.cleanupConnection();\n    this.offlineMoveQueue = preservedQueue;\n\n    try {\n      await this.connect();\n    } catch (error) {\n      console.error(\"Reconnection failed:\", error);\n    }\n  }\n\n  private cleanupConnection(): void {\n    if (this.eventSource) {\n      this.eventSource.close();\n      this.eventSource = null;\n    }\n\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n  }\n\n  disconnect(): void {\n    this.isManuallyDisconnected = true;\n    this.cleanupConnection();\n\n    if (this.connectionCheckInterval) {\n      clearInterval(this.connectionCheckInterval);\n      this.connectionCheckInterval = null;\n    }\n\n    this.state.isConnected = false;\n    this.notifyConnectionStatusListeners();\n  }\n\n  // Offline move queue management\n  queueOfflineMove(move: Move): void {\n    this.offlineMoveQueue.push(move);\n    console.log(\n      `Move queued for when connection is restored (${this.offlineMoveQueue.length} moves in queue)`,\n    );\n  }\n\n  private async processOfflineMoveQueue(): Promise<void> {\n    if (this.offlineMoveQueue.length === 0) return;\n\n    console.log(`Processing ${this.offlineMoveQueue.length} offline moves`);\n    const moves = [...this.offlineMoveQueue];\n    this.offlineMoveQueue = [];\n\n    try {\n      // Send all queued moves to server for syncing\n      const response = await fetch(\"/api/trpc/game.syncOfflineMoves\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: {\n            gameId: this.gameId,\n            moves: moves,\n            tabId: this.tabId,\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to sync offline moves\");\n      }\n\n      const result = await response.json();\n      console.log(\n        `Synced ${result.result.data.json.syncedMoves} moves successfully`,\n      );\n\n      // Re-queue any failed moves\n      if (result.result.data.json.failedMoves > 0) {\n        console.warn(\n          `${result.result.data.json.failedMoves} moves failed to sync`,\n        );\n      }\n    } catch (error) {\n      console.error(\"Failed to process offline moves:\", error);\n      // Re-queue all moves on failure\n      this.offlineMoveQueue = moves;\n    }\n\n    // Update connection status to reflect queue state\n    this.notifyConnectionStatusListeners();\n  }\n\n  getOfflineMoveCount(): number {\n    return this.offlineMoveQueue.length;\n  }\n\n  // Optimistic updates\n  addOptimisticUpdate(move: Move): OptimisticUpdate {\n    const update: OptimisticUpdate = {\n      id: `opt_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n      move,\n      timestamp: new Date(),\n      applied: false,\n    };\n\n    this.state.optimisticUpdates.push(update);\n    return update;\n  }\n\n  removeOptimisticUpdate(id: string): void {\n    this.state.optimisticUpdates = this.state.optimisticUpdates.filter(\n      (update) => update.id !== id,\n    );\n  }\n\n  // Event listeners\n  addEventListener(\n    eventType: string,\n    listener: (event: SyncEvent) => void,\n  ): void {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set());\n    }\n    this.listeners.get(eventType)!.add(listener);\n  }\n\n  removeEventListener(\n    eventType: string,\n    listener: (event: SyncEvent) => void,\n  ): void {\n    const eventListeners = this.listeners.get(eventType);\n    if (eventListeners) {\n      eventListeners.delete(listener);\n    }\n  }\n\n  private notifyEventListeners(eventType: string, event: SyncEvent): void {\n    const eventListeners = this.listeners.get(eventType);\n    if (eventListeners) {\n      eventListeners.forEach((listener) => {\n        try {\n          listener(event);\n        } catch (error) {\n          console.error(\"Error in sync event listener:\", error);\n        }\n      });\n    }\n  }\n\n  private notifyConnectionStatusListeners(): void {\n    const connectionStatus: ConnectionStatus = {\n      connected: this.state.isConnected,\n      reconnecting:\n        this.state.connectionAttempts > 0 && !this.state.isConnected,\n      error: !navigator.onLine ? \"No internet connection\" : null,\n      lastConnected: this.lastSuccessfulConnection,\n      offlineMoveCount: this.offlineMoveQueue.length,\n    };\n\n    const event: SyncEvent<ConnectionStatus> = {\n      type: \"CONNECTION_STATUS\",\n      payload: connectionStatus,\n      timestamp: new Date().toISOString(),\n      gameId: this.gameId,\n      tabId: this.tabId,\n    };\n\n    this.notifyEventListeners(\"CONNECTION_STATUS\", event);\n  }\n\n  // Public getters\n  get isConnected(): boolean {\n    return this.state.isConnected;\n  }\n\n  get isActiveTab(): boolean {\n    return this.state.isActiveTab;\n  }\n\n  get totalTabs(): number {\n    return this.state.totalTabs;\n  }\n\n  get getTabId(): TabId {\n    return this.tabId;\n  }\n\n  get getState(): Readonly<MultiTabState> {\n    return { ...this.state };\n  }\n\n  get hasOfflineMoves(): boolean {\n    return this.offlineMoveQueue.length > 0;\n  }\n\n  forceReconnect(): void {\n    this.isManuallyDisconnected = false;\n    this.state.connectionAttempts = 0;\n    this.reconnect();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/multi-tab/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/optimistic-updates.test.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'update1' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":130,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'update2' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":135,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":192,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":192,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi } from \"vitest\";\nimport { OptimisticUpdateManager } from \"./optimistic-updates\";\nimport type { Move, Board } from \"~/lib/game/logic\";\nimport { createInitialBoard } from \"~/lib/game/logic\";\n\ndescribe(\"OptimisticUpdateManager\", () => {\n  let manager: OptimisticUpdateManager;\n  let testBoard: Board;\n  let testMove: Move;\n\n  beforeEach(() => {\n    manager = new OptimisticUpdateManager();\n    testBoard = createInitialBoard();\n    testMove = {\n      from: { row: 2, col: 1 },\n      to: { row: 3, col: 2 },\n    };\n  });\n\n  describe(\"createUpdate\", () => {\n    it(\"should create a new optimistic update\", () => {\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 0);\n\n      expect(update.id).toMatch(/^opt_\\d+_/);\n      expect(update.move).toEqual(testMove);\n      expect(update.applied).toBe(false);\n      expect(update.rollbackState).toBeDefined();\n      expect(update.rollbackState!.currentPlayer).toBe(\"red\");\n      expect(update.rollbackState!.moveCount).toBe(0);\n    });\n\n    it(\"should increment pending count when creating updates\", () => {\n      expect(manager.getState().pendingCount).toBe(0);\n\n      manager.createUpdate(testMove, testBoard, \"red\", 0);\n      expect(manager.getState().pendingCount).toBe(1);\n\n      manager.createUpdate(testMove, testBoard, \"red\", 1);\n      expect(manager.getState().pendingCount).toBe(2);\n    });\n\n    it(\"should preserve board state in rollback\", () => {\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 5);\n\n      expect(update.rollbackState!.board).toEqual(testBoard);\n      expect(update.rollbackState!.board).not.toBe(testBoard); // Should be a copy\n    });\n  });\n\n  describe(\"confirmUpdate\", () => {\n    it(\"should remove confirmed update\", () => {\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 0);\n      expect(manager.getState().updates.size).toBe(1);\n\n      manager.confirmUpdate(update.id);\n      expect(manager.getState().updates.size).toBe(0);\n      expect(manager.getState().pendingCount).toBe(0);\n    });\n\n    it(\"should handle confirming non-existent update\", () => {\n      expect(() => {\n        manager.confirmUpdate(\"non-existent-id\");\n      }).not.toThrow();\n    });\n  });\n\n  describe(\"rollbackUpdate\", () => {\n    it(\"should return rollback state and remove update\", () => {\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 5);\n\n      const rollbackState = manager.rollbackUpdate(update.id);\n\n      expect(rollbackState).toBeDefined();\n      expect(rollbackState!.board).toEqual(testBoard);\n      expect(rollbackState!.currentPlayer).toBe(\"red\");\n      expect(rollbackState!.moveCount).toBe(5);\n      expect(manager.getState().updates.size).toBe(0);\n    });\n\n    it(\"should return null for non-existent update\", () => {\n      const rollbackState = manager.rollbackUpdate(\"non-existent-id\");\n      expect(rollbackState).toBeNull();\n    });\n  });\n\n  describe(\"getPendingUpdates\", () => {\n    it(\"should return pending updates in chronological order\", () => {\n      const update1 = manager.createUpdate(testMove, testBoard, \"red\", 0);\n\n      // Wait a bit to ensure different timestamps\n      vi.useFakeTimers();\n      vi.advanceTimersByTime(100);\n\n      const update2 = manager.createUpdate(testMove, testBoard, \"black\", 1);\n\n      vi.useRealTimers();\n\n      const pendingUpdates = manager.getPendingUpdates();\n\n      expect(pendingUpdates).toHaveLength(2);\n      expect(pendingUpdates[0]!.id).toBe(update1.id);\n      expect(pendingUpdates[1]!.id).toBe(update2.id);\n    });\n\n    it(\"should not return applied updates\", () => {\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 0);\n      manager.applyUpdate(update.id, testBoard);\n\n      const pendingUpdates = manager.getPendingUpdates();\n      expect(pendingUpdates).toHaveLength(0);\n    });\n  });\n\n  describe(\"clearAllUpdates\", () => {\n    it(\"should remove all updates and reset count\", () => {\n      manager.createUpdate(testMove, testBoard, \"red\", 0);\n      manager.createUpdate(testMove, testBoard, \"black\", 1);\n\n      expect(manager.getState().pendingCount).toBe(2);\n\n      manager.clearAllUpdates();\n\n      expect(manager.getState().updates.size).toBe(0);\n      expect(manager.getState().pendingCount).toBe(0);\n    });\n  });\n\n  describe(\"rollbackAll\", () => {\n    it(\"should return earliest rollback state\", () => {\n      const update1 = manager.createUpdate(testMove, testBoard, \"red\", 5);\n\n      vi.useFakeTimers();\n      vi.advanceTimersByTime(100);\n\n      const update2 = manager.createUpdate(testMove, testBoard, \"black\", 6);\n\n      vi.useRealTimers();\n\n      const rollbackState = manager.rollbackAll();\n\n      expect(rollbackState).toBeDefined();\n      expect(rollbackState!.moveCount).toBe(5); // Earlier move count\n      expect(manager.getState().updates.size).toBe(0);\n    });\n\n    it(\"should return null if no updates exist\", () => {\n      const rollbackState = manager.rollbackAll();\n      expect(rollbackState).toBeNull();\n    });\n  });\n\n  describe(\"hasPendingUpdates\", () => {\n    it(\"should correctly report pending status\", () => {\n      expect(manager.hasPendingUpdates()).toBe(false);\n\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 0);\n      expect(manager.hasPendingUpdates()).toBe(true);\n\n      manager.applyUpdate(update.id, testBoard);\n      expect(manager.hasPendingUpdates()).toBe(false);\n    });\n  });\n\n  describe(\"event subscription\", () => {\n    it(\"should notify subscribers of state changes\", () => {\n      const mockListener = vi.fn();\n\n      const unsubscribe = manager.subscribe(mockListener);\n\n      manager.createUpdate(testMove, testBoard, \"red\", 0);\n\n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          pendingCount: 1,\n        }),\n      );\n\n      unsubscribe();\n\n      // Should not be called after unsubscribe\n      manager.createUpdate(testMove, testBoard, \"black\", 1);\n      expect(mockListener).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should handle subscriber errors gracefully\", () => {\n      const faultyListener = vi.fn(() => {\n        throw new Error(\"Listener error\");\n      });\n\n      const consoleErrorSpy = vi\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n\n      manager.subscribe(faultyListener);\n\n      // Should not throw\n      expect(() => {\n        manager.createUpdate(testMove, testBoard, \"red\", 0);\n      }).not.toThrow();\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        \"Error in optimistic update listener:\",\n        expect.any(Error),\n      );\n\n      consoleErrorSpy.mockRestore();\n    });\n  });\n\n  describe(\"detectConflicts\", () => {\n    it(\"should detect conflicts when server advances beyond optimistic updates\", () => {\n      const update1 = manager.createUpdate(testMove, testBoard, \"red\", 5);\n      const update2 = manager.createUpdate(testMove, testBoard, \"black\", 5);\n\n      const conflicts = manager.detectConflicts(testBoard, 7, 10);\n\n      expect(conflicts).toEqual([update1.id, update2.id]);\n    });\n\n    it(\"should not detect conflicts when server is at same state\", () => {\n      manager.createUpdate(testMove, testBoard, \"red\", 5);\n\n      const conflicts = manager.detectConflicts(testBoard, 5, 8);\n\n      expect(conflicts).toHaveLength(0);\n    });\n\n    it(\"should handle updates without rollback state\", () => {\n      const update = manager.createUpdate(testMove, testBoard, \"red\", 5);\n\n      // Remove rollback state to simulate edge case\n      const storedUpdate = manager.getUpdate(update.id)!;\n      delete storedUpdate.rollbackState;\n\n      const conflicts = manager.detectConflicts(testBoard, 5, 8);\n\n      expect(conflicts).toEqual([update.id]);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/optimistic-updates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/s3.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/skins/definitions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/skins/get-skin-styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/skins/hooks.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'skinProgress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":45},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'day' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":98,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from \"react\";\nimport { useSkin } from \"./skin-context\";\n\ninterface GameStats {\n  wins: number;\n  losses: number;\n  gamesPlayed: number;\n  currentStreak: number;\n  perfectGames: number;\n}\n\nexport function useSkinUnlockTracking(stats: GameStats | null) {\n  const { checkUnlockCondition, updateProgress } = useSkin();\n\n  useEffect(() => {\n    if (!stats) return;\n\n    // Check wins-based unlocks\n    checkUnlockCondition(\"midnight\", \"wins\", stats.wins);\n    updateProgress(\"midnight\", stats.wins);\n\n    // Check games-played unlocks\n    checkUnlockCondition(\"ocean\", \"games\", stats.gamesPlayed);\n    updateProgress(\"ocean\", stats.gamesPlayed);\n\n    // Check streak-based unlocks\n    checkUnlockCondition(\"forest\", \"streak\", stats.currentStreak);\n    updateProgress(\"forest\", stats.currentStreak);\n\n    // Check achievement-based unlocks\n    if (stats.perfectGames > 0) {\n      checkUnlockCondition(\"neon\", \"achievement\", \"perfect_game\");\n    }\n  }, [stats, checkUnlockCondition, updateProgress]);\n}\n\nexport function useGameEndSkinUnlock(\n  gameResult: \"win\" | \"loss\" | null,\n  wasPerfectGame: boolean,\n) {\n  const { checkUnlockCondition, skinProgress } = useSkin();\n\n  useEffect(() => {\n    if (!gameResult) return;\n\n    // Get current stats from localStorage (in a real app, this would come from a database)\n    const storedStats = localStorage.getItem(\"checkers-game-stats\");\n    let stats: GameStats = {\n      wins: 0,\n      losses: 0,\n      gamesPlayed: 0,\n      currentStreak: 0,\n      perfectGames: 0,\n    };\n\n    if (storedStats) {\n      try {\n        stats = JSON.parse(storedStats) as GameStats;\n      } catch (e) {\n        console.error(\"Failed to parse game stats\", e);\n      }\n    }\n\n    // Update stats based on game result\n    stats.gamesPlayed++;\n\n    if (gameResult === \"win\") {\n      stats.wins++;\n      stats.currentStreak++;\n\n      if (wasPerfectGame) {\n        stats.perfectGames++;\n        // Check perfect game achievement\n        checkUnlockCondition(\"neon\", \"achievement\", \"perfect_game\");\n      }\n    } else {\n      stats.losses++;\n      stats.currentStreak = 0;\n    }\n\n    // Save updated stats\n    localStorage.setItem(\"checkers-game-stats\", JSON.stringify(stats));\n\n    // Check all unlock conditions with new stats\n    checkUnlockCondition(\"midnight\", \"wins\", stats.wins);\n    checkUnlockCondition(\"ocean\", \"games\", stats.gamesPlayed);\n    checkUnlockCondition(\"forest\", \"streak\", stats.currentStreak);\n  }, [gameResult, wasPerfectGame, checkUnlockCondition]);\n}\n\nexport function useSpecialEventSkins() {\n  const { checkUnlockCondition } = useSkin();\n\n  useEffect(() => {\n    // Check for seasonal events\n    const now = new Date();\n    const month = now.getMonth(); // 0-11\n    const day = now.getDate();\n\n    // Winter holiday season (December)\n    if (month === 11) {\n      // Auto-unlock holiday skin during December\n      checkUnlockCondition(\"holiday\", \"code\", \"HOLIDAY2024\");\n    }\n\n    // You can add more seasonal checks here\n    // Halloween (October)\n    // if (month === 9) { ... }\n\n    // Valentine's Day (February 14)\n    // if (month === 1 && day === 14) { ... }\n  }, [checkUnlockCondition]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/skins/skin-context.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'defaultUnlocked'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [defaultUnlocked]","fix":{"range":[2505,2507],"text":"[defaultUnlocked]"}}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":187,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":187,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6677,6679],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":240,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":240,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8147,8149],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'selectSkin'.","line":288,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":288,"endColumn":31},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'unlockSkin'.","line":289,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":289,"endColumn":31},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'checkUnlockCondition'.","line":290,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":290,"endColumn":41},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'updateProgress'.","line":291,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":291,"endColumn":35}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from \"react\";\nimport { type Skin, type SkinUnlockProgress } from \"./types\";\nimport { skins } from \"./definitions\";\n\ninterface SkinContextValue {\n  currentSkin: Skin;\n  availableSkins: Skin[];\n  unlockedSkins: Set<string>;\n  skinProgress: Map<string, SkinUnlockProgress>;\n  selectSkin: (skinId: string) => void;\n  unlockSkin: (skinId: string) => void;\n  checkUnlockCondition: (\n    skinId: string,\n    type: string,\n    value: number | string,\n  ) => void;\n  updateProgress: (skinId: string, progress: number) => void;\n}\n\nconst SkinContext = createContext<SkinContextValue | null>(null);\n\nconst STORAGE_KEY_CURRENT = \"checkers-current-skin\";\nconst STORAGE_KEY_UNLOCKED = \"checkers-unlocked-skins\";\nconst STORAGE_KEY_PROGRESS = \"checkers-skin-progress\";\nconst SKIN_COOKIE_KEY = \"checkers-skin\";\n\nexport function SkinProvider({ children }: { children: React.ReactNode }) {\n  // Get all free themes (locked: false)\n  const defaultUnlocked = new Set(\n    Object.values(skins)\n      .filter((skin) => !skin.locked)\n      .map((skin) => skin.id),\n  );\n\n  const [currentSkinId, setCurrentSkinId] = useState<string>(\"the-og\");\n  const [unlockedSkins, setUnlockedSkins] =\n    useState<Set<string>>(defaultUnlocked);\n  const [skinProgress, setSkinProgress] = useState<\n    Map<string, SkinUnlockProgress>\n  >(new Map());\n  const [mounted, setMounted] = useState(false);\n\n  // Load saved data from localStorage\n  useEffect(() => {\n    setMounted(true);\n\n    const savedCurrent = localStorage.getItem(STORAGE_KEY_CURRENT);\n    if (savedCurrent && skins[savedCurrent]) {\n      setCurrentSkinId(savedCurrent);\n    }\n\n    const savedUnlocked = localStorage.getItem(STORAGE_KEY_UNLOCKED);\n    if (savedUnlocked) {\n      try {\n        const unlocked = JSON.parse(savedUnlocked) as string[];\n        // Merge saved unlocks with default free themes\n        const mergedUnlocked = new Set([...defaultUnlocked, ...unlocked]);\n        setUnlockedSkins(mergedUnlocked);\n      } catch (e) {\n        console.error(\"Failed to parse unlocked skins\", e);\n      }\n    }\n\n    const savedProgress = localStorage.getItem(STORAGE_KEY_PROGRESS);\n    if (savedProgress) {\n      try {\n        const progress = JSON.parse(savedProgress) as Array<\n          [string, SkinUnlockProgress]\n        >;\n        setSkinProgress(new Map(progress));\n      } catch (e) {\n        console.error(\"Failed to parse skin progress\", e);\n      }\n    }\n  }, []);\n\n  // Apply skin CSS variables\n  useEffect(() => {\n    if (!mounted) return;\n\n    const skin = skins[currentSkinId];\n    if (!skin) return;\n\n    // Remove server-side styles to avoid conflicts\n    const serverStyles = document.getElementById(\"skin-styles-server\");\n    if (serverStyles) {\n      serverStyles.remove();\n    }\n\n    // Apply board colors\n    const root = document.documentElement;\n\n    // Board colors\n    root.style.setProperty(\"--board-light-from\", skin.board.lightSquare.from);\n    root.style.setProperty(\"--board-light-to\", skin.board.lightSquare.to);\n    root.style.setProperty(\"--board-dark-from\", skin.board.darkSquare.from);\n    root.style.setProperty(\"--board-dark-to\", skin.board.darkSquare.to);\n    root.style.setProperty(\"--board-border\", skin.board.border);\n    root.style.setProperty(\"--board-selected-ring\", skin.board.selectedRing);\n    root.style.setProperty(\n      \"--board-highlighted-ring\",\n      skin.board.highlightedRing,\n    );\n    root.style.setProperty(\"--board-possible-move\", skin.board.possibleMove);\n    root.style.setProperty(\n      \"--board-possible-move-glow\",\n      skin.board.possibleMoveGlow,\n    );\n    root.style.setProperty(\"--board-arrow-stroke\", skin.board.arrow.stroke);\n    root.style.setProperty(\"--board-arrow-fill\", skin.board.arrow.fill);\n    root.style.setProperty(\"--board-arrow-glow\", skin.board.arrow.glow);\n\n    // Piece colors\n    root.style.setProperty(\"--piece-red-base\", skin.pieces.red.base);\n    root.style.setProperty(\"--piece-red-from\", skin.pieces.red.gradient.from);\n    root.style.setProperty(\"--piece-red-to\", skin.pieces.red.gradient.to);\n    root.style.setProperty(\"--piece-red-border\", skin.pieces.red.border);\n    root.style.setProperty(\"--piece-red-crown\", skin.pieces.red.crown);\n\n    root.style.setProperty(\"--piece-black-base\", skin.pieces.black.base);\n    root.style.setProperty(\n      \"--piece-black-from\",\n      skin.pieces.black.gradient.from,\n    );\n    root.style.setProperty(\"--piece-black-to\", skin.pieces.black.gradient.to);\n    root.style.setProperty(\"--piece-black-border\", skin.pieces.black.border);\n    root.style.setProperty(\"--piece-black-crown\", skin.pieces.black.crown);\n\n    // // UI colors (override CSS custom properties)\n    // root.style.setProperty('--background', skin.ui.background);\n    // root.style.setProperty('--foreground', skin.ui.foreground);\n    // root.style.setProperty('--card', skin.ui.card);\n    // root.style.setProperty('--card-foreground', skin.ui.cardForeground);\n    // root.style.setProperty('--primary', skin.ui.primary);\n    // root.style.setProperty('--primary-foreground', skin.ui.primaryForeground);\n    // root.style.setProperty('--secondary', skin.ui.secondary);\n    // root.style.setProperty('--secondary-foreground', skin.ui.secondaryForeground);\n    // root.style.setProperty('--accent', skin.ui.accent);\n    // root.style.setProperty('--accent-foreground', skin.ui.accentForeground);\n    // root.style.setProperty('--muted', skin.ui.muted);\n    // root.style.setProperty('--muted-foreground', skin.ui.mutedForeground);\n    // root.style.setProperty('--border', skin.ui.border);\n    // root.style.setProperty('--ring', skin.ui.ring);\n  }, [currentSkinId, mounted]);\n\n  const selectSkin = useCallback(\n    (skinId: string) => {\n      if (!skins[skinId]) return;\n      if (!unlockedSkins.has(skinId)) {\n        console.warn(`Skin ${skinId} is locked`);\n        return;\n      }\n\n      setCurrentSkinId(skinId);\n      localStorage.setItem(STORAGE_KEY_CURRENT, skinId);\n\n      // Also update cookie for server-side rendering\n      document.cookie = `${SKIN_COOKIE_KEY}=${skinId}; path=/; max-age=31536000; SameSite=Lax`;\n    },\n    [unlockedSkins],\n  );\n\n  const unlockSkin = useCallback((skinId: string) => {\n    if (!skins[skinId]) return;\n\n    setUnlockedSkins((prev) => {\n      const newSet = new Set(prev);\n      newSet.add(skinId);\n      localStorage.setItem(\n        STORAGE_KEY_UNLOCKED,\n        JSON.stringify(Array.from(newSet)),\n      );\n      return newSet;\n    });\n\n    // Update progress to mark as unlocked\n    setSkinProgress((prev) => {\n      const newMap = new Map(prev);\n      const progress = newMap.get(skinId) || {\n        skinId,\n        progress: 0,\n        target: 0,\n        unlocked: false,\n      };\n      progress.unlocked = true;\n      progress.unlockedAt = new Date();\n      newMap.set(skinId, progress);\n\n      localStorage.setItem(\n        STORAGE_KEY_PROGRESS,\n        JSON.stringify(Array.from(newMap)),\n      );\n      return newMap;\n    });\n  }, []);\n\n  const checkUnlockCondition = useCallback(\n    (skinId: string, type: string, value: number | string) => {\n      const skin = skins[skinId];\n      if (!skin?.unlockCondition) return;\n      if (unlockedSkins.has(skinId)) return;\n\n      const condition = skin.unlockCondition;\n\n      if (condition.type === type) {\n        if (condition.type === \"code\" && condition.value === value) {\n          unlockSkin(skinId);\n        } else if (\n          typeof condition.value === \"number\" &&\n          typeof value === \"number\" &&\n          value >= condition.value\n        ) {\n          unlockSkin(skinId);\n        } else if (condition.value === value) {\n          unlockSkin(skinId);\n        }\n      }\n    },\n    [unlockedSkins, unlockSkin],\n  );\n\n  const updateProgress = useCallback(\n    (skinId: string, progress: number) => {\n      const skin = skins[skinId];\n      if (!skin?.unlockCondition) return;\n      if (unlockedSkins.has(skinId)) return;\n\n      const condition = skin.unlockCondition;\n\n      setSkinProgress((prev) => {\n        const newMap = new Map(prev);\n        const currentProgress = newMap.get(skinId) || {\n          skinId,\n          progress: 0,\n          target: typeof condition.value === \"number\" ? condition.value : 0,\n          unlocked: false,\n        };\n\n        currentProgress.progress = progress;\n\n        // Check if target is reached\n        if (currentProgress.target > 0 && progress >= currentProgress.target) {\n          unlockSkin(skinId);\n        }\n\n        newMap.set(skinId, currentProgress);\n        localStorage.setItem(\n          STORAGE_KEY_PROGRESS,\n          JSON.stringify(Array.from(newMap)),\n        );\n        return newMap;\n      });\n    },\n    [unlockedSkins, unlockSkin],\n  );\n\n  const allSkins: Skin[] = Object.values(skins).sort((a, b) => {\n    if (a.id === \"the-og\") return -1;\n    if (b.id === \"the-og\") return 1;\n    return 0;\n  });\n  const availableSkins = allSkins.map((skin) => ({\n    ...skin,\n    locked: !unlockedSkins.has(skin.id),\n  }));\n\n  const defaultSkin: Skin = skins[\"the-og\"] ?? skins.classic!;\n  const currentSkin: Skin =\n    (skins[currentSkinId] as Skin | undefined) ?? defaultSkin;\n\n  if (!mounted) {\n    // Return a minimal context during SSR\n    return (\n      <SkinContext.Provider\n        value={{\n          currentSkin: defaultSkin,\n          availableSkins: allSkins,\n          unlockedSkins: defaultUnlocked,\n          skinProgress: new Map(),\n          selectSkin: () => {},\n          unlockSkin: () => {},\n          checkUnlockCondition: () => {},\n          updateProgress: () => {},\n        }}\n      >\n        {children}\n      </SkinContext.Provider>\n    );\n  }\n\n  return (\n    <SkinContext.Provider\n      value={{\n        currentSkin,\n        availableSkins,\n        unlockedSkins,\n        skinProgress,\n        selectSkin,\n        unlockSkin,\n        checkUnlockCondition,\n        updateProgress,\n      }}\n    >\n      {children}\n    </SkinContext.Provider>\n  );\n}\n\nexport function useSkin() {\n  const context = useContext(SkinContext);\n  if (!context) {\n    throw new Error(\"useSkin must be used within a SkinProvider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/skins/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/database.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":37,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":37,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1241,1244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1241,1244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":37,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":48,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":48,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":48,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1637,1640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1637,1640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":48,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":54,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":54,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":58,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":58,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1938,1941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1938,1941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":58,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":89,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":89,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2767,2770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2767,2770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":89,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":93,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":97,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":97,"column":24,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":97,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":102,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":100,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3009,3012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3009,3012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":100,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":108,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":108,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":127,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":125,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":125,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3596,3599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3596,3599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":125,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":129,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":133,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":133,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `any` value.","line":133,"column":24,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":133,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":136,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":136,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3830,3833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3830,3833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":136,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":155,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":153,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":153,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4269,4272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4269,4272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":153,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":157,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":48},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":157,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":157,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4387,4389],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":177,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":182,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":187,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":187,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5108,5111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5108,5111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .game on an `any` value.","line":187,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":41}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type api } from \"~/trpc/react\";\nimport type { api as serverApi } from \"~/trpc/server\";\nimport {\n  type GameStorageAdapter,\n  type PersistedGameState,\n  type GameSummary,\n  type StorageResult,\n  type StorageConfig,\n} from \"./types\";\n\ntype ApiClient = typeof api | typeof serverApi;\n\nexport class DatabaseStorageAdapter implements GameStorageAdapter {\n  private autoSaveTimer: NodeJS.Timeout | null = null;\n  private config: Required<StorageConfig>;\n  private apiClient: ApiClient;\n  private isServer: boolean;\n\n  constructor(apiClient: ApiClient, config: StorageConfig = {}) {\n    this.apiClient = apiClient;\n    this.isServer = typeof window === \"undefined\";\n    this.config = {\n      autoSaveInterval: config.autoSaveInterval ?? 10000, // Slower for network\n      maxSavedGames: config.maxSavedGames ?? 50,\n      compressionEnabled: config.compressionEnabled ?? false,\n      syncEnabled: config.syncEnabled ?? true,\n    };\n  }\n\n  async saveGame(gameState: PersistedGameState): Promise<StorageResult<void>> {\n    try {\n      // Check if game exists\n      const existingGame = await this.loadGame(gameState.id);\n\n      if (existingGame.success && existingGame.data) {\n        // Update existing game\n        await (this.apiClient as any).game.save.mutate({\n          id: gameState.id,\n          board: gameState.board,\n          currentPlayer: gameState.currentPlayer,\n          moveCount: gameState.moveCount,\n          gameMode: gameState.gameMode,\n          winner: gameState.winner,\n          moves: gameState.moveHistory,\n        });\n      } else {\n        // Create new game\n        const result = await (this.apiClient as any).game.create.mutate({\n          mode: gameState.gameMode,\n          playerName: undefined,\n        });\n\n        // Update the gameState with the new ID\n        gameState.id = result.id;\n\n        // Save with moves\n        if (gameState.moveHistory.length > 0) {\n          await (this.apiClient as any).game.save.mutate({\n            id: gameState.id,\n            board: gameState.board,\n            currentPlayer: gameState.currentPlayer,\n            moveCount: gameState.moveCount,\n            gameMode: gameState.gameMode,\n            winner: gameState.winner,\n            moves: gameState.moveHistory,\n          });\n        }\n      }\n\n      return { success: true, data: undefined };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"NETWORK_ERROR\",\n          message: \"Failed to save game to database\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async loadGame(\n    gameId?: string,\n  ): Promise<StorageResult<PersistedGameState | null>> {\n    try {\n      if (!gameId) {\n        // Load the most recent game\n        const games = await (this.apiClient as any).game.list.query({\n          limit: 1,\n        });\n\n        if (!games || games.length === 0) {\n          return { success: true, data: null };\n        }\n\n        gameId = games[0].id;\n      }\n\n      const game = await (this.apiClient as any).game.load.query({\n        id: gameId,\n      });\n\n      if (!game) {\n        return { success: true, data: null };\n      }\n\n      return { success: true, data: game };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"NETWORK_ERROR\",\n          message: \"Failed to load game from database\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async deleteGame(gameId?: string): Promise<StorageResult<void>> {\n    try {\n      if (!gameId) {\n        // Delete the most recent game\n        const games = await (this.apiClient as any).game.list.query({\n          limit: 1,\n        });\n\n        if (!games || games.length === 0) {\n          return { success: true, data: undefined };\n        }\n\n        gameId = games[0].id;\n      }\n\n      await (this.apiClient as any).game.delete.mutate({ id: gameId });\n\n      return { success: true, data: undefined };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"NETWORK_ERROR\",\n          message: \"Failed to delete game from database\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async listGames(): Promise<StorageResult<GameSummary[]>> {\n    try {\n      const games = await (this.apiClient as any).game.list.query({\n        limit: this.config.maxSavedGames,\n      });\n\n      return { success: true, data: games || [] };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"NETWORK_ERROR\",\n          message: \"Failed to list games from database\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async autoSave(gameState: PersistedGameState): Promise<void> {\n    // Clear existing timer\n    if (this.autoSaveTimer) {\n      clearTimeout(this.autoSaveTimer);\n    }\n\n    // Set new timer\n    this.autoSaveTimer = setTimeout(async () => {\n      await this.saveGame({\n        ...gameState,\n        lastSaved: new Date().toISOString(),\n      });\n    }, this.config.autoSaveInterval);\n  }\n\n  async clearAll(): Promise<StorageResult<void>> {\n    try {\n      await (this.apiClient as any).game.deleteAll.mutate();\n\n      return { success: true, data: undefined };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"NETWORK_ERROR\",\n          message: \"Failed to clear all games from database\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  // Cleanup method\n  destroy(): void {\n    if (this.autoSaveTimer) {\n      clearTimeout(this.autoSaveTimer);\n      this.autoSaveTimer = null;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/hybrid.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":136,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3979,3982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3979,3982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":136,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":139,"column":30,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":139,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":139,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":140,"column":27,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":140,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":140,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `GameSummary`.","line":141,"column":29,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":141,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":198,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5492,5495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5492,5495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .destroy on an `any` value.","line":198,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":206,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":206,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5669,5672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5669,5672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .destroy on an `any` value.","line":206,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":38}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  type GameStorageAdapter,\n  type PersistedGameState,\n  type GameSummary,\n  type StorageResult,\n} from \"./types\";\n\nexport class HybridStorageAdapter implements GameStorageAdapter {\n  constructor(\n    private primary: GameStorageAdapter,\n    private secondary: GameStorageAdapter | null = null,\n    private config: {\n      syncToSecondary?: boolean;\n      preferPrimary?: boolean;\n    } = {},\n  ) {\n    this.config = {\n      syncToSecondary: config.syncToSecondary ?? true,\n      preferPrimary: config.preferPrimary ?? true,\n    };\n  }\n\n  async saveGame(gameState: PersistedGameState): Promise<StorageResult<void>> {\n    // Always save to primary\n    const primaryResult = await this.primary.saveGame(gameState);\n\n    // If primary fails and we have secondary, try secondary\n    if (!primaryResult.success && this.secondary) {\n      const secondaryResult = await this.secondary.saveGame(gameState);\n      if (secondaryResult.success) {\n        console.warn(\"Primary storage failed, saved to secondary storage\");\n      }\n      return secondaryResult;\n    }\n\n    // If primary succeeds and sync is enabled, sync to secondary\n    if (\n      primaryResult.success &&\n      this.secondary &&\n      this.config.syncToSecondary\n    ) {\n      // Async sync - don't wait for it\n      this.secondary.saveGame(gameState).catch((error) => {\n        console.warn(\"Failed to sync to secondary storage:\", error);\n      });\n    }\n\n    return primaryResult;\n  }\n\n  async loadGame(\n    gameId?: string,\n  ): Promise<StorageResult<PersistedGameState | null>> {\n    if (this.config.preferPrimary) {\n      // Try primary first\n      const primaryResult = await this.primary.loadGame(gameId);\n\n      if (primaryResult.success && primaryResult.data) {\n        return primaryResult;\n      }\n\n      // If primary has no data or failed, try secondary\n      if (this.secondary) {\n        const secondaryResult = await this.secondary.loadGame(gameId);\n\n        // If secondary has data, sync it back to primary\n        if (secondaryResult.success && secondaryResult.data) {\n          this.primary.saveGame(secondaryResult.data).catch((error) => {\n            console.warn(\"Failed to sync from secondary to primary:\", error);\n          });\n\n          return secondaryResult;\n        }\n      }\n\n      return primaryResult;\n    } else {\n      // Prefer secondary (e.g., prefer database over localStorage)\n      if (this.secondary) {\n        const secondaryResult = await this.secondary.loadGame(gameId);\n\n        if (secondaryResult.success && secondaryResult.data) {\n          // Sync to primary for offline access\n          this.primary.saveGame(secondaryResult.data).catch((error) => {\n            console.warn(\"Failed to sync from secondary to primary:\", error);\n          });\n\n          return secondaryResult;\n        }\n      }\n\n      // Fallback to primary\n      return await this.primary.loadGame(gameId);\n    }\n  }\n\n  async deleteGame(gameId?: string): Promise<StorageResult<void>> {\n    const results = await Promise.allSettled(\n      [\n        this.primary.deleteGame(gameId),\n        this.secondary?.deleteGame(gameId),\n      ].filter(Boolean),\n    );\n\n    const primaryResult = results[0];\n\n    if (\n      primaryResult &&\n      primaryResult.status === \"fulfilled\" &&\n      primaryResult.value\n    ) {\n      return primaryResult.value;\n    }\n\n    return {\n      success: false,\n      error: {\n        code: \"UNKNOWN\",\n        message: \"Failed to delete game from storage\",\n        originalError: primaryResult,\n      },\n    };\n  }\n\n  async listGames(): Promise<StorageResult<GameSummary[]>> {\n    // Combine games from both storages\n    const results = await Promise.allSettled(\n      [this.primary.listGames(), this.secondary?.listGames()].filter(Boolean),\n    );\n\n    const allGames: GameSummary[] = [];\n    const gameIds = new Set<string>();\n\n    for (const result of results) {\n      if (result.status === \"fulfilled\" && result.value?.success) {\n        const data = (result.value as any).data;\n        if (Array.isArray(data)) {\n          for (const game of data) {\n            if (!gameIds.has(game.id)) {\n              gameIds.add(game.id);\n              allGames.push(game);\n            }\n          }\n        }\n      }\n    }\n\n    // Sort by last saved\n    allGames.sort(\n      (a, b) =>\n        new Date(b.lastSaved).getTime() - new Date(a.lastSaved).getTime(),\n    );\n\n    return { success: true, data: allGames };\n  }\n\n  async autoSave(gameState: PersistedGameState): Promise<void> {\n    // Auto-save to primary only (to avoid too many network requests)\n    await this.primary.autoSave(gameState);\n\n    // Optionally schedule a less frequent sync to secondary\n    if (this.secondary && this.config.syncToSecondary) {\n      // Could implement a debounced sync here\n    }\n  }\n\n  async clearAll(): Promise<StorageResult<void>> {\n    const results = await Promise.allSettled(\n      [this.primary.clearAll(), this.secondary?.clearAll()].filter(Boolean),\n    );\n\n    const primaryResult = results[0];\n\n    if (\n      primaryResult &&\n      primaryResult.status === \"fulfilled\" &&\n      primaryResult.value\n    ) {\n      return primaryResult.value;\n    }\n\n    return {\n      success: false,\n      error: {\n        code: \"UNKNOWN\",\n        message: \"Failed to clear storage\",\n        originalError: primaryResult,\n      },\n    };\n  }\n\n  // Cleanup method\n  destroy(): void {\n    if (\n      \"destroy\" in this.primary &&\n      typeof this.primary.destroy === \"function\"\n    ) {\n      (this.primary as any).destroy();\n    }\n\n    if (\n      this.secondary &&\n      \"destroy\" in this.secondary &&\n      typeof this.secondary.destroy === \"function\"\n    ) {\n      (this.secondary as any).destroy();\n    }\n  }\n\n  // Utility method to sync all games from one storage to another\n  async syncAll(fromPrimary = true): Promise<void> {\n    if (!this.secondary) return;\n\n    const source = fromPrimary ? this.primary : this.secondary;\n    const target = fromPrimary ? this.secondary : this.primary;\n\n    const gamesResult = await source.listGames();\n\n    if (!gamesResult.success) return;\n\n    for (const gameSummary of gamesResult.data) {\n      const gameResult = await source.loadGame(gameSummary.id);\n\n      if (gameResult.success && gameResult.data) {\n        await target.saveGame(gameResult.data);\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/indexeddb.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":299,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":304,"endColumn":6},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'clearGames' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":317,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'clearSync' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":318,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":318,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":450,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":450,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":497,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14326,14329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14326,14329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":500,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":500,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":500,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":500,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":501,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":501,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `any` value.","line":501,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":501,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":502,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":502,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentPlayer on an `any` value.","line":502,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":502,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":503,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":503,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveCount on an `any` value.","line":503,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":503,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":504,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":504,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveHistory on an `any` value.","line":504,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":504,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":505,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":505,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameMode on an `any` value.","line":505,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":505,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":506,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":506,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameStartTime on an `any` value.","line":506,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":506,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":507,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":507,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastSaved on an `any` value.","line":507,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":507,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":508,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":508,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .winner on an `any` value.","line":508,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":508,"endColumn":33}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  type GameStorageAdapter,\n  type PersistedGameState,\n  type GameSummary,\n  type StorageResult,\n  type StorageConfig,\n  DEFAULT_GAME_ID,\n  STORAGE_VERSION,\n} from \"./types\";\n\nconst DB_NAME = \"CheckersGameDB\";\nconst DB_VERSION = 1;\nconst GAMES_STORE = \"games\";\nconst SYNC_QUEUE_STORE = \"syncQueue\";\n\ninterface SyncQueueItem {\n  id: string;\n  gameState: PersistedGameState;\n  operation: \"save\" | \"delete\";\n  timestamp: string;\n  retryCount: number;\n}\n\nexport class IndexedDBAdapter implements GameStorageAdapter {\n  private db: IDBDatabase | null = null;\n  private autoSaveTimer: NodeJS.Timeout | null = null;\n  private config: Required<StorageConfig>;\n  private isOnline: boolean = navigator.onLine;\n  private syncInterval: NodeJS.Timeout | null = null;\n\n  constructor(config: StorageConfig = {}) {\n    this.config = {\n      autoSaveInterval: config.autoSaveInterval ?? 5000,\n      maxSavedGames: config.maxSavedGames ?? 10,\n      compressionEnabled: config.compressionEnabled ?? false,\n      syncEnabled: config.syncEnabled ?? true,\n    };\n\n    // Listen to online/offline events\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"online\", this.handleOnline.bind(this));\n      window.addEventListener(\"offline\", this.handleOffline.bind(this));\n    }\n\n    // Initialize database\n    this.initDB().catch(console.error);\n\n    // Start sync interval if enabled\n    if (this.config.syncEnabled) {\n      this.startSyncInterval();\n    }\n  }\n\n  private async initDB(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = () => {\n        reject(new Error(\"Failed to open IndexedDB\"));\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create games object store\n        if (!db.objectStoreNames.contains(GAMES_STORE)) {\n          const gamesStore = db.createObjectStore(GAMES_STORE, {\n            keyPath: \"id\",\n          });\n          gamesStore.createIndex(\"lastSaved\", \"lastSaved\", { unique: false });\n          gamesStore.createIndex(\"gameMode\", \"gameMode\", { unique: false });\n          gamesStore.createIndex(\"winner\", \"winner\", { unique: false });\n        }\n\n        // Create sync queue object store for offline sync\n        if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {\n          const syncStore = db.createObjectStore(SYNC_QUEUE_STORE, {\n            keyPath: \"id\",\n          });\n          syncStore.createIndex(\"timestamp\", \"timestamp\", { unique: false });\n        }\n      };\n    });\n  }\n\n  private async ensureDB(): Promise<IDBDatabase> {\n    if (!this.db) {\n      await this.initDB();\n    }\n    if (!this.db) {\n      throw new Error(\"Failed to initialize IndexedDB\");\n    }\n    return this.db;\n  }\n\n  async saveGame(gameState: PersistedGameState): Promise<StorageResult<void>> {\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([GAMES_STORE], \"readwrite\");\n      const store = transaction.objectStore(GAMES_STORE);\n\n      // Enforce max saved games limit\n      await this.enforceMaxGamesLimit(store, gameState.id);\n\n      const request = store.put(gameState);\n\n      return new Promise((resolve) => {\n        request.onsuccess = () => {\n          // Queue for sync if online and sync is enabled\n          if (this.config.syncEnabled && this.isOnline) {\n            void this.queueForSync(gameState, \"save\");\n          }\n          resolve({ success: true, data: undefined });\n        };\n\n        request.onerror = () => {\n          resolve({\n            success: false,\n            error: {\n              code: \"SAVE_FAILED\",\n              message: \"Failed to save game to IndexedDB\",\n              originalError: request.error,\n            },\n          });\n        };\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"DB_ERROR\",\n          message: \"Database operation failed\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async loadGame(\n    gameId: string = DEFAULT_GAME_ID,\n  ): Promise<StorageResult<PersistedGameState | null>> {\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([GAMES_STORE], \"readonly\");\n      const store = transaction.objectStore(GAMES_STORE);\n      const request = store.get(gameId);\n\n      return new Promise((resolve) => {\n        request.onsuccess = () => {\n          const gameState = request.result as PersistedGameState | undefined;\n\n          if (!gameState) {\n            resolve({ success: true, data: null });\n            return;\n          }\n\n          // Version migration if needed\n          if (gameState.version !== STORAGE_VERSION) {\n            const migrated = this.migrateGameState(gameState);\n            if (migrated) {\n              void this.saveGame(migrated);\n              resolve({ success: true, data: migrated });\n            } else {\n              resolve({ success: true, data: null });\n            }\n          } else {\n            resolve({ success: true, data: gameState });\n          }\n        };\n\n        request.onerror = () => {\n          resolve({\n            success: false,\n            error: {\n              code: \"LOAD_FAILED\",\n              message: \"Failed to load game from IndexedDB\",\n              originalError: request.error,\n            },\n          });\n        };\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"DB_ERROR\",\n          message: \"Database operation failed\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async deleteGame(\n    gameId: string = DEFAULT_GAME_ID,\n  ): Promise<StorageResult<void>> {\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([GAMES_STORE], \"readwrite\");\n      const store = transaction.objectStore(GAMES_STORE);\n      const request = store.delete(gameId);\n\n      return new Promise((resolve) => {\n        request.onsuccess = () => {\n          // Queue for sync if online and sync is enabled\n          if (this.config.syncEnabled && this.isOnline) {\n            void this.queueForDelete(gameId);\n          }\n          resolve({ success: true, data: undefined });\n        };\n\n        request.onerror = () => {\n          resolve({\n            success: false,\n            error: {\n              code: \"DELETE_FAILED\",\n              message: \"Failed to delete game from IndexedDB\",\n              originalError: request.error,\n            },\n          });\n        };\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"DB_ERROR\",\n          message: \"Database operation failed\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async listGames(): Promise<StorageResult<GameSummary[]>> {\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([GAMES_STORE], \"readonly\");\n      const store = transaction.objectStore(GAMES_STORE);\n      const index = store.index(\"lastSaved\");\n      const request = index.openCursor(null, \"prev\"); // Sort by lastSaved descending\n\n      const games: GameSummary[] = [];\n\n      return new Promise((resolve) => {\n        request.onsuccess = () => {\n          const cursor = request.result;\n\n          if (cursor) {\n            const gameState = cursor.value as PersistedGameState;\n            games.push({\n              id: gameState.id,\n              moveCount: gameState.moveCount,\n              gameMode: gameState.gameMode,\n              currentPlayer: gameState.currentPlayer,\n              gameStartTime: gameState.gameStartTime,\n              lastSaved: gameState.lastSaved,\n              winner: gameState.winner,\n            });\n            cursor.continue();\n          } else {\n            resolve({ success: true, data: games });\n          }\n        };\n\n        request.onerror = () => {\n          resolve({\n            success: false,\n            error: {\n              code: \"LIST_FAILED\",\n              message: \"Failed to list games from IndexedDB\",\n              originalError: request.error,\n            },\n          });\n        };\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"DB_ERROR\",\n          message: \"Database operation failed\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async autoSave(gameState: PersistedGameState): Promise<void> {\n    if (this.autoSaveTimer) {\n      clearTimeout(this.autoSaveTimer);\n    }\n\n    this.autoSaveTimer = setTimeout(async () => {\n      await this.saveGame({\n        ...gameState,\n        lastSaved: new Date().toISOString(),\n      });\n    }, this.config.autoSaveInterval);\n  }\n\n  async clearAll(): Promise<StorageResult<void>> {\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction(\n        [GAMES_STORE, SYNC_QUEUE_STORE],\n        \"readwrite\",\n      );\n      const gamesStore = transaction.objectStore(GAMES_STORE);\n      const syncStore = transaction.objectStore(SYNC_QUEUE_STORE);\n\n      const clearGames = gamesStore.clear();\n      const clearSync = syncStore.clear();\n\n      return new Promise((resolve) => {\n        transaction.oncomplete = () => {\n          resolve({ success: true, data: undefined });\n        };\n\n        transaction.onerror = () => {\n          resolve({\n            success: false,\n            error: {\n              code: \"CLEAR_FAILED\",\n              message: \"Failed to clear IndexedDB\",\n              originalError: transaction.error,\n            },\n          });\n        };\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"DB_ERROR\",\n          message: \"Database operation failed\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  private async enforceMaxGamesLimit(\n    store: IDBObjectStore,\n    currentGameId: string,\n  ): Promise<void> {\n    const index = store.index(\"lastSaved\");\n    const request = index.openCursor();\n    const games: Array<{ id: string; lastSaved: string }> = [];\n\n    return new Promise((resolve) => {\n      request.onsuccess = () => {\n        const cursor = request.result;\n\n        if (cursor) {\n          const game = cursor.value as PersistedGameState;\n          if (game.id !== currentGameId) {\n            games.push({ id: game.id, lastSaved: game.lastSaved });\n          }\n          cursor.continue();\n        } else {\n          // Sort by lastSaved and remove oldest if over limit\n          games.sort(\n            (a, b) =>\n              new Date(b.lastSaved).getTime() - new Date(a.lastSaved).getTime(),\n          );\n\n          if (games.length >= this.config.maxSavedGames) {\n            const toDelete = games.slice(this.config.maxSavedGames - 1);\n            for (const game of toDelete) {\n              store.delete(game.id);\n            }\n          }\n\n          resolve();\n        }\n      };\n    });\n  }\n\n  private async queueForSync(\n    gameState: PersistedGameState,\n    operation: \"save\" | \"delete\",\n  ): Promise<void> {\n    if (!this.config.syncEnabled) return;\n\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([SYNC_QUEUE_STORE], \"readwrite\");\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n\n      const queueItem: SyncQueueItem = {\n        id: `${gameState.id}_${Date.now()}`,\n        gameState,\n        operation,\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n      };\n\n      store.put(queueItem);\n    } catch (error) {\n      console.error(\"Failed to queue for sync:\", error);\n    }\n  }\n\n  private async queueForDelete(gameId: string): Promise<void> {\n    if (!this.config.syncEnabled) return;\n\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([SYNC_QUEUE_STORE], \"readwrite\");\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n\n      const queueItem: SyncQueueItem = {\n        id: `${gameId}_delete_${Date.now()}`,\n        gameState: { id: gameId } as PersistedGameState,\n        operation: \"delete\",\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n      };\n\n      store.put(queueItem);\n    } catch (error) {\n      console.error(\"Failed to queue delete for sync:\", error);\n    }\n  }\n\n  private async processSyncQueue(): Promise<void> {\n    if (!this.isOnline || !this.config.syncEnabled) return;\n\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([SYNC_QUEUE_STORE], \"readwrite\");\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.getAll();\n\n      request.onsuccess = async () => {\n        const items = request.result as SyncQueueItem[];\n\n        for (const item of items) {\n          try {\n            // This would be where you sync to the server\n            // For now, we'll just remove from the queue\n            await this.removeSyncQueueItem(item.id);\n          } catch (error) {\n            // Increment retry count\n            if (item.retryCount < 3) {\n              item.retryCount++;\n              store.put(item);\n            } else {\n              // Give up after 3 retries\n              await this.removeSyncQueueItem(item.id);\n            }\n          }\n        }\n      };\n    } catch (error) {\n      console.error(\"Failed to process sync queue:\", error);\n    }\n  }\n\n  private async removeSyncQueueItem(id: string): Promise<void> {\n    try {\n      const db = await this.ensureDB();\n      const transaction = db.transaction([SYNC_QUEUE_STORE], \"readwrite\");\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      store.delete(id);\n    } catch (error) {\n      console.error(\"Failed to remove sync queue item:\", error);\n    }\n  }\n\n  private handleOnline(): void {\n    this.isOnline = true;\n    // Process sync queue when coming online\n    void this.processSyncQueue();\n  }\n\n  private handleOffline(): void {\n    this.isOnline = false;\n  }\n\n  private startSyncInterval(): void {\n    // Process sync queue every 30 seconds when online\n    this.syncInterval = setInterval(() => {\n      if (this.isOnline) {\n        void this.processSyncQueue();\n      }\n    }, 30000);\n  }\n\n  private migrateGameState(gameState: any): PersistedGameState | null {\n    try {\n      return {\n        id: gameState.id ?? DEFAULT_GAME_ID,\n        board: gameState.board,\n        currentPlayer: gameState.currentPlayer ?? \"red\",\n        moveCount: gameState.moveCount ?? 0,\n        moveHistory: gameState.moveHistory ?? [],\n        gameMode: gameState.gameMode ?? \"ai\",\n        gameStartTime: gameState.gameStartTime ?? new Date().toISOString(),\n        lastSaved: gameState.lastSaved ?? new Date().toISOString(),\n        winner: gameState.winner ?? null,\n        version: STORAGE_VERSION,\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  destroy(): void {\n    if (this.autoSaveTimer) {\n      clearTimeout(this.autoSaveTimer);\n      this.autoSaveTimer = null;\n    }\n\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n    }\n\n    if (typeof window !== \"undefined\") {\n      window.removeEventListener(\"online\", this.handleOnline.bind(this));\n      window.removeEventListener(\"offline\", this.handleOffline.bind(this));\n    }\n\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/local-storage.test.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":14,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":14,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[448,450],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":24,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":24,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[794,796],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":45,"column":9,"nodeType":"Property","messageId":"unsafeAssignment","endLine":47,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":47,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":47,"endColumn":41},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":61,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":61,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1876,1879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1876,1879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":72,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":72,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":84,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .circular on an `any` value.","line":84,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `PersistedGameState`.","line":86,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":86,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":96,"column":9,"nodeType":"Property","messageId":"unsafeAssignment","endLine":98,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":98,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":98,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":113,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentPlayer on an `error` typed value.","line":114,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveCount on an `error` typed value.","line":115,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":36},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":123,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":123,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .code on an `error` typed value.","line":136,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":153,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":161,"column":9,"nodeType":"Property","messageId":"unsafeAssignment","endLine":163,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":163,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":163,"endColumn":41},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":178,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":178,"endColumn":36},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":187,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":187,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":197,"column":9,"nodeType":"Property","messageId":"unsafeAssignment","endLine":199,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":199,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":199,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [0] on an `error` typed value.","line":215,"column":28,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":215,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[][]` to a variable of type `Board`.","line":235,"column":9,"nodeType":"Property","messageId":"unsafeAssignment","endLine":237,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":237,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":237,"endColumn":41},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":259,"column":14,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":259,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":289,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":289,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":309,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":309,"endColumn":29}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi, afterEach } from \"vitest\";\nimport { LocalStorageAdapter } from \"./local-storage\";\nimport type { PersistedGameState } from \"./types\";\n\ndescribe(\"LocalStorageAdapter\", () => {\n  let adapter: LocalStorageAdapter;\n  let mockStorage: Storage;\n\n  beforeEach(() => {\n    // Mock localStorage\n    const store: Record<string, string> = {};\n\n    mockStorage = {\n      getItem: vi.fn((key: string) => store[key] || null),\n      setItem: vi.fn((key: string, value: string) => {\n        store[key] = value;\n      }),\n      removeItem: vi.fn((key: string) => {\n        delete store[key];\n      }),\n      clear: vi.fn(() => {\n        Object.keys(store).forEach((key) => delete store[key]);\n      }),\n      key: vi.fn((index: number) => Object.keys(store)[index] || null),\n      length: Object.keys(store).length,\n    };\n\n    // Replace global localStorage\n    Object.defineProperty(window, \"localStorage\", {\n      value: mockStorage,\n      writable: true,\n    });\n\n    adapter = new LocalStorageAdapter();\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe(\"saveGame\", () => {\n    it(\"should save game to localStorage\", async () => {\n      const testGame: PersistedGameState = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date(),\n        lastUpdated: Date.now(),\n        winner: null,\n        version: 1,\n      };\n\n      const result = await adapter.saveGame(testGame);\n\n      expect(result.success).toBe(true);\n      expect(mockStorage.setItem).toHaveBeenCalledWith(\n        \"checkers_game_test-id\",\n        expect.any(String),\n      );\n    });\n\n    it(\"should handle serialization errors\", async () => {\n      const testGame: any = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date(),\n        lastSaved: new Date(),\n        winner: null,\n        version: 1,\n      };\n\n      // Add circular reference to cause serialization error\n      testGame.circular = testGame;\n\n      const result = await adapter.saveGame(testGame);\n\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe(\"loadGame\", () => {\n    it(\"should load game from localStorage\", async () => {\n      const testGame: PersistedGameState = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date(),\n        lastUpdated: Date.now(),\n        winner: null,\n        version: 1,\n      };\n\n      await adapter.saveGame(testGame);\n      const result = await adapter.loadGame(\"test-id\");\n\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe(\"test-id\");\n      expect(result.data?.currentPlayer).toBe(\"red\");\n      expect(result.data?.moveCount).toBe(10);\n    });\n\n    it(\"should return null if no game exists\", async () => {\n      const result = await adapter.loadGame(\"nonexistent\");\n\n      expect(result.success).toBe(true);\n      expect(result.data).toBeNull();\n      expect(mockStorage.getItem).toHaveBeenCalledWith(\n        \"checkers_game_nonexistent\",\n      );\n    });\n\n    it(\"should handle corrupted data gracefully\", async () => {\n      // Set corrupted data directly\n      mockStorage.setItem(\"checkers_game_test-id\", \"invalid json\");\n\n      const result = await adapter.loadGame(\"test-id\");\n\n      // Corrupted data should return an error\n      expect(result.success).toBe(false);\n      expect(result.error?.code).toBe(\"INVALID_DATA\");\n    });\n\n    it(\"should handle partial data\", async () => {\n      const partialData = {\n        id: \"test-id\",\n        currentPlayer: \"red\",\n        // Missing required fields\n      };\n\n      mockStorage.setItem(\"checkers_game_test-id\", JSON.stringify(partialData));\n\n      const result = await adapter.loadGame(\"test-id\");\n\n      // Partial data will still parse but might not have all fields\n      // The adapter doesn't validate schema, just parses JSON\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe(\"test-id\");\n    });\n  });\n\n  describe(\"deleteGame\", () => {\n    it(\"should remove game from localStorage\", async () => {\n      const testGame: PersistedGameState = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date(),\n        lastUpdated: Date.now(),\n        winner: null,\n        version: 1,\n      };\n\n      await adapter.saveGame(testGame);\n      const result = await adapter.deleteGame(\"test-id\");\n\n      expect(result.success).toBe(true);\n      expect(mockStorage.removeItem).toHaveBeenCalledWith(\n        \"checkers_game_test-id\",\n      );\n    });\n\n    it(\"should return true even if no game exists\", async () => {\n      const result = await adapter.deleteGame(\"nonexistent\");\n\n      expect(result.success).toBe(true);\n      expect(mockStorage.removeItem).toHaveBeenCalledWith(\n        \"checkers_game_nonexistent\",\n      );\n    });\n  });\n\n  describe(\"listGames\", () => {\n    it(\"should return array with single game if exists\", async () => {\n      const testGame: PersistedGameState = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date(),\n        lastUpdated: Date.now(),\n        winner: null,\n        version: 1,\n      };\n\n      await adapter.saveGame(testGame);\n      const result = await adapter.listGames();\n\n      expect(result.success).toBe(true);\n      expect(result.data).toHaveLength(1);\n      expect(result.data?.[0]).toMatchObject({\n        id: \"test-id\",\n        moveCount: 10,\n        gameMode: \"ai\",\n        currentPlayer: \"red\",\n      });\n    });\n\n    it(\"should return empty array if no games\", async () => {\n      const result = await adapter.listGames();\n\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual([]);\n    });\n  });\n\n  describe(\"clearAll\", () => {\n    it(\"should clear all games\", async () => {\n      const testGame: PersistedGameState = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date(),\n        lastUpdated: Date.now(),\n        winner: null,\n        version: 1,\n      };\n\n      await adapter.saveGame(testGame);\n\n      // Mock Object.keys to return checkers keys\n      const originalKeys = Object.keys;\n      Object.keys = vi\n        .fn()\n        .mockReturnValue([\"checkers_game_test-id\", \"checkers_games_list\"]);\n\n      const result = await adapter.clearAll();\n\n      expect(result.success).toBe(true);\n      expect(mockStorage.removeItem).toHaveBeenCalledWith(\n        \"checkers_game_test-id\",\n      );\n\n      // Restore original Object.keys\n      Object.keys = originalKeys;\n    });\n\n    it(\"should handle errors gracefully\", async () => {\n      // Mock Object.keys to throw an error\n      const originalKeys = Object.keys;\n      Object.keys = vi.fn().mockImplementation(() => {\n        throw new Error(\"Storage error\");\n      });\n\n      const result = await adapter.clearAll();\n\n      expect(result.success).toBe(false);\n\n      // Restore original Object.keys\n      Object.keys = originalKeys;\n    });\n  });\n\n  describe(\"migration and versioning\", () => {\n    it(\"should handle games with different versions\", async () => {\n      const oldVersionGame = {\n        id: \"test-id\",\n        board: Array(8)\n          .fill(null)\n          .map(() => Array(8).fill(null)),\n        currentPlayer: \"red\",\n        moveCount: 10,\n        moveHistory: [],\n        gameMode: \"ai\",\n        gameStartTime: new Date().toISOString(),\n        lastSaved: new Date().toISOString(),\n        winner: null,\n        version: 0, // Old version\n      };\n\n      mockStorage.setItem(\n        \"checkers_game_test-id\",\n        JSON.stringify(oldVersionGame),\n      );\n\n      const result = await adapter.loadGame(\"test-id\");\n\n      // Should still load but might need migration\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe(\"test-id\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/local-storage.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":164,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":169,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6162,6165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6162,6165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":235,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":235,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":235,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":236,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":236,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .board on an `any` value.","line":236,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":237,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":237,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .currentPlayer on an `any` value.","line":237,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":238,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":238,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveCount on an `any` value.","line":238,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":238,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":239,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":239,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .moveHistory on an `any` value.","line":239,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":240,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":240,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameMode on an `any` value.","line":240,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":240,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":241,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":241,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameStartTime on an `any` value.","line":241,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":242,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":242,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastSaved on an `any` value.","line":242,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":243,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":243,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .winner on an `any` value.","line":243,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":33}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  type GameStorageAdapter,\n  type PersistedGameState,\n  type GameSummary,\n  type StorageResult,\n  type StorageConfig,\n  DEFAULT_GAME_ID,\n  STORAGE_VERSION,\n} from \"./types\";\n\nconst STORAGE_PREFIX = \"checkers_\";\nconst GAMES_LIST_KEY = `${STORAGE_PREFIX}games_list`;\nconst GAME_KEY_PREFIX = `${STORAGE_PREFIX}game_`;\n\nexport class LocalStorageAdapter implements GameStorageAdapter {\n  private autoSaveTimer: NodeJS.Timeout | null = null;\n  private config: Required<StorageConfig>;\n\n  constructor(config: StorageConfig = {}) {\n    this.config = {\n      autoSaveInterval: config.autoSaveInterval ?? 5000,\n      maxSavedGames: config.maxSavedGames ?? 10,\n      compressionEnabled: config.compressionEnabled ?? false,\n      syncEnabled: config.syncEnabled ?? false,\n    };\n  }\n\n  async saveGame(gameState: PersistedGameState): Promise<StorageResult<void>> {\n    try {\n      const key = `${GAME_KEY_PREFIX}${gameState.id}`;\n      const serialized = JSON.stringify(gameState);\n\n      localStorage.setItem(key, serialized);\n\n      // Update games list\n      await this.updateGamesList(gameState);\n\n      return { success: true, data: undefined };\n    } catch (error) {\n      if (\n        error instanceof DOMException &&\n        error.name === \"QuotaExceededError\"\n      ) {\n        return {\n          success: false,\n          error: {\n            code: \"QUOTA_EXCEEDED\",\n            message:\n              \"Local storage quota exceeded. Please clear some saved games.\",\n            originalError: error,\n          },\n        };\n      }\n\n      return {\n        success: false,\n        error: {\n          code: \"UNKNOWN\",\n          message: \"Failed to save game\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async loadGame(\n    gameId: string = DEFAULT_GAME_ID,\n  ): Promise<StorageResult<PersistedGameState | null>> {\n    try {\n      const key = `${GAME_KEY_PREFIX}${gameId}`;\n      const serialized = localStorage.getItem(key);\n\n      if (!serialized) {\n        return { success: true, data: null };\n      }\n\n      const gameState = JSON.parse(serialized) as PersistedGameState;\n\n      // Version migration if needed\n      if (gameState.version !== STORAGE_VERSION) {\n        const migrated = this.migrateGameState(gameState);\n        if (migrated) {\n          await this.saveGame(migrated);\n          return { success: true, data: migrated };\n        }\n      }\n\n      return { success: true, data: gameState };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"INVALID_DATA\",\n          message: \"Failed to load game. Data may be corrupted.\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async deleteGame(\n    gameId: string = DEFAULT_GAME_ID,\n  ): Promise<StorageResult<void>> {\n    try {\n      const key = `${GAME_KEY_PREFIX}${gameId}`;\n      localStorage.removeItem(key);\n\n      // Update games list\n      const listResult = await this.listGames();\n      if (listResult.success) {\n        const updatedList = listResult.data.filter((g) => g.id !== gameId);\n        localStorage.setItem(GAMES_LIST_KEY, JSON.stringify(updatedList));\n      }\n\n      return { success: true, data: undefined };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"UNKNOWN\",\n          message: \"Failed to delete game\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async listGames(): Promise<StorageResult<GameSummary[]>> {\n    try {\n      const serialized = localStorage.getItem(GAMES_LIST_KEY);\n\n      if (!serialized) {\n        return { success: true, data: [] };\n      }\n\n      const games = JSON.parse(serialized) as GameSummary[];\n\n      // Sort by last saved, newest first\n      games.sort(\n        (a, b) =>\n          new Date(b.lastSaved).getTime() - new Date(a.lastSaved).getTime(),\n      );\n\n      return { success: true, data: games };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"INVALID_DATA\",\n          message: \"Failed to load games list\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  async autoSave(gameState: PersistedGameState): Promise<void> {\n    // Clear existing timer\n    if (this.autoSaveTimer) {\n      clearTimeout(this.autoSaveTimer);\n    }\n\n    // Set new timer\n    this.autoSaveTimer = setTimeout(async () => {\n      await this.saveGame({\n        ...gameState,\n        lastSaved: new Date().toISOString(),\n      });\n    }, this.config.autoSaveInterval);\n  }\n\n  async clearAll(): Promise<StorageResult<void>> {\n    try {\n      const keys = Object.keys(localStorage);\n\n      // Remove all checkers-related keys\n      for (const key of keys) {\n        if (key.startsWith(STORAGE_PREFIX)) {\n          localStorage.removeItem(key);\n        }\n      }\n\n      return { success: true, data: undefined };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: \"UNKNOWN\",\n          message: \"Failed to clear storage\",\n          originalError: error,\n        },\n      };\n    }\n  }\n\n  private async updateGamesList(gameState: PersistedGameState): Promise<void> {\n    const listResult = await this.listGames();\n    const games = listResult.success ? listResult.data : [];\n\n    const summary: GameSummary = {\n      id: gameState.id,\n      moveCount: gameState.moveCount,\n      gameMode: gameState.gameMode,\n      currentPlayer: gameState.currentPlayer,\n      gameStartTime: gameState.gameStartTime,\n      lastSaved: gameState.lastSaved,\n      winner: gameState.winner,\n    };\n\n    // Update or add the game summary\n    const existingIndex = games.findIndex((g) => g.id === gameState.id);\n    if (existingIndex >= 0) {\n      games[existingIndex] = summary;\n    } else {\n      games.unshift(summary);\n    }\n\n    // Enforce max saved games limit\n    if (games.length > this.config.maxSavedGames) {\n      const toDelete = games.splice(this.config.maxSavedGames);\n      for (const game of toDelete) {\n        const key = `${GAME_KEY_PREFIX}${game.id}`;\n        localStorage.removeItem(key);\n      }\n    }\n\n    localStorage.setItem(GAMES_LIST_KEY, JSON.stringify(games));\n  }\n\n  private migrateGameState(gameState: any): PersistedGameState | null {\n    // Handle version migrations here\n    // For now, just ensure all required fields exist\n    try {\n      return {\n        id: gameState.id ?? DEFAULT_GAME_ID,\n        board: gameState.board,\n        currentPlayer: gameState.currentPlayer ?? \"red\",\n        moveCount: gameState.moveCount ?? 0,\n        moveHistory: gameState.moveHistory ?? [],\n        gameMode: gameState.gameMode ?? \"ai\",\n        gameStartTime: gameState.gameStartTime ?? new Date().toISOString(),\n        lastSaved: gameState.lastSaved ?? new Date().toISOString(),\n        winner: gameState.winner ?? null,\n        version: STORAGE_VERSION,\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  // Cleanup method\n  destroy(): void {\n    if (this.autoSaveTimer) {\n      clearTimeout(this.autoSaveTimer);\n      this.autoSaveTimer = null;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/storage/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/types/move-analysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/root.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/routers/auth.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1010,1013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1010,1013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":44,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":97,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":100,"column":9,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":100,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `MockInstance<Procedure>`.","line":292,"column":9,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":292,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":292,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9170,9173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9170,9173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":324,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":326,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":325,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":325,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":349,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":349,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":350,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":350,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .data on an `any` value.","line":350,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":350,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":351,"column":61,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":351,"endColumn":75}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from \"vitest\";\nimport { TRPCError } from \"@trpc/server\";\nimport bcrypt from \"bcryptjs\";\nimport {\n  createMockUser,\n  createMockPrismaClient,\n  createMockResendClient,\n} from \"~/test/auth-utils\";\n\n// Create mocks before module mocking\nconst mockDb = createMockPrismaClient();\nconst mockResend = createMockResendClient();\n\n// Mock modules\nvi.mock(\"~/server/db\", () => ({\n  db: mockDb,\n}));\n\nvi.mock(\"~/server/auth\", () => ({\n  getServerAuthSession: vi.fn(),\n}));\n\nvi.mock(\"resend\", () => ({\n  Resend: vi.fn(() => mockResend),\n}));\n\nvi.mock(\"~/env\", () => ({\n  env: {\n    RESEND_API_KEY: \"test-resend-key\",\n    RESEND_FROM_EMAIL: \"noreply@example.com\",\n    NEXTAUTH_URL: \"http://localhost:3000\",\n  },\n}));\n\n// Import after mocking\nimport { authRouter } from \"./auth\";\nimport { createCallerFactory } from \"~/server/api/trpc\";\n\ndescribe(\"Auth Router\", () => {\n  const createCaller = createCallerFactory(authRouter);\n\n  const createMockContext = (session?: any) => ({\n    db: mockDb,\n    session,\n    headers: new Headers(),\n  });\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe(\"register\", () => {\n    const validInput = {\n      email: \"newuser@example.com\",\n      password: \"ValidPass123!\",\n      username: \"newuser\",\n      name: \"New User\",\n    };\n\n    it(\"should successfully register a new user\", async () => {\n      mockDb.user.findFirst.mockResolvedValue(null);\n      mockDb.user.create.mockResolvedValue(\n        createMockUser({\n          id: \"new-user-id\",\n          ...validInput,\n        }),\n      );\n\n      const caller = createCaller(createMockContext());\n      const result = await caller.register(validInput);\n\n      expect(result).toEqual({\n        success: true,\n        userId: \"new-user-id\",\n      });\n      expect(mockDb.user.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          email: validInput.email,\n          username: validInput.username,\n          name: validInput.name,\n        }),\n      });\n    });\n\n    it(\"should hash the password before saving\", async () => {\n      mockDb.user.findFirst.mockResolvedValue(null);\n      mockDb.user.create.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext());\n      await caller.register(validInput);\n\n      const createCall = mockDb.user.create.mock.calls[0][0];\n      const hashedPassword = createCall.data.password;\n      const isValidHash = await bcrypt.compare(\n        validInput.password,\n        hashedPassword,\n      );\n\n      expect(isValidHash).toBe(true);\n    });\n\n    it(\"should throw error when email already exists\", async () => {\n      mockDb.user.findFirst.mockResolvedValue(\n        createMockUser({\n          email: validInput.email,\n        }),\n      );\n\n      const caller = createCaller(createMockContext());\n\n      await expect(caller.register(validInput)).rejects.toThrow(TRPCError);\n      await expect(caller.register(validInput)).rejects.toMatchObject({\n        code: \"CONFLICT\",\n        message: \"Email already in use\",\n      });\n    });\n\n    it(\"should throw error when username already exists\", async () => {\n      mockDb.user.findFirst.mockResolvedValue(\n        createMockUser({\n          username: validInput.username,\n          email: \"other@example.com\",\n        }),\n      );\n\n      const caller = createCaller(createMockContext());\n\n      await expect(caller.register(validInput)).rejects.toThrow(TRPCError);\n      await expect(caller.register(validInput)).rejects.toMatchObject({\n        code: \"CONFLICT\",\n        message: \"Username already taken\",\n      });\n    });\n\n    it(\"should validate password length\", async () => {\n      const invalidInput = { ...validInput, password: \"short\" };\n\n      const caller = createCaller(createMockContext());\n      await expect(caller.register(invalidInput)).rejects.toThrow();\n    });\n\n    it(\"should validate email format\", async () => {\n      const invalidInput = { ...validInput, email: \"notanemail\" };\n\n      const caller = createCaller(createMockContext());\n      await expect(caller.register(invalidInput)).rejects.toThrow();\n    });\n\n    it(\"should validate username format\", async () => {\n      const invalidInput = { ...validInput, username: \"user@name\" };\n\n      const caller = createCaller(createMockContext());\n      await expect(caller.register(invalidInput)).rejects.toThrow();\n    });\n  });\n\n  describe(\"setUsername\", () => {\n    const mockSession = {\n      user: { id: \"user-123\", email: \"test@example.com\", name: \"Test User\" },\n      expires: new Date().toISOString(),\n    };\n\n    it(\"should successfully set username for authenticated user\", async () => {\n      mockDb.user.findUnique.mockResolvedValue(null);\n      mockDb.user.update.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext(mockSession));\n      const result = await caller.setUsername({ username: \"newusername\" });\n\n      expect(result).toEqual({ success: true });\n      expect(mockDb.user.update).toHaveBeenCalledWith({\n        where: { id: \"user-123\" },\n        data: { username: \"newusername\" },\n      });\n    });\n\n    it(\"should throw error when username is taken\", async () => {\n      mockDb.user.findUnique.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext(mockSession));\n\n      await expect(caller.setUsername({ username: \"taken\" })).rejects.toThrow(\n        TRPCError,\n      );\n      await expect(\n        caller.setUsername({ username: \"taken\" }),\n      ).rejects.toMatchObject({\n        code: \"CONFLICT\",\n        message: \"Username already taken\",\n      });\n    });\n\n    it(\"should throw error when not authenticated\", async () => {\n      const caller = createCaller(createMockContext());\n\n      await expect(\n        caller.setUsername({ username: \"newusername\" }),\n      ).rejects.toThrow(TRPCError);\n      await expect(\n        caller.setUsername({ username: \"newusername\" }),\n      ).rejects.toMatchObject({\n        code: \"UNAUTHORIZED\",\n      });\n    });\n  });\n\n  describe(\"checkUsername\", () => {\n    it(\"should return available when username does not exist\", async () => {\n      mockDb.user.findUnique.mockResolvedValue(null);\n\n      const caller = createCaller(createMockContext());\n      const result = await caller.checkUsername({ username: \"available\" });\n\n      expect(result).toEqual({ available: true });\n    });\n\n    it(\"should return unavailable when username exists\", async () => {\n      mockDb.user.findUnique.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext());\n      const result = await caller.checkUsername({ username: \"taken\" });\n\n      expect(result).toEqual({ available: false });\n    });\n  });\n\n  describe(\"requestPasswordReset\", () => {\n    it(\"should create reset token and send email for existing user\", async () => {\n      const mockUser = createMockUser({ id: \"user-123\" });\n      mockDb.user.findUnique.mockResolvedValue(mockUser);\n      mockDb.passwordResetToken.deleteMany.mockResolvedValue({ count: 0 });\n      mockDb.passwordResetToken.create.mockResolvedValue({\n        id: \"token-123\",\n        token: \"reset-token-123\",\n        userId: \"user-123\",\n        expires: new Date(),\n      });\n\n      const caller = createCaller(createMockContext());\n      const result = await caller.requestPasswordReset({\n        email: mockUser.email!,\n      });\n\n      expect(result).toEqual({ success: true });\n      expect(mockDb.passwordResetToken.deleteMany).toHaveBeenCalledWith({\n        where: { userId: \"user-123\" },\n      });\n      expect(mockDb.passwordResetToken.create).toHaveBeenCalled();\n      expect(mockResend.emails.send).toHaveBeenCalledWith(\n        expect.objectContaining({\n          to: mockUser.email,\n          subject: \"Password Reset Request\",\n        }),\n      );\n    });\n\n    it(\"should return success even when user does not exist\", async () => {\n      mockDb.user.findUnique.mockResolvedValue(null);\n\n      const caller = createCaller(createMockContext());\n      const result = await caller.requestPasswordReset({\n        email: \"nonexistent@example.com\",\n      });\n\n      expect(result).toEqual({ success: true });\n      expect(mockDb.passwordResetToken.create).not.toHaveBeenCalled();\n      expect(mockResend.emails.send).not.toHaveBeenCalled();\n    });\n\n    it(\"should delete existing tokens before creating new one\", async () => {\n      const mockUser = createMockUser({ id: \"user-123\" });\n      mockDb.user.findUnique.mockResolvedValue(mockUser);\n      mockDb.passwordResetToken.deleteMany.mockResolvedValue({ count: 2 });\n      mockDb.passwordResetToken.create.mockResolvedValue({\n        id: \"token-123\",\n        token: \"reset-token-123\",\n        userId: \"user-123\",\n        expires: new Date(),\n      });\n\n      const caller = createCaller(createMockContext());\n      await caller.requestPasswordReset({ email: mockUser.email! });\n\n      expect(mockDb.passwordResetToken.deleteMany).toHaveBeenCalledWith({\n        where: { userId: \"user-123\" },\n      });\n      expect(mockDb.passwordResetToken.deleteMany).toHaveBeenCalledBefore(\n        mockDb.passwordResetToken.create as any,\n      );\n    });\n  });\n\n  describe(\"resetPassword\", () => {\n    const validToken = \"valid-reset-token\";\n    const newPassword = \"NewPassword123!\";\n\n    it(\"should successfully reset password with valid token\", async () => {\n      const futureDate = new Date(Date.now() + 3600000);\n      const mockToken = {\n        id: \"token-123\",\n        token: validToken,\n        userId: \"user-123\",\n        expires: futureDate,\n        user: createMockUser(),\n      };\n\n      mockDb.passwordResetToken.findUnique.mockResolvedValue(mockToken);\n      mockDb.user.update.mockResolvedValue(createMockUser());\n      mockDb.passwordResetToken.delete.mockResolvedValue(mockToken);\n\n      const caller = createCaller(createMockContext());\n      const result = await caller.resetPassword({\n        token: validToken,\n        password: newPassword,\n      });\n\n      expect(result).toEqual({ success: true });\n      expect(mockDb.user.update).toHaveBeenCalledWith({\n        where: { id: \"user-123\" },\n        data: expect.objectContaining({\n          password: expect.any(String),\n        }),\n      });\n      expect(mockDb.passwordResetToken.delete).toHaveBeenCalledWith({\n        where: { id: \"token-123\" },\n      });\n    });\n\n    it(\"should hash the new password\", async () => {\n      const futureDate = new Date(Date.now() + 3600000);\n      const mockToken = {\n        id: \"token-123\",\n        token: validToken,\n        userId: \"user-123\",\n        expires: futureDate,\n        user: createMockUser(),\n      };\n\n      mockDb.passwordResetToken.findUnique.mockResolvedValue(mockToken);\n      mockDb.user.update.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext());\n      await caller.resetPassword({ token: validToken, password: newPassword });\n\n      const updateCall = mockDb.user.update.mock.calls[0][0];\n      const hashedPassword = updateCall.data.password;\n      const isValidHash = await bcrypt.compare(newPassword, hashedPassword);\n\n      expect(isValidHash).toBe(true);\n    });\n\n    it(\"should throw error for invalid token\", async () => {\n      mockDb.passwordResetToken.findUnique.mockResolvedValue(null);\n\n      const caller = createCaller(createMockContext());\n\n      await expect(\n        caller.resetPassword({ token: \"invalid\", password: newPassword }),\n      ).rejects.toThrow(TRPCError);\n      await expect(\n        caller.resetPassword({ token: \"invalid\", password: newPassword }),\n      ).rejects.toMatchObject({\n        code: \"NOT_FOUND\",\n        message: \"Invalid or expired token\",\n      });\n    });\n\n    it(\"should throw error for expired token\", async () => {\n      const pastDate = new Date(Date.now() - 3600000);\n      const mockToken = {\n        id: \"token-123\",\n        token: validToken,\n        userId: \"user-123\",\n        expires: pastDate,\n        user: createMockUser(),\n      };\n\n      mockDb.passwordResetToken.findUnique.mockResolvedValue(mockToken);\n      mockDb.passwordResetToken.delete.mockResolvedValue(mockToken);\n\n      const caller = createCaller(createMockContext());\n\n      await expect(\n        caller.resetPassword({ token: validToken, password: newPassword }),\n      ).rejects.toThrow(TRPCError);\n      await expect(\n        caller.resetPassword({ token: validToken, password: newPassword }),\n      ).rejects.toMatchObject({\n        code: \"BAD_REQUEST\",\n        message: \"Token has expired\",\n      });\n      expect(mockDb.passwordResetToken.delete).toHaveBeenCalledWith({\n        where: { id: \"token-123\" },\n      });\n    });\n  });\n\n  describe(\"updateProfile\", () => {\n    const mockSession = {\n      user: { id: \"user-123\", email: \"test@example.com\", name: \"Test User\" },\n      expires: new Date().toISOString(),\n    };\n\n    it(\"should successfully update profile for authenticated user\", async () => {\n      mockDb.user.update.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext(mockSession));\n      const result = await caller.updateProfile({\n        name: \"Updated Name\",\n        image: \"https://example.com/image.jpg\",\n      });\n\n      expect(result).toEqual({ success: true });\n      expect(mockDb.user.update).toHaveBeenCalledWith({\n        where: { id: \"user-123\" },\n        data: {\n          name: \"Updated Name\",\n          image: \"https://example.com/image.jpg\",\n        },\n      });\n    });\n\n    it(\"should allow partial updates\", async () => {\n      mockDb.user.update.mockResolvedValue(createMockUser());\n\n      const caller = createCaller(createMockContext(mockSession));\n      const result = await caller.updateProfile({ name: \"Only Name\" });\n\n      expect(result).toEqual({ success: true });\n      expect(mockDb.user.update).toHaveBeenCalledWith({\n        where: { id: \"user-123\" },\n        data: { name: \"Only Name\" },\n      });\n    });\n\n    it(\"should throw error when not authenticated\", async () => {\n      const caller = createCaller(createMockContext());\n\n      await expect(caller.updateProfile({ name: \"New Name\" })).rejects.toThrow(\n        TRPCError,\n      );\n      await expect(\n        caller.updateProfile({ name: \"New Name\" }),\n      ).rejects.toMatchObject({\n        code: \"UNAUTHORIZED\",\n      });\n    });\n\n    it(\"should validate image URL format\", async () => {\n      const caller = createCaller(createMockContext(mockSession));\n\n      await expect(\n        caller.updateProfile({ image: \"not-a-url\" }),\n      ).rejects.toThrow();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/routers/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/routers/game.ts","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'GameVariantSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'PlayModeSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":78,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":78,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2473,2475],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":79,"column":21,"nodeType":"AwaitExpression","messageId":"await","endLine":79,"endColumn":69,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2508,2513],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3401,3404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3401,3404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":139,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":139,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4568,4570],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":140,"column":21,"nodeType":"AwaitExpression","messageId":"await","endLine":140,"endColumn":69,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4603,4608],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":143,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":164,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5499,5502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5499,5502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":203,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":203,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":213,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":213,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":223,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":223,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":233,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":233,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":238,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":238,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":243,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":243,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":244,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":244,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":293,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8630,8633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8630,8633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .player1Id on an `any` value.","line":304,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .player2Id on an `any` value.","line":310,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":310,"endColumn":31},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'game' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":314,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":316,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":316,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":369,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":369,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":372,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":374,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10897,10900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10897,10900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameConfig on an `any` value.","line":372,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":372,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":373,"column":22,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":373,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":373,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10943,10946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10943,10946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameConfig on an `any` value.","line":373,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":373,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .boardVariant on an `any` value.","line":388,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":388,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":389,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":389,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .boardConfig on an `any` value.","line":389,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":389,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .playerColor on an `any` value.","line":390,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .aiDifficulty on an `any` value.","line":391,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timeControl on an `any` value.","line":397,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":497,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":497,"endColumn":38}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  protectedProcedure,\n} from \"~/server/api/trpc\";\nimport {\n  type Board,\n  type Move,\n  createInitialBoard,\n  makeMove,\n} from \"~/lib/game/logic\";\nimport type { BoardVariant } from \"~/lib/game/variants\";\nimport { GameConfigLoader } from \"~/lib/game-engine/config-loader\";\nimport type { TimeControl } from \"~/lib/game/time-control-types\";\nimport { STORAGE_VERSION } from \"~/lib/storage/types\";\nimport { gameSessionManager } from \"~/lib/multi-tab/session-manager\";\nimport type {\n  InitialStatePayload,\n  MoveAppliedPayload,\n} from \"~/lib/multi-tab/types\";\n\nconst BoardSchema = z.array(\n  z.array(\n    z.union([\n      z.object({\n        color: z.enum([\"red\", \"black\"]),\n        type: z.enum([\"regular\", \"king\"]),\n      }),\n      z.null(),\n    ]),\n  ),\n);\n\nconst MoveSchema = z.object({\n  from: z.object({ row: z.number(), col: z.number() }),\n  to: z.object({ row: z.number(), col: z.number() }),\n  captures: z.array(z.object({ row: z.number(), col: z.number() })).optional(),\n});\n\n// Basic schemas for current functionality\nconst GameVariantSchema = z.enum([\"american\", \"brazilian\", \"international\"]);\nconst PlayModeSchema = z.enum([\"casual\", \"tournament\"]);\n\nexport const gameRouter = createTRPCRouter({\n  create: publicProcedure\n    .input(\n      z.object({\n        mode: z.enum([\"ai\", \"local\", \"online\"]),\n        playerName: z.string().optional(),\n        boardVariant: z\n          .enum([\"american\", \"brazilian\", \"international\", \"canadian\"])\n          .optional(),\n        playerColor: z.enum([\"red\", \"black\"]).optional(),\n        aiDifficulty: z.enum([\"easy\", \"medium\", \"hard\", \"expert\"]).optional(),\n        timeControl: z\n          .object({\n            format: z.enum([\"X|Y\", \"X+Y\"]),\n            initialMinutes: z.number(),\n            incrementSeconds: z.number(),\n            preset: z\n              .enum([\"bullet\", \"blitz\", \"rapid\", \"classical\", \"custom\"])\n              .optional(),\n          })\n          .nullable()\n          .optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Generate a simple 6-character game code\n      const gameCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n\n      // If user is authenticated, set them as player1\n      const player1Id = ctx.session?.user?.id ?? null;\n\n      // Get the rules configuration based on the variant\n      const boardVariant = input.boardVariant || \"american\";\n      const rules = await GameConfigLoader.loadVariant(boardVariant);\n\n      const game = await ctx.db.game.create({\n        data: {\n          board: JSON.stringify(createInitialBoard(rules)),\n          currentPlayer: \"red\",\n          gameMode: input.mode,\n          moveCount: 0,\n          version: STORAGE_VERSION,\n          player1Id: player1Id, // Set authenticated user as player 1\n          player2Id:\n            input.mode === \"ai\" || input.mode === \"local\" ? player1Id : null, // For AI/local, both players are the same user\n          gameConfig: JSON.stringify({\n            boardVariant,\n            rules,\n            playerColor: input.playerColor ?? \"red\",\n            aiDifficulty: input.aiDifficulty ?? null,\n            timeControl: input.timeControl ?? null,\n          }),\n          timeControl: input.timeControl\n            ? JSON.stringify(input.timeControl)\n            : null,\n        } as any,\n      });\n\n      return {\n        id: game.id,\n        gameCode,\n        success: true,\n      };\n    }),\n\n  createWithAuth: protectedProcedure\n    .input(\n      z.object({\n        mode: z.enum([\"ai\", \"local\", \"online\"]),\n        playerName: z.string().optional(),\n        boardVariant: z\n          .enum([\"american\", \"brazilian\", \"international\", \"canadian\"])\n          .optional(),\n        playerColor: z.enum([\"red\", \"black\"]).optional(),\n        aiDifficulty: z.enum([\"easy\", \"medium\", \"hard\", \"expert\"]).optional(),\n        timeControl: z\n          .object({\n            format: z.enum([\"X|Y\", \"X+Y\"]),\n            initialMinutes: z.number(),\n            incrementSeconds: z.number(),\n            preset: z\n              .enum([\"bullet\", \"blitz\", \"rapid\", \"classical\", \"custom\"])\n              .optional(),\n          })\n          .nullable()\n          .optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Generate a simple 6-character game code\n      const gameCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n\n      // Get the rules configuration based on the variant\n      const boardVariant = input.boardVariant || \"american\";\n      const rules = await GameConfigLoader.loadVariant(boardVariant);\n\n      const game = await ctx.db.game.create({\n        data: {\n          board: JSON.stringify(createInitialBoard(rules)),\n          currentPlayer: \"red\",\n          gameMode: input.mode,\n          moveCount: 0,\n          version: STORAGE_VERSION,\n          player1Id: ctx.session.user.id, // Authenticated user is always player 1\n          player2Id:\n            input.mode === \"ai\" || input.mode === \"local\"\n              ? ctx.session.user.id\n              : null,\n          gameConfig: JSON.stringify({\n            boardVariant,\n            rules,\n            playerColor: input.playerColor ?? \"red\",\n            aiDifficulty: input.aiDifficulty ?? null,\n            timeControl: input.timeControl ?? null,\n          }),\n          timeControl: input.timeControl\n            ? JSON.stringify(input.timeControl)\n            : null,\n        } as any,\n      });\n\n      return {\n        id: game.id,\n        gameCode,\n        success: true,\n      };\n    }),\n\n  getById: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const game = await ctx.db.game.findUnique({\n        where: { id: input.id },\n        include: {\n          moves: {\n            orderBy: {\n              moveIndex: \"asc\",\n            },\n          },\n        },\n      });\n\n      if (!game) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Game not found\",\n        });\n      }\n\n      // Parse the game configuration\n      let gameConfig = null;\n      if (game.gameConfig) {\n        try {\n          gameConfig = JSON.parse(game.gameConfig);\n        } catch (e) {\n          console.error(\"Failed to parse gameConfig:\", e);\n        }\n      }\n\n      // Parse the board\n      let board = null;\n      if (game.board) {\n        try {\n          board = JSON.parse(game.board);\n        } catch (e) {\n          console.error(\"Failed to parse board:\", e);\n        }\n      }\n\n      // Parse time control if present\n      let timeControl = null;\n      if (game.timeControl) {\n        try {\n          timeControl = JSON.parse(game.timeControl);\n        } catch (e) {\n          console.error(\"Failed to parse timeControl:\", e);\n        }\n      }\n\n      // Transform moves to the expected format\n      const moves = game.moves.map((move) => ({\n        from: { row: move.fromRow, col: move.fromCol },\n        to: { row: move.toRow, col: move.toCol },\n        captures: move.captures ? JSON.parse(move.captures) : undefined,\n      }));\n\n      return {\n        id: game.id,\n        board,\n        currentPlayer: game.currentPlayer,\n        moveCount: game.moveCount,\n        gameMode: game.gameMode,\n        winner: game.winner,\n        gameConfig,\n        timeControl,\n        moves,\n        gameStartTime: game.gameStartTime,\n        player1Id: game.player1Id,\n        player2Id: game.player2Id,\n      };\n    }),\n\n  join: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n        playerName: z.string().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const game = await ctx.db.game.findUnique({\n        where: { id: input.gameId },\n      });\n\n      if (!game) {\n        throw new Error(\"Game not found\");\n      }\n\n      return {\n        id: game.id,\n        success: true,\n      };\n    }),\n\n  save: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        board: BoardSchema,\n        currentPlayer: z.enum([\"red\", \"black\"]),\n        moveCount: z.number(),\n        gameMode: z.enum([\"ai\", \"local\", \"online\"]),\n        winner: z.enum([\"red\", \"black\", \"draw\"]).nullable(),\n        moves: z.array(MoveSchema).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // If user is authenticated and no players are set, update player IDs\n      const existingGame = await ctx.db.game.findUnique({\n        where: { id: input.id },\n        select: { player1Id: true, player2Id: true, gameMode: true },\n      });\n\n      const updateData: any = {\n        board: JSON.stringify(input.board),\n        currentPlayer: input.currentPlayer,\n        moveCount: input.moveCount,\n        gameMode: input.gameMode,\n        winner: input.winner,\n      };\n\n      // Set player IDs if not already set and user is authenticated\n      if (ctx.session?.user?.id && existingGame) {\n        if (!existingGame.player1Id) {\n          updateData.player1Id = ctx.session.user.id;\n        }\n        if (\n          !existingGame.player2Id &&\n          (existingGame.gameMode === \"ai\" || existingGame.gameMode === \"local\")\n        ) {\n          updateData.player2Id = ctx.session.user.id;\n        }\n      }\n\n      const game = await ctx.db.game.update({\n        where: { id: input.id },\n        data: updateData,\n      });\n\n      // Save moves if provided\n      if (input.moves && input.moves.length > 0) {\n        const existingMoveCount = await ctx.db.gameMove.count({\n          where: { gameId: input.id },\n        });\n\n        const newMoves = input.moves.slice(existingMoveCount);\n\n        if (newMoves.length > 0) {\n          await ctx.db.gameMove.createMany({\n            data: newMoves.map((move, index) => ({\n              gameId: input.id,\n              moveIndex: existingMoveCount + index,\n              fromRow: move.from.row,\n              fromCol: move.from.col,\n              toRow: move.to.row,\n              toCol: move.to.col,\n              captures: move.captures ? JSON.stringify(move.captures) : null,\n            })),\n          });\n        }\n      }\n\n      return { success: true };\n    }),\n\n  load: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const game = await ctx.db.game.findUnique({\n        where: { id: input.id },\n        include: {\n          moves: {\n            orderBy: { moveIndex: \"asc\" },\n          },\n        },\n      });\n\n      if (!game) {\n        return null;\n      }\n\n      const board = JSON.parse(game.board) as Board;\n      const moves: Move[] = game.moves.map((move) => ({\n        from: { row: move.fromRow, col: move.fromCol },\n        to: { row: move.toRow, col: move.toCol },\n        captures: move.captures ? JSON.parse(move.captures) : undefined,\n      }));\n\n      const storedConfig = (game as any).gameConfig\n        ? JSON.parse((game as any).gameConfig)\n        : null;\n      return {\n        id: game.id,\n        board,\n        currentPlayer: game.currentPlayer as \"red\" | \"black\",\n        moveCount: game.moveCount,\n        moveHistory: moves,\n        gameMode: game.gameMode as \"ai\" | \"local\" | \"online\",\n        gameStartTime: game.gameStartTime.toISOString(),\n        lastSaved: game.lastSaved.toISOString(),\n        winner: game.winner as (\"red\" | \"black\" | \"draw\") | null,\n        version: game.version,\n        settings: storedConfig\n          ? {\n              boardVariant: storedConfig.boardVariant as BoardVariant,\n              boardConfig: storedConfig.boardConfig,\n              playerColor: storedConfig.playerColor as \"red\" | \"black\",\n              aiDifficulty: storedConfig.aiDifficulty as\n                | \"easy\"\n                | \"medium\"\n                | \"hard\"\n                | \"expert\"\n                | null,\n              timeControl: storedConfig.timeControl as TimeControl | null,\n            }\n          : null,\n      };\n    }),\n\n  list: publicProcedure\n    .input(\n      z\n        .object({\n          limit: z.number().min(1).max(50).default(10),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      const games = await ctx.db.game.findMany({\n        take: input?.limit ?? 10,\n        orderBy: { lastSaved: \"desc\" },\n        select: {\n          id: true,\n          moveCount: true,\n          gameMode: true,\n          currentPlayer: true,\n          gameStartTime: true,\n          lastSaved: true,\n          winner: true,\n        },\n      });\n\n      return games.map((game) => ({\n        id: game.id,\n        moveCount: game.moveCount,\n        gameMode: game.gameMode as \"ai\" | \"local\" | \"online\",\n        currentPlayer: game.currentPlayer as \"red\" | \"black\",\n        gameStartTime: game.gameStartTime.toISOString(),\n        lastSaved: game.lastSaved.toISOString(),\n        winner: game.winner as (\"red\" | \"black\" | \"draw\") | null,\n      }));\n    }),\n\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      await ctx.db.game.delete({\n        where: { id: input.id },\n      });\n\n      return { success: true };\n    }),\n\n  deleteAll: publicProcedure.mutation(async ({ ctx }) => {\n    await ctx.db.game.deleteMany();\n    return { success: true };\n  }),\n\n  getGameWithMoves: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const game = await ctx.db.game.findUnique({\n        where: { id: input.gameId },\n        include: {\n          moves: {\n            orderBy: { moveIndex: \"asc\" },\n          },\n          player1: {\n            select: {\n              id: true,\n              username: true,\n              name: true,\n              image: true,\n            },\n          },\n          player2: {\n            select: {\n              id: true,\n              username: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      });\n\n      if (!game) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Game not found\",\n        });\n      }\n\n      return {\n        id: game.id,\n        board: JSON.parse(game.board),\n        currentPlayer: game.currentPlayer,\n        moveCount: game.moveCount,\n        gameMode: game.gameMode,\n        gameStartTime: game.gameStartTime,\n        lastSaved: game.lastSaved,\n        winner: game.winner,\n        player1Id: game.player1Id,\n        player2Id: game.player2Id,\n        player1: game.player1,\n        player2: game.player2,\n        moves: game.moves.map((move) => ({\n          moveIndex: move.moveIndex,\n          fromRow: move.fromRow,\n          fromCol: move.fromCol,\n          toRow: move.toRow,\n          toCol: move.toCol,\n          captures: move.captures,\n        })),\n      };\n    }),\n\n  // Multi-tab synchronization procedures\n  makeMove: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n        move: MoveSchema,\n        tabId: z.string(),\n        optimisticMoveId: z.string().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Validate tab is active for this game\n      const isActiveTab = gameSessionManager.isActiveTab(\n        input.gameId,\n        input.tabId,\n      );\n      if (!isActiveTab) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Only the active tab can make moves\",\n        });\n      }\n\n      // Get current game state\n      const game = await ctx.db.game.findUnique({\n        where: { id: input.gameId },\n      });\n\n      if (!game) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Game not found\",\n        });\n      }\n\n      const currentBoard = JSON.parse(game.board) as Board;\n\n      // Apply move with optimistic locking\n      try {\n        const newBoard = makeMove(currentBoard, input.move);\n        const newMoveCount = game.moveCount + 1;\n        const newCurrentPlayer = game.currentPlayer === \"red\" ? \"black\" : \"red\";\n\n        // Update game in database with version check for conflict detection\n        const updatedGame = await ctx.db.game.update({\n          where: {\n            id: input.gameId,\n            version: game.version, // Optimistic locking\n          },\n          data: {\n            board: JSON.stringify(newBoard),\n            currentPlayer: newCurrentPlayer,\n            moveCount: newMoveCount,\n            version: game.version + 1,\n          },\n        });\n\n        // Save the move\n        await ctx.db.gameMove.create({\n          data: {\n            gameId: input.gameId,\n            moveIndex: newMoveCount - 1,\n            fromRow: input.move.from.row,\n            fromCol: input.move.from.col,\n            toRow: input.move.to.row,\n            toCol: input.move.to.col,\n            captures: input.move.captures\n              ? JSON.stringify(input.move.captures)\n              : null,\n          },\n        });\n\n        // Create new game state payload\n        const newGameState: InitialStatePayload = {\n          board: newBoard,\n          currentPlayer: newCurrentPlayer,\n          moveCount: newMoveCount,\n          winner: null, // TODO: Check for winner\n          gameStartTime: game.gameStartTime.toISOString(),\n          version: updatedGame.version,\n        };\n\n        // Broadcast move to all tabs\n        gameSessionManager.broadcastToTabs(\n          input.gameId,\n          {\n            type: \"MOVE_APPLIED\",\n            payload: {\n              move: input.move,\n              newGameState,\n              optimisticMoveId: input.optimisticMoveId,\n            } as MoveAppliedPayload,\n            timestamp: new Date().toISOString(),\n            gameId: input.gameId,\n          },\n          input.tabId,\n        ); // Exclude the tab that made the move\n\n        return {\n          success: true,\n          gameState: newGameState,\n        };\n      } catch (error) {\n        // Handle version conflict (optimistic locking failure)\n        if (error instanceof Error && error.message.includes(\"version\")) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message:\n              \"Game state has been modified by another tab. Please retry.\",\n          });\n        }\n        throw error;\n      }\n    }),\n\n  requestTabActivation: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n        tabId: z.string(),\n      }),\n    )\n    .mutation(async ({ input }) => {\n      const success = gameSessionManager.setActiveTab(\n        input.gameId,\n        input.tabId,\n      );\n\n      if (success) {\n        // Broadcast active tab change\n        gameSessionManager.broadcastToTabs(input.gameId, {\n          type: \"ACTIVE_TAB_CHANGED\",\n          payload: { activeTabId: input.tabId },\n          timestamp: new Date().toISOString(),\n          gameId: input.gameId,\n        });\n      }\n\n      return { success };\n    }),\n\n  getTabStatus: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n        tabId: z.string(),\n      }),\n    )\n    .query(async ({ input }) => {\n      const gameSession = gameSessionManager.getSession(input.gameId);\n      if (!gameSession) {\n        return { isActive: true, totalTabs: 1 };\n      }\n\n      return {\n        isActive: gameSession.activeTabId === input.tabId,\n        totalTabs: gameSession.tabs.size,\n        activeTabId: gameSession.activeTabId,\n      };\n    }),\n\n  heartbeat: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n        tabId: z.string(),\n      }),\n    )\n    .mutation(async ({ input }) => {\n      gameSessionManager.updateTabHeartbeat(input.gameId, input.tabId);\n      return { success: true };\n    }),\n\n  // Get session stats for monitoring\n  getSessionStats: publicProcedure.query(async () => {\n    return gameSessionManager.getStats();\n  }),\n\n  // Sync offline moves when reconnecting\n  syncOfflineMoves: publicProcedure\n    .input(\n      z.object({\n        gameId: z.string(),\n        moves: z.array(MoveSchema),\n        tabId: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const successfulMoves: Move[] = [];\n      const failedMoves: Move[] = [];\n\n      // Get current game state\n      const game = await ctx.db.game.findUnique({\n        where: { id: input.gameId },\n      });\n\n      if (!game) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Game not found\",\n        });\n      }\n\n      let currentBoard = JSON.parse(game.board) as Board;\n      let currentPlayer = game.currentPlayer as \"red\" | \"black\";\n      let moveCount = game.moveCount;\n\n      // Process each offline move\n      for (const move of input.moves) {\n        try {\n          // Apply move\n          const newBoard = makeMove(currentBoard, move);\n          const newCurrentPlayer = currentPlayer === \"red\" ? \"black\" : \"red\";\n\n          // Update database\n          await ctx.db.game.update({\n            where: { id: input.gameId },\n            data: {\n              board: JSON.stringify(newBoard),\n              currentPlayer: newCurrentPlayer,\n              moveCount: moveCount + 1,\n              version: game.version + 1,\n            },\n          });\n\n          // Save move to history\n          await ctx.db.gameMove.create({\n            data: {\n              gameId: input.gameId,\n              moveIndex: moveCount,\n              fromRow: move.from.row,\n              fromCol: move.from.col,\n              toRow: move.to.row,\n              toCol: move.to.col,\n              captures: move.captures ? JSON.stringify(move.captures) : null,\n            },\n          });\n\n          // Update state for next iteration\n          currentBoard = newBoard;\n          currentPlayer = newCurrentPlayer;\n          moveCount++;\n          successfulMoves.push(move);\n        } catch (error) {\n          console.error(\"Failed to sync offline move:\", error);\n          failedMoves.push(move);\n        }\n      }\n\n      // Broadcast updated state to all tabs\n      const newGameState: InitialStatePayload = {\n        board: currentBoard,\n        currentPlayer,\n        moveCount,\n        winner: null, // TODO: Check for winner\n        gameStartTime: game.gameStartTime.toISOString(),\n        version: game.version + successfulMoves.length,\n      };\n\n      gameSessionManager.broadcastToTabs(input.gameId, {\n        type: \"INITIAL_STATE\",\n        payload: newGameState,\n        timestamp: new Date().toISOString(),\n        gameId: input.gameId,\n      });\n\n      return {\n        success: true,\n        syncedMoves: successfulMoves.length,\n        failedMoves: failedMoves.length,\n        gameState: newGameState,\n      };\n    }),\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/routers/message.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/routers/user.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":520,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":520,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12796,12798],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":891,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":891,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22463,22466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22463,22466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .gameMode on an `any` value.","line":896,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":896,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .AND on an `any` value.","line":901,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":901,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":930,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":930,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":961,"column":29,"nodeType":"Property","messageId":"anyAssignment","endLine":961,"endColumn":51}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\n\nimport {\n  createTRPCRouter,\n  protectedProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\nimport {\n  FriendshipStatus,\n  GameVariantEnum,\n  PlayModeEnum,\n} from \"@prisma/client\";\nimport {\n  generatePresignedUploadUrl,\n  deleteObject,\n  generateAvatarKey,\n  getPublicUrl,\n} from \"~/lib/s3\";\n\nexport const userRouter = createTRPCRouter({\n  getProfile: publicProcedure\n    .input(\n      z.object({\n        username: z.string().optional(),\n        userId: z.string().optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const user = await ctx.db.user.findUnique({\n        where: input.userId\n          ? { id: input.userId }\n          : { username: input.username },\n        select: {\n          id: true,\n          username: true,\n          name: true,\n          email: true,\n          emailVerified: true,\n          image: true,\n          createdAt: true,\n        },\n      });\n\n      if (!user) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"User not found\",\n        });\n      }\n\n      // Check if blocked\n      if (ctx.session?.user?.id) {\n        const block = await ctx.db.block.findFirst({\n          where: {\n            OR: [\n              {\n                blockerId: user.id,\n                blockedId: ctx.session.user.id,\n              },\n              {\n                blockerId: ctx.session.user.id,\n                blockedId: user.id,\n              },\n            ],\n          },\n        });\n\n        if (block) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message: \"User not accessible\",\n          });\n        }\n      }\n\n      return user;\n    }),\n\n  searchUsers: publicProcedure\n    .input(z.object({ query: z.string() }))\n    .query(async ({ ctx, input }) => {\n      const users = await ctx.db.user.findMany({\n        where: {\n          OR: [\n            { username: { contains: input.query } },\n            { name: { contains: input.query } },\n          ],\n        },\n        select: {\n          id: true,\n          username: true,\n          name: true,\n          image: true,\n        },\n        take: 10,\n      });\n\n      // Filter out blocked users if authenticated\n      if (ctx.session?.user?.id) {\n        const blocks = await ctx.db.block.findMany({\n          where: {\n            OR: [\n              { blockerId: ctx.session.user.id },\n              { blockedId: ctx.session.user.id },\n            ],\n          },\n        });\n\n        const blockedIds = new Set([\n          ...blocks.map((b) => b.blockedId),\n          ...blocks.map((b) => b.blockerId),\n        ]);\n\n        return users.filter((u) => !blockedIds.has(u.id));\n      }\n\n      return users;\n    }),\n\n  sendFriendRequest: protectedProcedure\n    .input(z.object({ userId: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      if (input.userId === ctx.session.user.id) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Cannot send friend request to yourself\",\n        });\n      }\n\n      // Check for blocks\n      const block = await ctx.db.block.findFirst({\n        where: {\n          OR: [\n            {\n              blockerId: input.userId,\n              blockedId: ctx.session.user.id,\n            },\n            {\n              blockerId: ctx.session.user.id,\n              blockedId: input.userId,\n            },\n          ],\n        },\n      });\n\n      if (block) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Cannot send friend request\",\n        });\n      }\n\n      // Check for existing friendship\n      const existing = await ctx.db.friendship.findFirst({\n        where: {\n          OR: [\n            {\n              senderId: ctx.session.user.id,\n              receiverId: input.userId,\n            },\n            {\n              senderId: input.userId,\n              receiverId: ctx.session.user.id,\n            },\n          ],\n        },\n      });\n\n      if (existing) {\n        throw new TRPCError({\n          code: \"CONFLICT\",\n          message: \"Friend request already exists\",\n        });\n      }\n\n      await ctx.db.friendship.create({\n        data: {\n          senderId: ctx.session.user.id,\n          receiverId: input.userId,\n          status: FriendshipStatus.PENDING,\n        },\n      });\n\n      return { success: true };\n    }),\n\n  respondToFriendRequest: protectedProcedure\n    .input(\n      z.object({\n        friendshipId: z.string(),\n        accept: z.boolean(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const friendship = await ctx.db.friendship.findUnique({\n        where: { id: input.friendshipId },\n      });\n\n      if (!friendship) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Friend request not found\",\n        });\n      }\n\n      if (friendship.receiverId !== ctx.session.user.id) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Not authorized to respond to this request\",\n        });\n      }\n\n      if (input.accept) {\n        await ctx.db.friendship.update({\n          where: { id: input.friendshipId },\n          data: { status: FriendshipStatus.ACCEPTED },\n        });\n      } else {\n        await ctx.db.friendship.delete({\n          where: { id: input.friendshipId },\n        });\n      }\n\n      return { success: true };\n    }),\n\n  removeFriend: protectedProcedure\n    .input(z.object({ userId: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      const friendship = await ctx.db.friendship.findFirst({\n        where: {\n          OR: [\n            {\n              senderId: ctx.session.user.id,\n              receiverId: input.userId,\n              status: FriendshipStatus.ACCEPTED,\n            },\n            {\n              senderId: input.userId,\n              receiverId: ctx.session.user.id,\n              status: FriendshipStatus.ACCEPTED,\n            },\n          ],\n        },\n      });\n\n      if (!friendship) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Friendship not found\",\n        });\n      }\n\n      await ctx.db.friendship.delete({\n        where: { id: friendship.id },\n      });\n\n      return { success: true };\n    }),\n\n  getFriends: protectedProcedure.query(async ({ ctx }) => {\n    const friendships = await ctx.db.friendship.findMany({\n      where: {\n        OR: [\n          {\n            senderId: ctx.session.user.id,\n            status: FriendshipStatus.ACCEPTED,\n          },\n          {\n            receiverId: ctx.session.user.id,\n            status: FriendshipStatus.ACCEPTED,\n          },\n        ],\n      },\n      include: {\n        sender: {\n          select: {\n            id: true,\n            username: true,\n            name: true,\n            image: true,\n          },\n        },\n        receiver: {\n          select: {\n            id: true,\n            username: true,\n            name: true,\n            image: true,\n          },\n        },\n      },\n    });\n\n    return friendships.map((f) =>\n      f.senderId === ctx.session.user.id ? f.receiver : f.sender,\n    );\n  }),\n\n  getPendingFriendRequests: protectedProcedure.query(async ({ ctx }) => {\n    const requests = await ctx.db.friendship.findMany({\n      where: {\n        receiverId: ctx.session.user.id,\n        status: FriendshipStatus.PENDING,\n      },\n      include: {\n        sender: {\n          select: {\n            id: true,\n            username: true,\n            name: true,\n            image: true,\n          },\n        },\n      },\n    });\n\n    return requests;\n  }),\n\n  blockUser: protectedProcedure\n    .input(z.object({ userId: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      if (input.userId === ctx.session.user.id) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Cannot block yourself\",\n        });\n      }\n\n      // Check if already blocked\n      const existing = await ctx.db.block.findUnique({\n        where: {\n          blockerId_blockedId: {\n            blockerId: ctx.session.user.id,\n            blockedId: input.userId,\n          },\n        },\n      });\n\n      if (existing) {\n        throw new TRPCError({\n          code: \"CONFLICT\",\n          message: \"User already blocked\",\n        });\n      }\n\n      // Remove any existing friendship\n      await ctx.db.friendship.deleteMany({\n        where: {\n          OR: [\n            {\n              senderId: ctx.session.user.id,\n              receiverId: input.userId,\n            },\n            {\n              senderId: input.userId,\n              receiverId: ctx.session.user.id,\n            },\n          ],\n        },\n      });\n\n      await ctx.db.block.create({\n        data: {\n          blockerId: ctx.session.user.id,\n          blockedId: input.userId,\n        },\n      });\n\n      return { success: true };\n    }),\n\n  unblockUser: protectedProcedure\n    .input(z.object({ userId: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      const block = await ctx.db.block.findUnique({\n        where: {\n          blockerId_blockedId: {\n            blockerId: ctx.session.user.id,\n            blockedId: input.userId,\n          },\n        },\n      });\n\n      if (!block) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"User not blocked\",\n        });\n      }\n\n      await ctx.db.block.delete({\n        where: { id: block.id },\n      });\n\n      return { success: true };\n    }),\n\n  getBlockedUsers: protectedProcedure.query(async ({ ctx }) => {\n    const blocks = await ctx.db.block.findMany({\n      where: { blockerId: ctx.session.user.id },\n      include: {\n        blocked: {\n          select: {\n            id: true,\n            username: true,\n            name: true,\n            image: true,\n          },\n        },\n      },\n    });\n\n    return blocks.map((b) => b.blocked);\n  }),\n\n  // Public site-wide quick stats\n  getQuickStats: publicProcedure.query(async ({ ctx }) => {\n    const now = new Date();\n    const startOfDay = new Date(now);\n    startOfDay.setHours(0, 0, 0, 0);\n\n    const [activePlayers, gamesToday, activeSessions] = await Promise.all([\n      ctx.db.user.count(),\n      ctx.db.game.count({\n        where: { gameStartTime: { gte: startOfDay } },\n      }),\n      ctx.db.session.findMany({\n        where: { expires: { gt: now } },\n        select: { userId: true },\n      }),\n    ]);\n\n    const onlineNow = new Set(activeSessions.map((s) => s.userId)).size;\n\n    return { activePlayers, gamesToday, onlineNow };\n  }),\n\n  // Returns friends plus a computed `online` flag based on active NextAuth sessions\n  getFriendsWithStatus: protectedProcedure.query(async ({ ctx }) => {\n    const friendships = await ctx.db.friendship.findMany({\n      where: {\n        OR: [\n          { senderId: ctx.session.user.id, status: FriendshipStatus.ACCEPTED },\n          {\n            receiverId: ctx.session.user.id,\n            status: FriendshipStatus.ACCEPTED,\n          },\n        ],\n      },\n      include: {\n        sender: {\n          select: { id: true, username: true, name: true, image: true },\n        },\n        receiver: {\n          select: { id: true, username: true, name: true, image: true },\n        },\n      },\n    });\n\n    const friends = friendships.map((f) =>\n      f.senderId === ctx.session.user.id ? f.receiver : f.sender,\n    );\n\n    if (friends.length === 0)\n      return [] as Array<(typeof friends)[number] & { online: boolean }>;\n\n    const friendIds = friends.map((f) => f.id);\n\n    // Consider a user online if they have at least one non-expired session\n    const activeSessions = await ctx.db.session.findMany({\n      where: {\n        userId: { in: friendIds },\n        expires: { gt: new Date() },\n      },\n      select: { userId: true },\n    });\n\n    const onlineSet = new Set(activeSessions.map((s) => s.userId));\n\n    return friends.map((f) => ({ ...f, online: onlineSet.has(f.id) }));\n  }),\n\n  // Player data procedures for PlayerCard component\n  getCurrentUserProfile: protectedProcedure.query(async ({ ctx }) => {\n    const user = await ctx.db.user.findUnique({\n      where: { id: ctx.session.user.id },\n      select: {\n        id: true,\n        username: true,\n        name: true,\n        image: true,\n        createdAt: true,\n      },\n    });\n\n    if (!user) {\n      throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: \"User not found\",\n      });\n    }\n\n    return user;\n  }),\n\n  getPlayerStats: protectedProcedure\n    .input(\n      z.object({\n        userId: z.string().optional(), // If not provided, use current user\n        variant: z\n          .nativeEnum(GameVariantEnum)\n          .default(GameVariantEnum.AMERICAN),\n        playMode: z.nativeEnum(PlayModeEnum).default(PlayModeEnum.CASUAL),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const userId = input.userId || ctx.session.user.id;\n\n      // Check if requesting another user's stats\n      if (input.userId && input.userId !== ctx.session.user.id) {\n        // Check if blocked\n        const block = await ctx.db.block.findFirst({\n          where: {\n            OR: [\n              {\n                blockerId: input.userId,\n                blockedId: ctx.session.user.id,\n              },\n              {\n                blockerId: ctx.session.user.id,\n                blockedId: input.userId,\n              },\n            ],\n          },\n        });\n\n        if (block) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message: \"User stats not accessible\",\n          });\n        }\n      }\n\n      const playerRating = await ctx.db.playerRating.findUnique({\n        where: {\n          userId_variant_playMode: {\n            userId,\n            variant: input.variant,\n            playMode: input.playMode,\n          },\n        },\n      });\n\n      if (!playerRating) {\n        // Return default stats if no rating found\n        return {\n          rating: 1200,\n          wins: 0,\n          losses: 0,\n          draws: 0,\n          gamesPlayed: 0,\n          provisional: true,\n        };\n      }\n\n      return {\n        rating: playerRating.rating,\n        wins: playerRating.wins,\n        losses: playerRating.losses,\n        draws: playerRating.draws,\n        gamesPlayed: playerRating.gamesPlayed,\n        provisional: playerRating.provisional,\n        peakRating: playerRating.peakRating,\n        lastGameDate: playerRating.lastGameDate,\n      };\n    }),\n\n  getPlayerProfile: publicProcedure\n    .input(z.object({ userId: z.string() }))\n    .query(async ({ ctx, input }) => {\n      const user = await ctx.db.user.findUnique({\n        where: { id: input.userId },\n        select: {\n          id: true,\n          username: true,\n          name: true,\n          image: true,\n          createdAt: true,\n        },\n      });\n\n      if (!user) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"User not found\",\n        });\n      }\n\n      // Check if blocked\n      if (ctx.session?.user?.id) {\n        const block = await ctx.db.block.findFirst({\n          where: {\n            OR: [\n              {\n                blockerId: user.id,\n                blockedId: ctx.session.user.id,\n              },\n              {\n                blockerId: ctx.session.user.id,\n                blockedId: user.id,\n              },\n            ],\n          },\n        });\n\n        if (block) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message: \"User not accessible\",\n          });\n        }\n      }\n\n      return user;\n    }),\n\n  bulkGetPlayerProfiles: publicProcedure\n    .input(z.object({ userIds: z.array(z.string()) }))\n    .query(async ({ ctx, input }) => {\n      if (input.userIds.length === 0) {\n        return [];\n      }\n\n      // Get blocked user IDs if authenticated\n      let blockedIds = new Set<string>();\n      if (ctx.session?.user?.id) {\n        const blocks = await ctx.db.block.findMany({\n          where: {\n            OR: [\n              { blockerId: ctx.session.user.id },\n              { blockedId: ctx.session.user.id },\n            ],\n          },\n        });\n\n        blockedIds = new Set([\n          ...blocks.map((b) => b.blockedId),\n          ...blocks.map((b) => b.blockerId),\n        ]);\n      }\n\n      const users = await ctx.db.user.findMany({\n        where: {\n          id: { in: input.userIds },\n        },\n        select: {\n          id: true,\n          username: true,\n          name: true,\n          image: true,\n          createdAt: true,\n        },\n      });\n\n      // Filter out blocked users\n      return users.filter((user) => !blockedIds.has(user.id));\n    }),\n\n  updateProfile: protectedProcedure\n    .input(\n      z.object({\n        userId: z.string(),\n        name: z.string().optional(),\n        username: z.string().optional(),\n        email: z.string().email().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      if (input.userId !== ctx.session.user.id) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Not authorized to update this profile\",\n        });\n      }\n\n      // Check if username is already taken if changing username\n      if (input.username) {\n        const existing = await ctx.db.user.findFirst({\n          where: {\n            username: input.username,\n            NOT: { id: input.userId },\n          },\n        });\n\n        if (existing) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"Username already taken\",\n          });\n        }\n      }\n\n      // Check if email is already taken if changing email\n      if (input.email) {\n        const existing = await ctx.db.user.findFirst({\n          where: {\n            email: input.email,\n            NOT: { id: input.userId },\n          },\n        });\n\n        if (existing) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"Email already in use\",\n          });\n        }\n      }\n\n      const updated = await ctx.db.user.update({\n        where: { id: input.userId },\n        data: {\n          ...(input.name !== undefined && { name: input.name }),\n          ...(input.username !== undefined && { username: input.username }),\n          ...(input.email !== undefined && { email: input.email }),\n        },\n      });\n\n      return updated;\n    }),\n\n  getGameStats: protectedProcedure\n    .input(z.object({ userId: z.string() }))\n    .query(async ({ ctx, input }) => {\n      // Get all games for the user\n      const games = await ctx.db.game.findMany({\n        where: {\n          OR: [{ player1Id: input.userId }, { player2Id: input.userId }],\n        },\n        select: {\n          id: true,\n          winner: true,\n          gameMode: true,\n          player1Id: true,\n          player2Id: true,\n          gameStartTime: true,\n          moveCount: true,\n        },\n        orderBy: { gameStartTime: \"desc\" },\n      });\n\n      // Calculate statistics\n      let wins = 0;\n      let losses = 0;\n      let draws = 0;\n      let aiGames = 0;\n      let localGames = 0;\n      let onlineGames = 0;\n\n      const recentGames = [];\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      for (const game of games) {\n        // Count by game mode\n        if (game.gameMode === \"ai\") aiGames++;\n        else if (game.gameMode === \"local\") localGames++;\n        else if (game.gameMode === \"online\") onlineGames++;\n\n        // Count wins/losses/draws\n        if (game.winner) {\n          if (game.winner === \"draw\") {\n            draws++;\n          } else {\n            // Determine if user was playing as red or black\n            const isPlayer1 = game.player1Id === input.userId;\n            const playerColor = isPlayer1 ? \"red\" : \"black\";\n\n            if (game.winner === playerColor) {\n              wins++;\n            } else {\n              losses++;\n            }\n          }\n        }\n\n        // Track recent games (last 30 days)\n        if (new Date(game.gameStartTime) > thirtyDaysAgo && game.winner) {\n          let result: \"win\" | \"loss\" | \"draw\";\n          if (game.winner === \"draw\") {\n            result = \"draw\";\n          } else {\n            const isPlayer1 = game.player1Id === input.userId;\n            const playerColor = isPlayer1 ? \"red\" : \"black\";\n            result = game.winner === playerColor ? \"win\" : \"loss\";\n          }\n\n          recentGames.push({\n            id: game.id,\n            result,\n            gameMode: game.gameMode,\n            moveCount: game.moveCount,\n            date: game.gameStartTime,\n          });\n        }\n      }\n\n      return {\n        totalGames: games.length,\n        wins,\n        losses,\n        draws,\n        aiGames,\n        localGames,\n        onlineGames,\n        recentGames: recentGames.slice(0, 10), // Return max 10 recent games\n      };\n    }),\n\n  getMatchHistory: protectedProcedure\n    .input(\n      z.object({\n        userId: z.string(),\n        skip: z.number().default(0),\n        take: z.number().default(10),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const where = {\n        OR: [{ player1Id: input.userId }, { player2Id: input.userId }],\n      };\n\n      const [matches, total] = await Promise.all([\n        ctx.db.game.findMany({\n          where,\n          select: {\n            id: true,\n            winner: true,\n            gameMode: true,\n            moveCount: true,\n            gameStartTime: true,\n            lastSaved: true,\n            player1Id: true,\n            player2Id: true,\n            player1: {\n              select: {\n                id: true,\n                username: true,\n                name: true,\n                image: true,\n              },\n            },\n            player2: {\n              select: {\n                id: true,\n                username: true,\n                name: true,\n                image: true,\n              },\n            },\n          },\n          orderBy: { gameStartTime: \"desc\" },\n          skip: input.skip,\n          take: input.take,\n        }),\n        ctx.db.game.count({ where }),\n      ]);\n\n      return {\n        matches,\n        total,\n      };\n    }),\n\n  getEnhancedMatchHistory: protectedProcedure\n    .input(\n      z.object({\n        userId: z.string(),\n        skip: z.number().default(0),\n        take: z.number().default(15),\n        gameMode: z.enum([\"ai\", \"local\", \"online\"]).optional(),\n        searchOpponent: z.string().optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      // Build where clause\n      const whereConditions: any = {\n        OR: [{ player1Id: input.userId }, { player2Id: input.userId }],\n      };\n\n      if (input.gameMode) {\n        whereConditions.gameMode = input.gameMode;\n      }\n\n      // Search opponent name if provided\n      if (input.searchOpponent) {\n        whereConditions.AND = [\n          {\n            OR: [{ player1Id: input.userId }, { player2Id: input.userId }],\n          },\n          {\n            OR: [\n              {\n                player1: {\n                  OR: [\n                    { name: { contains: input.searchOpponent } },\n                    { username: { contains: input.searchOpponent } },\n                  ],\n                },\n              },\n              {\n                player2: {\n                  OR: [\n                    { name: { contains: input.searchOpponent } },\n                    { username: { contains: input.searchOpponent } },\n                  ],\n                },\n              },\n            ],\n          },\n        ];\n      }\n\n      const [matches, total] = await Promise.all([\n        ctx.db.game.findMany({\n          where: whereConditions,\n          select: {\n            id: true,\n            winner: true,\n            gameMode: true,\n            moveCount: true,\n            gameStartTime: true,\n            lastSaved: true,\n            player1Id: true,\n            player2Id: true,\n            player1: {\n              select: {\n                id: true,\n                username: true,\n                name: true,\n                image: true,\n              },\n            },\n            player2: {\n              select: {\n                id: true,\n                username: true,\n                name: true,\n                image: true,\n              },\n            },\n          },\n          orderBy: { gameStartTime: \"desc\" },\n          skip: input.skip,\n          take: input.take,\n        }),\n        ctx.db.game.count({ where: whereConditions }),\n      ]);\n\n      // Calculate stats\n      const allGames = await ctx.db.game.findMany({\n        where: {\n          OR: [{ player1Id: input.userId }, { player2Id: input.userId }],\n          winner: { not: null },\n        },\n        select: {\n          winner: true,\n          player1Id: true,\n          player2Id: true,\n          moveCount: true,\n        },\n      });\n\n      let wins = 0;\n      let losses = 0;\n      let draws = 0;\n      let bestStreak = 0;\n      let currentStreak = 0;\n      let totalMoves = 0;\n\n      for (const game of allGames) {\n        if (game.winner === \"draw\") {\n          draws++;\n          currentStreak = 0;\n        } else {\n          const isPlayer1 = game.player1Id === input.userId;\n          const playerColor = isPlayer1 ? \"red\" : \"black\";\n\n          if (game.winner === playerColor) {\n            wins++;\n            currentStreak++;\n            bestStreak = Math.max(bestStreak, currentStreak);\n          } else {\n            losses++;\n            currentStreak = 0;\n          }\n        }\n        totalMoves += game.moveCount;\n      }\n\n      const totalGames = wins + losses + draws;\n      const winRate =\n        totalGames > 0 ? Math.round((wins / totalGames) * 100) : 0;\n      const avgMoves = totalGames > 0 ? Math.round(totalMoves / totalGames) : 0;\n\n      return {\n        matches,\n        total,\n        stats: {\n          totalGames,\n          wins,\n          losses,\n          draws,\n          winRate,\n          bestStreak,\n          avgMoves,\n        },\n      };\n    }),\n\n  getAvatarUploadUrl: protectedProcedure\n    .input(\n      z.object({\n        filename: z.string(),\n        contentType: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      const key = generateAvatarKey(ctx.session.user.id, input.filename);\n      const uploadUrl = await generatePresignedUploadUrl(\n        key,\n        input.contentType,\n      );\n\n      return {\n        uploadUrl,\n        key,\n        publicUrl: getPublicUrl(key),\n      };\n    }),\n\n  updateAvatar: protectedProcedure\n    .input(\n      z.object({\n        image: z.string().url(),\n        avatarKey: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Delete old avatar if exists\n      const user = await ctx.db.user.findUnique({\n        where: { id: ctx.session.user.id },\n        select: { avatarKey: true },\n      });\n\n      if (user?.avatarKey) {\n        try {\n          await deleteObject(user.avatarKey);\n        } catch (error) {\n          console.error(\"Failed to delete old avatar:\", error);\n        }\n      }\n\n      // Update user with new avatar\n      const updated = await ctx.db.user.update({\n        where: { id: ctx.session.user.id },\n        data: {\n          image: input.image,\n          avatarKey: input.avatarKey,\n        },\n        select: {\n          id: true,\n          username: true,\n          name: true,\n          image: true,\n        },\n      });\n\n      return updated;\n    }),\n\n  deleteAvatar: protectedProcedure.mutation(async ({ ctx }) => {\n    const user = await ctx.db.user.findUnique({\n      where: { id: ctx.session.user.id },\n      select: { avatarKey: true },\n    });\n\n    if (user?.avatarKey) {\n      try {\n        await deleteObject(user.avatarKey);\n      } catch (error) {\n        console.error(\"Failed to delete avatar:\", error);\n      }\n    }\n\n    const updated = await ctx.db.user.update({\n      where: { id: ctx.session.user.id },\n      data: {\n        image: null,\n        avatarKey: null,\n      },\n      select: {\n        id: true,\n        username: true,\n        name: true,\n        image: true,\n      },\n    });\n\n    return updated;\n  }),\n\n  getFriendRequestNotificationCount: protectedProcedure.query(\n    async ({ ctx }) => {\n      const count = await ctx.db.friendship.count({\n        where: {\n          receiverId: ctx.session.user.id,\n          status: FriendshipStatus.PENDING,\n        },\n      });\n\n      return { count };\n    },\n  ),\n\n  getFriendRequestNotifications: protectedProcedure.query(async ({ ctx }) => {\n    const notifications = await ctx.db.friendship.findMany({\n      where: {\n        receiverId: ctx.session.user.id,\n        status: FriendshipStatus.PENDING,\n      },\n      include: {\n        sender: {\n          select: {\n            id: true,\n            username: true,\n            name: true,\n            image: true,\n          },\n        },\n      },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    return notifications.map((notification) => ({\n      id: notification.id,\n      type: \"FRIEND_REQUEST_RECEIVED\" as const,\n      sender: notification.sender,\n      createdAt: notification.createdAt,\n      read: false, // For now, we'll consider all friend requests as unread until acted upon\n    }));\n  }),\n\n  getLeaderboard: publicProcedure\n    .input(\n      z.object({\n        limit: z.number().min(1).max(50).default(10),\n        variant: z\n          .nativeEnum(GameVariantEnum)\n          .default(GameVariantEnum.AMERICAN),\n        playMode: z.nativeEnum(PlayModeEnum).default(PlayModeEnum.CASUAL),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const playerRatings = await ctx.db.playerRating.findMany({\n        where: {\n          variant: input.variant,\n          playMode: input.playMode,\n          gamesPlayed: { gt: 0 }, // Only include players who have played at least one game\n        },\n        include: {\n          user: {\n            select: {\n              id: true,\n              username: true,\n              name: true,\n              image: true,\n            },\n          },\n        },\n      });\n\n      // Calculate win rate and sort by it instead of rating\n      const playersWithWinRate = playerRatings.map((playerRating) => ({\n        id: playerRating.user.id,\n        username: playerRating.user.username,\n        name: playerRating.user.name,\n        image: playerRating.user.image,\n        rating: playerRating.rating,\n        wins: playerRating.wins,\n        losses: playerRating.losses,\n        draws: playerRating.draws,\n        totalGames: playerRating.gamesPlayed,\n        winRate:\n          playerRating.gamesPlayed > 0\n            ? Math.round(\n                (playerRating.wins / playerRating.gamesPlayed) * 100 * 10,\n              ) / 10\n            : 0,\n        streak: 0, // We'd need to calculate this from recent games\n      }));\n\n      // Sort by win rate (descending), then by wins (descending), then by total games (descending)\n      const sortedPlayers = playersWithWinRate.sort((a, b) => {\n        if (b.winRate !== a.winRate) {\n          return b.winRate - a.winRate;\n        }\n        if (b.wins !== a.wins) {\n          return b.wins - a.wins;\n        }\n        return b.totalGames - a.totalGames;\n      });\n\n      // Take only the requested limit and add rank\n      return sortedPlayers.slice(0, input.limit).map((player, index) => ({\n        ...player,\n        rank: index + 1,\n      }));\n    }),\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/api/trpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/auth-config.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[422,425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[422,425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .emailOrUsername on an `any` value.","line":14,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `any` value.","line":14,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":19,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":19,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":19,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .emailOrUsername on an `any` value.","line":19,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .emailOrUsername on an `any` value.","line":21,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .emailOrUsername on an `any` value.","line":26,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":38,"column":11,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `any` value.","line":38,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3419,3422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3419,3422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":121,"column":59,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":129,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":128,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":124,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":125,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":126,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":126,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":126,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":127,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `any` value.","line":127,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":148,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":151,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":153,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":154,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":155,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":156,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":179,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":181,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":182,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":182,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5095,5098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5095,5098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":189,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":189,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":189,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":189,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":190,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":190,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":190,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":190,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":190,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `any` value.","line":191,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":191,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":194,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":195,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":195,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":195,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":195,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `any` value.","line":196,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":199,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":199,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":218,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":223,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":225,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":226,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":226,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `any` value.","line":227,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":246,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":251,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":253,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `any` value.","line":254,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":268,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":273,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":275,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":275,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `any` value.","line":276,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":287,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":292,"endColumn":9}],"suppressedMessages":[],"errorCount":54,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport bcrypt from \"bcryptjs\";\nimport { createMockUser } from \"~/test/auth-utils\";\n\n// Mock the auth configuration directly\ndescribe(\"NextAuth Configuration Tests\", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe(\"Credentials Provider Authorization\", () => {\n    const createAuthorizeFunction = () => {\n      return async (credentials: any) => {\n        if (!credentials?.emailOrUsername || !credentials?.password) {\n          return null;\n        }\n\n        // Mock user lookup\n        const isEmail = credentials.emailOrUsername.includes(\"@\");\n        const mockUser =\n          isEmail && credentials.emailOrUsername === \"test@example.com\"\n            ? createMockUser({\n                email: \"test@example.com\",\n                password: await bcrypt.hash(\"password123\", 10),\n              })\n            : credentials.emailOrUsername === \"testuser\"\n              ? createMockUser({\n                  username: \"testuser\",\n                  password: await bcrypt.hash(\"password123\", 10),\n                })\n              : null;\n\n        if (!mockUser?.password) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          mockUser.password,\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: mockUser.id,\n          email: mockUser.email,\n          name: mockUser.name,\n          username: mockUser.username,\n          image: mockUser.image,\n        };\n      };\n    };\n\n    it(\"should authenticate with valid email and password\", async () => {\n      const authorize = createAuthorizeFunction();\n\n      const result = await authorize({\n        emailOrUsername: \"test@example.com\",\n        password: \"password123\",\n      });\n\n      expect(result).toBeTruthy();\n      expect(result?.email).toBe(\"test@example.com\");\n    });\n\n    it(\"should authenticate with valid username and password\", async () => {\n      const authorize = createAuthorizeFunction();\n\n      const result = await authorize({\n        emailOrUsername: \"testuser\",\n        password: \"password123\",\n      });\n\n      expect(result).toBeTruthy();\n      expect(result?.username).toBe(\"testuser\");\n    });\n\n    it(\"should return null for invalid password\", async () => {\n      const authorize = createAuthorizeFunction();\n\n      const result = await authorize({\n        emailOrUsername: \"test@example.com\",\n        password: \"wrongpassword\",\n      });\n\n      expect(result).toBeNull();\n    });\n\n    it(\"should return null when credentials are missing\", async () => {\n      const authorize = createAuthorizeFunction();\n\n      const result = await authorize({});\n      expect(result).toBeNull();\n\n      const result2 = await authorize({\n        emailOrUsername: \"test@example.com\",\n      });\n      expect(result2).toBeNull();\n\n      const result3 = await authorize({\n        password: \"password123\",\n      });\n      expect(result3).toBeNull();\n    });\n\n    it(\"should return null for non-existent user\", async () => {\n      const authorize = createAuthorizeFunction();\n\n      const result = await authorize({\n        emailOrUsername: \"nonexistent@example.com\",\n        password: \"password123\",\n      });\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"Session Callbacks\", () => {\n    const sessionCallback = ({ session, token }: any) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: token.userId,\n        username: token.username,\n        needsUsername: token.needsUsername,\n      },\n    });\n\n    it(\"should properly format session with user data from token\", () => {\n      const mockSession = {\n        user: {\n          email: \"test@example.com\",\n          name: \"Test User\",\n          image: null,\n        },\n        expires: new Date().toISOString(),\n      };\n\n      const mockToken = {\n        userId: \"user-123\",\n        username: \"testuser\",\n        needsUsername: false,\n        email: \"test@example.com\",\n      };\n\n      const result = sessionCallback({\n        session: mockSession,\n        token: mockToken,\n      });\n\n      expect(result.user.id).toBe(\"user-123\");\n      expect(result.user.username).toBe(\"testuser\");\n      expect(result.user.needsUsername).toBe(false);\n      expect(result.user.email).toBe(\"test@example.com\");\n    });\n\n    it(\"should handle missing username in token\", () => {\n      const mockSession = {\n        user: {\n          email: \"test@example.com\",\n          name: \"Test User\",\n          image: null,\n        },\n        expires: new Date().toISOString(),\n      };\n\n      const mockToken = {\n        userId: \"user-123\",\n        username: null,\n        needsUsername: true,\n        email: \"test@example.com\",\n      };\n\n      const result = sessionCallback({\n        session: mockSession,\n        token: mockToken,\n      });\n\n      expect(result.user.username).toBeNull();\n      expect(result.user.needsUsername).toBe(true);\n    });\n  });\n\n  describe(\"JWT Callbacks\", () => {\n    const jwtCallback = async ({ token, user, trigger, session }: any) => {\n      if (user) {\n        token.userId = user.id;\n        token.username = user.username;\n        token.needsUsername = !user.username;\n      }\n\n      if (trigger === \"update\" && session?.username) {\n        token.username = session.username;\n        token.needsUsername = false;\n      }\n\n      return token;\n    };\n\n    it(\"should set user data on initial sign in\", async () => {\n      const mockUser = {\n        id: \"user-123\",\n        email: \"test@example.com\",\n        name: \"Test User\",\n        username: \"testuser\",\n        image: null,\n      };\n\n      const mockToken = {\n        email: \"test@example.com\",\n        name: \"Test User\",\n        picture: null,\n        sub: \"user-123\",\n      };\n\n      const result = await jwtCallback({\n        token: mockToken,\n        user: mockUser,\n        trigger: undefined,\n        session: undefined,\n      });\n\n      expect(result.userId).toBe(\"user-123\");\n      expect(result.username).toBe(\"testuser\");\n      expect(result.needsUsername).toBe(false);\n    });\n\n    it(\"should set needsUsername to true when username is null\", async () => {\n      const mockUser = {\n        id: \"user-123\",\n        email: \"test@example.com\",\n        name: \"Test User\",\n        username: null,\n        image: null,\n      };\n\n      const mockToken = {\n        email: \"test@example.com\",\n        name: \"Test User\",\n        picture: null,\n        sub: \"user-123\",\n      };\n\n      const result = await jwtCallback({\n        token: mockToken,\n        user: mockUser,\n        trigger: undefined,\n        session: undefined,\n      });\n\n      expect(result.username).toBeNull();\n      expect(result.needsUsername).toBe(true);\n    });\n\n    it(\"should update username when trigger is update\", async () => {\n      const mockToken = {\n        userId: \"user-123\",\n        username: null,\n        needsUsername: true,\n        email: \"test@example.com\",\n        name: \"Test User\",\n        picture: null,\n        sub: \"user-123\",\n      };\n\n      const result = await jwtCallback({\n        token: mockToken,\n        user: undefined,\n        trigger: \"update\",\n        session: { username: \"newusername\" },\n      });\n\n      expect(result.username).toBe(\"newusername\");\n      expect(result.needsUsername).toBe(false);\n    });\n\n    it(\"should not modify token when no user and no update trigger\", async () => {\n      const mockToken = {\n        userId: \"user-123\",\n        username: \"existinguser\",\n        needsUsername: false,\n        email: \"test@example.com\",\n      };\n\n      const result = await jwtCallback({\n        token: mockToken,\n        user: undefined,\n        trigger: undefined,\n        session: undefined,\n      });\n\n      expect(result).toEqual(mockToken);\n    });\n  });\n\n  describe(\"Auth Configuration Structure\", () => {\n    it(\"should have correct page configurations\", () => {\n      const pages = {\n        signIn: \"/auth/signin\",\n        error: \"/auth/error\",\n        newUser: \"/auth/new-user\",\n      };\n\n      expect(pages.signIn).toBe(\"/auth/signin\");\n      expect(pages.error).toBe(\"/auth/error\");\n      expect(pages.newUser).toBe(\"/auth/new-user\");\n    });\n\n    it(\"should use JWT session strategy\", () => {\n      const sessionConfig = {\n        strategy: \"jwt\" as const,\n      };\n\n      expect(sessionConfig.strategy).toBe(\"jwt\");\n    });\n\n    it(\"should have two auth providers configured\", () => {\n      // Discord and Credentials providers\n      const providers = [\n        { id: \"discord\", type: \"oauth\" },\n        { id: \"credentials\", type: \"credentials\" },\n      ];\n\n      expect(providers).toHaveLength(2);\n      expect(providers[0].id).toBe(\"discord\");\n      expect(providers[1].id).toBe(\"credentials\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/auth.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":79,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2155,2158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2155,2158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":82,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `error` typed value.","line":83,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .needsUsername on an `error` typed value.","line":84,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":185,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":185,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authorize on an `any` value.","line":185,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":188,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":191,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":188,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":188,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5286,5289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5286,5289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":212,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authorize on an `any` value.","line":212,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":215,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":218,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":215,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":215,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6084,6087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6084,6087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":237,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":237,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authorize on an `any` value.","line":237,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":240,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":243,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":240,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":240,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6828,6831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6828,6831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":252,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":252,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authorize on an `any` value.","line":252,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":255,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":258,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":255,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":255,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7301,7304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7301,7304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":264,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":264,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authorize on an `any` value.","line":264,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":267,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":267,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":267,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":267,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7614,7617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7614,7617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":280,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":280,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .authorize on an `any` value.","line":280,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":280,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":283,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":286,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":283,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":283,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8163,8166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8163,8166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from \"vitest\";\nimport bcrypt from \"bcryptjs\";\nimport { createMockUser, createMockPrismaClient } from \"~/test/auth-utils\";\n\n// Create mock DB before mocking modules\nconst mockDb = createMockPrismaClient();\n\n// Mock modules\nvi.mock(\"~/server/db\", () => ({\n  db: mockDb,\n}));\n\nvi.mock(\"~/env\", () => ({\n  env: {\n    DISCORD_CLIENT_ID: \"test-discord-client-id\",\n    DISCORD_CLIENT_SECRET: \"test-discord-client-secret\",\n    NEXTAUTH_SECRET: \"test-nextauth-secret\",\n    NEXTAUTH_URL: \"http://localhost:3000\",\n  },\n}));\n\n// Import after mocking\nimport { authOptions } from \"./auth\";\n\ndescribe(\"NextAuth Configuration\", () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe(\"authOptions\", () => {\n    it(\"should have correct providers configured\", () => {\n      expect(authOptions.providers).toHaveLength(2);\n      expect(authOptions.providers[0]?.id).toBe(\"discord\");\n      expect(authOptions.providers[1]?.id).toBe(\"credentials\");\n    });\n\n    it(\"should have correct page configurations\", () => {\n      expect(authOptions.pages).toEqual({\n        signIn: \"/auth/signin\",\n        error: \"/auth/error\",\n        newUser: \"/auth/new-user\",\n      });\n    });\n\n    it(\"should use JWT session strategy\", () => {\n      expect(authOptions.session?.strategy).toBe(\"jwt\");\n    });\n  });\n\n  describe(\"Callbacks\", () => {\n    describe(\"session callback\", () => {\n      it(\"should properly format session with user data from token\", () => {\n        const mockSession = {\n          user: {\n            email: \"test@example.com\",\n            name: \"Test User\",\n            image: null,\n          },\n          expires: new Date().toISOString(),\n        };\n\n        const mockToken = {\n          userId: \"user-123\",\n          username: \"testuser\",\n          needsUsername: false,\n          email: \"test@example.com\",\n          name: \"Test User\",\n          picture: null,\n          sub: \"user-123\",\n        };\n\n        const result = authOptions.callbacks!.session!({\n          session: mockSession,\n          token: mockToken,\n          user: {} as any,\n        });\n\n        expect(result.user.id).toBe(\"user-123\");\n        expect(result.user.username).toBe(\"testuser\");\n        expect(result.user.needsUsername).toBe(false);\n      });\n    });\n\n    describe(\"jwt callback\", () => {\n      it(\"should set user data on initial sign in\", async () => {\n        const mockUser = {\n          id: \"user-123\",\n          email: \"test@example.com\",\n          name: \"Test User\",\n          username: \"testuser\",\n          image: null,\n        };\n\n        const mockToken = {\n          email: \"test@example.com\",\n          name: \"Test User\",\n          picture: null,\n          sub: \"user-123\",\n        };\n\n        const result = await authOptions.callbacks!.jwt!({\n          token: mockToken,\n          user: mockUser,\n          account: null,\n          profile: undefined,\n          trigger: undefined,\n        });\n\n        expect(result.userId).toBe(\"user-123\");\n        expect(result.username).toBe(\"testuser\");\n        expect(result.needsUsername).toBe(false);\n      });\n\n      it(\"should set needsUsername to true when username is null\", async () => {\n        const mockUser = {\n          id: \"user-123\",\n          email: \"test@example.com\",\n          name: \"Test User\",\n          username: null,\n          image: null,\n        };\n\n        const mockToken = {\n          email: \"test@example.com\",\n          name: \"Test User\",\n          picture: null,\n          sub: \"user-123\",\n        };\n\n        const result = await authOptions.callbacks!.jwt!({\n          token: mockToken,\n          user: mockUser,\n          account: null,\n          profile: undefined,\n          trigger: undefined,\n        });\n\n        expect(result.needsUsername).toBe(true);\n      });\n\n      it('should update username when trigger is \"update\"', async () => {\n        const mockToken = {\n          userId: \"user-123\",\n          username: null,\n          needsUsername: true,\n          email: \"test@example.com\",\n          name: \"Test User\",\n          picture: null,\n          sub: \"user-123\",\n        };\n\n        const result = await authOptions.callbacks!.jwt!({\n          token: mockToken,\n          user: undefined,\n          account: null,\n          profile: undefined,\n          trigger: \"update\",\n          session: { username: \"newusername\" },\n        });\n\n        expect(result.username).toBe(\"newusername\");\n        expect(result.needsUsername).toBe(false);\n      });\n    });\n  });\n\n  describe(\"Credentials Provider\", () => {\n    const credentialsProvider = authOptions.providers[1];\n\n    it(\"should authenticate with valid email and password\", async () => {\n      const mockUser = createMockUser({\n        id: \"user-123\",\n        email: \"test@example.com\",\n        username: \"testuser\",\n        password: await bcrypt.hash(\"password123\", 10),\n      });\n\n      // Use mockDb directly\n      mockDb.user.findFirst.mockResolvedValue(mockUser);\n\n      const authorize = credentialsProvider?.options?.authorize;\n      if (!authorize) throw new Error(\"Authorize function not found\");\n\n      const result = await authorize(\n        { emailOrUsername: \"test@example.com\", password: \"password123\" },\n        {} as any,\n      );\n\n      expect(result).toEqual({\n        id: mockUser.id,\n        email: mockUser.email,\n        name: mockUser.name,\n        username: mockUser.username,\n        image: mockUser.image,\n      });\n    });\n\n    it(\"should authenticate with valid username and password\", async () => {\n      const mockUser = createMockUser({\n        id: \"user-123\",\n        username: \"testuser\",\n        password: await bcrypt.hash(\"password123\", 10),\n      });\n\n      // Use mockDb directly\n      mockDb.user.findFirst.mockResolvedValue(mockUser);\n\n      const authorize = credentialsProvider?.options?.authorize;\n      if (!authorize) throw new Error(\"Authorize function not found\");\n\n      const result = await authorize(\n        { emailOrUsername: \"testuser\", password: \"password123\" },\n        {} as any,\n      );\n\n      expect(result).toEqual({\n        id: mockUser.id,\n        email: mockUser.email,\n        name: mockUser.name,\n        username: mockUser.username,\n        image: mockUser.image,\n      });\n    });\n\n    it(\"should return null for invalid credentials\", async () => {\n      const mockUser = createMockUser({\n        password: await bcrypt.hash(\"password123\", 10),\n      });\n\n      // Use mockDb directly\n      mockDb.user.findFirst.mockResolvedValue(mockUser);\n\n      const authorize = credentialsProvider?.options?.authorize;\n      if (!authorize) throw new Error(\"Authorize function not found\");\n\n      const result = await authorize(\n        { emailOrUsername: \"test@example.com\", password: \"wrongpassword\" },\n        {} as any,\n      );\n\n      expect(result).toBeNull();\n    });\n\n    it(\"should return null when user not found\", async () => {\n      // Use mockDb directly\n      mockDb.user.findFirst.mockResolvedValue(null);\n\n      const authorize = credentialsProvider?.options?.authorize;\n      if (!authorize) throw new Error(\"Authorize function not found\");\n\n      const result = await authorize(\n        { emailOrUsername: \"nonexistent@example.com\", password: \"password123\" },\n        {} as any,\n      );\n\n      expect(result).toBeNull();\n    });\n\n    it(\"should return null when no credentials provided\", async () => {\n      const authorize = credentialsProvider?.options?.authorize;\n      if (!authorize) throw new Error(\"Authorize function not found\");\n\n      const result = await authorize({}, {} as any);\n\n      expect(result).toBeNull();\n    });\n\n    it(\"should return null for OAuth user without password\", async () => {\n      const mockUser = createMockUser({\n        password: null,\n      });\n\n      // Use mockDb directly\n      mockDb.user.findFirst.mockResolvedValue(mockUser);\n\n      const authorize = credentialsProvider?.options?.authorize;\n      if (!authorize) throw new Error(\"Authorize function not found\");\n\n      const result = await authorize(\n        { emailOrUsername: \"test@example.com\", password: \"password123\" },\n        {} as any,\n      );\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"Events\", () => {\n    it(\"should update user with null username on createUser event\", async () => {\n      // Use mockDb directly\n      const mockUser = createMockUser({ username: null });\n\n      await authOptions.events?.createUser?.({ user: mockUser });\n\n      expect(mockDb.user.update).toHaveBeenCalledWith({\n        where: { id: mockUser.id },\n        data: { username: null },\n      });\n    });\n\n    it(\"should not update user if username already exists\", async () => {\n      // Use mockDb directly\n      const mockUser = createMockUser({ username: \"existinguser\" });\n\n      await authOptions.events?.createUser?.({ user: mockUser });\n\n      expect(mockDb.user.update).not.toHaveBeenCalled();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/auth.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":21,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":21,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[762,764],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":32,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":33,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":33,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .image on an `any` value.","line":38,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":39,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":39,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .image on an `any` value.","line":39,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":36}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { getServerSession, type NextAuthOptions } from \"next-auth\";\nimport { type Adapter } from \"next-auth/adapters\";\nimport DiscordProvider from \"next-auth/providers/discord\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport { env } from \"~/env\";\nimport { db } from \"~/server/db\";\n\n// Module augmentations for NextAuth are declared in src/types/next-auth.d.ts\n\nexport const authOptions: NextAuthOptions = {\n  callbacks: {\n    session: ({ session, token }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: token.userId,\n        username: token.username,\n        needsUsername: token.needsUsername,\n        image: token.image || session.user?.image,\n      },\n    }),\n    jwt: async ({ token, user, trigger, session }) => {\n      if (user) {\n        token.userId = user.id;\n        token.username = user.username;\n        token.needsUsername = user.username.startsWith(\"user_\");\n        token.image = user.image;\n      }\n\n      if (trigger === \"update\" && session?.username) {\n        token.username = session.username;\n        token.needsUsername = false;\n      }\n\n      // If trigger is \"update\" and we have image data, update the token\n      if (trigger === \"update\" && session?.image !== undefined) {\n        token.image = session.image;\n      }\n\n      return token;\n    },\n  },\n  adapter: PrismaAdapter(db) as Adapter,\n  providers: [\n    DiscordProvider({\n      clientId: env.DISCORD_CLIENT_ID,\n      clientSecret: env.DISCORD_CLIENT_SECRET,\n    }),\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        emailOrUsername: { label: \"Email or Username\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.emailOrUsername || !credentials?.password) {\n          return null;\n        }\n\n        // Check if input is email or username\n        const isEmail = credentials.emailOrUsername.includes(\"@\");\n\n        const user = await db.user.findFirst({\n          where: isEmail\n            ? { email: credentials.emailOrUsername }\n            : { username: credentials.emailOrUsername },\n        });\n\n        if (!user?.password) {\n          return null;\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password,\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        const safeUsername = user.username ?? `user_${user.id.slice(-8)}`;\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          username: safeUsername,\n          image: user.image,\n          needsUsername: safeUsername.startsWith(\"user_\"),\n        };\n      },\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    error: \"/auth/error\",\n    newUser: \"/auth/new-user\",\n  },\n  session: {\n    strategy: \"jwt\",\n  },\n  events: {\n    async createUser({ user }) {\n      // Generate temporary username for OAuth users who don't have one\n      if (!user.username) {\n        const tempUsername = `user_${user.id.slice(-8)}`;\n        await db.user.update({\n          where: { id: user.id },\n          data: { username: tempUsername },\n        });\n        user.username = tempUsername;\n      }\n    },\n  },\n};\n\n/**\n * Retrieves the current server-side authentication session using the configured auth options.\n * Useful for accessing the authenticated user's session data in server components or API routes.\n *\n * @returns {Promise<Session | null>} The current session object or null if not authenticated.\n */\nexport const getServerAuthSession = () => getServerSession(authOptions);\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/server/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/test/auth-utils.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":137,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":142,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":184,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":184,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":197,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":197,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":228,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":228,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .iat on an `any` value.","line":235,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .exp on an `any` value.","line":236,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":247,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":247,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":249,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":250,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":251,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":258,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":258,"endColumn":79}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from \"vitest\";\nimport { render } from \"@testing-library/react\";\nimport bcrypt from \"bcryptjs\";\nimport {\n  createMockSession,\n  createMockUser,\n  AuthTestProvider,\n  createMockPrismaClient,\n  createMockResendClient,\n  authErrorScenarios,\n  mockAuthApiResponse,\n  createAuthHeaders,\n  createTestJWT,\n} from \"./auth-utils\";\n\ndescribe(\"Auth Test Utilities\", () => {\n  describe(\"createMockSession\", () => {\n    it(\"should create a valid mock session with defaults\", () => {\n      const session = createMockSession();\n\n      expect(session.user).toMatchObject({\n        id: \"test-user-id\",\n        email: \"test@example.com\",\n        name: \"Test User\",\n        username: \"testuser\",\n        needsUsername: false,\n      });\n      expect(session.expires).toBeDefined();\n    });\n\n    it(\"should allow overriding session properties\", () => {\n      const session = createMockSession({\n        user: {\n          id: \"custom-id\",\n          email: \"custom@example.com\",\n          name: \"Custom User\",\n          username: \"customuser\",\n          needsUsername: true,\n          image: \"https://example.com/image.jpg\",\n        },\n      });\n\n      expect(session.user.id).toBe(\"custom-id\");\n      expect(session.user.needsUsername).toBe(true);\n    });\n  });\n\n  describe(\"createMockUser\", () => {\n    it(\"should create a valid mock user with defaults\", () => {\n      const user = createMockUser();\n\n      expect(user).toMatchObject({\n        email: \"test@example.com\",\n        name: \"Test User\",\n        username: \"testuser\",\n        emailVerified: null,\n      });\n      expect(user.id).toBeDefined();\n      expect(user.password).toBeDefined();\n      expect(user.createdAt).toBeInstanceOf(Date);\n    });\n\n    it(\"should hash the default password\", async () => {\n      const user = createMockUser();\n      const isValid = await bcrypt.compare(\"password123\", user.password!);\n\n      expect(isValid).toBe(true);\n    });\n\n    it(\"should allow overriding user properties\", () => {\n      const user = createMockUser({\n        email: \"custom@example.com\",\n        username: \"customuser\",\n        password: null,\n      });\n\n      expect(user.email).toBe(\"custom@example.com\");\n      expect(user.username).toBe(\"customuser\");\n      expect(user.password).toBeNull();\n    });\n  });\n\n  describe(\"AuthTestProvider\", () => {\n    it(\"should render children with session provider\", () => {\n      const session = createMockSession();\n      const { getByText } = render(\n        <AuthTestProvider session={session}>\n          <div>Test Child</div>\n        </AuthTestProvider>,\n      );\n\n      expect(getByText(\"Test Child\")).toBeDefined();\n    });\n\n    it(\"should work with null session\", () => {\n      const { getByText } = render(\n        <AuthTestProvider session={null}>\n          <div>Test Child</div>\n        </AuthTestProvider>,\n      );\n\n      expect(getByText(\"Test Child\")).toBeDefined();\n    });\n  });\n\n  describe(\"createMockPrismaClient\", () => {\n    it(\"should create mock Prisma client with all required models\", () => {\n      const db = createMockPrismaClient();\n\n      expect(db.user).toBeDefined();\n      expect(db.user.findUnique).toBeDefined();\n      expect(db.user.create).toBeDefined();\n      expect(db.user.update).toBeDefined();\n      expect(db.user.delete).toBeDefined();\n\n      expect(db.account).toBeDefined();\n      expect(db.session).toBeDefined();\n      expect(db.verificationToken).toBeDefined();\n      expect(db.passwordResetToken).toBeDefined();\n      expect(db.game).toBeDefined();\n    });\n\n    it(\"should have mockable functions\", async () => {\n      const db = createMockPrismaClient();\n      const mockUser = createMockUser();\n\n      db.user.findUnique.mockResolvedValue(mockUser);\n\n      await expect(db.user.findUnique()).resolves.toBe(mockUser);\n    });\n  });\n\n  describe(\"createMockResendClient\", () => {\n    it(\"should create mock Resend client with email sending\", async () => {\n      const resend = createMockResendClient();\n\n      const result = await resend.emails.send({\n        from: \"test@example.com\",\n        to: \"recipient@example.com\",\n        subject: \"Test\",\n        html: \"<p>Test</p>\",\n      });\n\n      expect(result).toEqual({ id: \"mock-email-id\" });\n      expect(resend.emails.send).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"authErrorScenarios\", () => {\n    it(\"should provide invalid credentials scenario\", () => {\n      expect(authErrorScenarios.invalidCredentials).toMatchObject({\n        email: \"wrong@example.com\",\n        password: \"wrongpassword\",\n      });\n    });\n\n    it(\"should provide expired token scenario\", () => {\n      const scenario = authErrorScenarios.expiredToken;\n\n      expect(scenario.token).toBe(\"expired-token-123\");\n      expect(scenario.expires.getTime()).toBeLessThan(Date.now());\n    });\n\n    it(\"should provide weak password scenario\", () => {\n      expect(authErrorScenarios.weakPassword).toMatchObject({\n        password: \"123\",\n      });\n    });\n\n    it(\"should provide invalid email scenario\", () => {\n      expect(authErrorScenarios.invalidEmail).toMatchObject({\n        email: \"notanemail\",\n      });\n    });\n  });\n\n  describe(\"mockAuthApiResponse\", () => {\n    it(\"should create successful response\", async () => {\n      const response = mockAuthApiResponse(true, { userId: \"123\" });\n\n      expect(response.ok).toBe(true);\n      expect(response.status).toBe(200);\n\n      const json = await response.json();\n      expect(json).toEqual({\n        success: true,\n        data: { userId: \"123\" },\n      });\n    });\n\n    it(\"should create error response\", async () => {\n      const response = mockAuthApiResponse(false, null, \"Invalid credentials\");\n\n      expect(response.ok).toBe(false);\n      expect(response.status).toBe(401);\n\n      const json = await response.json();\n      expect(json).toEqual({\n        success: false,\n        error: \"Invalid credentials\",\n      });\n    });\n  });\n\n  describe(\"createAuthHeaders\", () => {\n    it(\"should create headers with content type\", () => {\n      const headers = createAuthHeaders();\n\n      expect(headers[\"Content-Type\"]).toBe(\"application/json\");\n      expect(headers.Authorization).toBeUndefined();\n    });\n\n    it(\"should include authorization header when token provided\", () => {\n      const headers = createAuthHeaders(\"test-token-123\");\n\n      expect(headers[\"Content-Type\"]).toBe(\"application/json\");\n      expect(headers.Authorization).toBe(\"Bearer test-token-123\");\n    });\n  });\n\n  describe(\"createTestJWT\", () => {\n    it(\"should create a JWT-like token with default payload\", () => {\n      const token = createTestJWT();\n      const parts = token.split(\".\");\n\n      expect(parts).toHaveLength(3);\n\n      const payload = JSON.parse(Buffer.from(parts[1], \"base64url\").toString());\n      expect(payload).toMatchObject({\n        userId: \"test-user-id\",\n        email: \"test@example.com\",\n        username: \"testuser\",\n        needsUsername: false,\n      });\n      expect(payload.iat).toBeDefined();\n      expect(payload.exp).toBeDefined();\n    });\n\n    it(\"should allow custom payload values\", () => {\n      const token = createTestJWT({\n        userId: \"custom-id\",\n        email: \"custom@example.com\",\n        username: \"customuser\",\n      });\n\n      const parts = token.split(\".\");\n      const payload = JSON.parse(Buffer.from(parts[1], \"base64url\").toString());\n\n      expect(payload.userId).toBe(\"custom-id\");\n      expect(payload.email).toBe(\"custom@example.com\");\n      expect(payload.username).toBe(\"customuser\");\n    });\n\n    it(\"should have valid JWT structure\", () => {\n      const token = createTestJWT();\n      const parts = token.split(\".\");\n\n      const header = JSON.parse(Buffer.from(parts[0], \"base64url\").toString());\n      expect(header).toEqual({\n        alg: \"HS256\",\n        typ: \"JWT\",\n      });\n\n      expect(parts[2]).toBe(\"test-signature\");\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/test/auth-utils.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3072,3075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3072,3075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":147,"column":22,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":151,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":149,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3496,3499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3496,3499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":172,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":172,"endColumn":57}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { type Session } from \"next-auth\";\nimport { SessionProvider } from \"next-auth/react\";\nimport { vi } from \"vitest\";\nimport bcrypt from \"bcryptjs\";\nimport { type User } from \"@prisma/client\";\nimport { nanoid } from \"nanoid\";\n\n// Mock session factory\nexport const createMockSession = (overrides?: Partial<Session>): Session => ({\n  user: {\n    id: \"test-user-id\",\n    email: \"test@example.com\",\n    name: \"Test User\",\n    username: \"testuser\",\n    needsUsername: false,\n    image: null,\n  },\n  expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n  ...overrides,\n});\n\n// Mock user factory\nexport const createMockUser = (overrides?: Partial<User>): User => ({\n  id: nanoid(),\n  email: \"test@example.com\",\n  emailVerified: null,\n  name: \"Test User\",\n  username: \"testuser\",\n  password: bcrypt.hashSync(\"password123\", 10),\n  image: null,\n  avatarKey: null,\n  createdAt: new Date(),\n  updatedAt: new Date(),\n  ...overrides,\n});\n\n// Provider wrapper for auth tests\nexport const AuthTestProvider = ({\n  children,\n  session = null,\n}: {\n  children: React.ReactNode;\n  session?: Session | null;\n}) => {\n  return <SessionProvider session={session}>{children}</SessionProvider>;\n};\n\n// Mock NextAuth module\nexport const mockNextAuth = {\n  getServerSession: vi.fn(),\n  getSession: vi.fn(),\n  useSession: vi.fn(),\n  signIn: vi.fn(),\n  signOut: vi.fn(),\n  getCsrfToken: vi.fn(),\n};\n\n// Mock Prisma client for auth tests\nexport const createMockPrismaClient = () => ({\n  user: {\n    findUnique: vi.fn(),\n    findFirst: vi.fn(),\n    findMany: vi.fn(),\n    create: vi.fn(),\n    update: vi.fn(),\n    delete: vi.fn(),\n    deleteMany: vi.fn(),\n  },\n  account: {\n    findUnique: vi.fn(),\n    findFirst: vi.fn(),\n    create: vi.fn(),\n    delete: vi.fn(),\n  },\n  session: {\n    findUnique: vi.fn(),\n    create: vi.fn(),\n    update: vi.fn(),\n    delete: vi.fn(),\n    deleteMany: vi.fn(),\n  },\n  verificationToken: {\n    findUnique: vi.fn(),\n    create: vi.fn(),\n    delete: vi.fn(),\n  },\n  passwordResetToken: {\n    findUnique: vi.fn(),\n    create: vi.fn(),\n    delete: vi.fn(),\n    deleteMany: vi.fn(),\n  },\n  game: {\n    findMany: vi.fn(),\n    findUnique: vi.fn(),\n    create: vi.fn(),\n    update: vi.fn(),\n  },\n});\n\n// Mock Resend client\nexport const createMockResendClient = () => ({\n  emails: {\n    send: vi.fn().mockResolvedValue({ id: \"mock-email-id\" }),\n  },\n});\n\n// Auth error scenarios for testing\nexport const authErrorScenarios = {\n  invalidCredentials: {\n    email: \"wrong@example.com\",\n    password: \"wrongpassword\",\n  },\n  expiredToken: {\n    token: \"expired-token-123\",\n    expires: new Date(Date.now() - 3600000),\n  },\n  invalidToken: {\n    token: \"invalid-token-123\",\n  },\n  existingEmail: {\n    email: \"existing@example.com\",\n  },\n  existingUsername: {\n    username: \"existinguser\",\n  },\n  weakPassword: {\n    password: \"123\",\n  },\n  invalidEmail: {\n    email: \"notanemail\",\n  },\n  invalidUsername: {\n    username: \"a\",\n  },\n};\n\n// Helper to mock auth API responses\nexport const mockAuthApiResponse = (\n  success: boolean,\n  data?: any,\n  error?: string,\n) => ({\n  ok: success,\n  status: success ? 200 : 401,\n  json: async () => ({\n    success,\n    ...(data && { data }),\n    ...(error && { error }),\n  }),\n});\n\n// Helper to create auth headers\nexport const createAuthHeaders = (token?: string) => ({\n  \"Content-Type\": \"application/json\",\n  ...(token && { Authorization: `Bearer ${token}` }),\n});\n\n// Test JWT token\nexport const createTestJWT = (payload?: any) => {\n  const header = { alg: \"HS256\", typ: \"JWT\" };\n  const defaultPayload = {\n    userId: \"test-user-id\",\n    email: \"test@example.com\",\n    username: \"testuser\",\n    needsUsername: false,\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 3600,\n  };\n\n  const finalPayload = { ...defaultPayload, ...payload };\n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\n    \"base64url\",\n  );\n  const encodedPayload = Buffer.from(JSON.stringify(finalPayload)).toString(\n    \"base64url\",\n  );\n  const signature = \"test-signature\";\n\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/test/mocks/auth-handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[502,505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[502,505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[585,588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[585,588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":19,"column":3,"nodeType":"Property","messageId":"anyAssignment","endLine":19,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[911,914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[911,914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":32,"column":27,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":32,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":32,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":33,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":34,"column":29,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":34,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":34,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":36,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":36,"endColumn":15},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'csrfToken' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":48,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":48,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `any` value.","line":50,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":54,"column":52,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":54,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `any` value.","line":54,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":62,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":62,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":63,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":63,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":63,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":64,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":64,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":64,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":65,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":65,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":66,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":67,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":67,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .image on an `any` value.","line":67,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":71,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":84,"column":50,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":84,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":84,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `JsonBodyType`.","line":85,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":85,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":162,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":162,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":167,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":184,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":184,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":193,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":193,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .username on an `any` value.","line":199,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":203,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":203,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":203,"column":48,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":203,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":203,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":205,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":206,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":213,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":213,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":220,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":220,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":220,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":231,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":231,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expires on an `any` value.","line":237,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":246,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .userId on an `any` value.","line":246,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .password on an `any` value.","line":247,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":247,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":264,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .image on an `any` value.","line":267,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":267,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":273,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":273,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":273,"column":48,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":273,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":273,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":276,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":276,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":279,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":279,"endColumn":21}],"suppressedMessages":[],"errorCount":57,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { setupServer } from \"msw/node\";\nimport { http, HttpResponse } from \"msw\";\nimport { createTRPCMsw } from \"msw-trpc\";\nimport superjson from \"superjson\";\nimport bcrypt from \"bcryptjs\";\nimport type { AppRouter } from \"~/server/api/root\";\nimport { createMockUser, createMockSession } from \"~/test/auth-utils\";\n\n// Create tRPC MSW instance\nexport const trpcMsw = createTRPCMsw<AppRouter>({\n  transformer: superjson,\n});\n\n// Store for mock data\nexport const mockAuthStore = {\n  users: new Map<string, any>(),\n  sessions: new Map<string, any>(),\n  passwordResetTokens: new Map<string, any>(),\n  currentUser: null as any,\n};\n\n// Helper to reset mock store\nexport const resetMockAuthStore = () => {\n  mockAuthStore.users.clear();\n  mockAuthStore.sessions.clear();\n  mockAuthStore.passwordResetTokens.clear();\n  mockAuthStore.currentUser = null;\n};\n\n// Helper to seed mock users\nexport const seedMockUser = (user: any) => {\n  mockAuthStore.users.set(user.email, user);\n  if (user.username) {\n    mockAuthStore.users.set(user.username, user);\n  }\n  return user;\n};\n\n// NextAuth API handlers\nexport const nextAuthHandlers = [\n  // Sign in endpoint\n  http.post(\"/api/auth/signin/credentials\", async ({ request }) => {\n    const body = await request.formData();\n    const emailOrUsername = body.get(\"emailOrUsername\") as string;\n    const password = body.get(\"password\") as string;\n    const csrfToken = body.get(\"csrfToken\") as string;\n\n    const user = mockAuthStore.users.get(emailOrUsername);\n\n    if (!user?.password) {\n      return HttpResponse.json({ error: \"CredentialsSignin\" }, { status: 401 });\n    }\n\n    const isValid = await bcrypt.compare(password, user.password);\n    if (!isValid) {\n      return HttpResponse.json({ error: \"CredentialsSignin\" }, { status: 401 });\n    }\n\n    // Create session\n    const session = createMockSession({\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        username: user.username,\n        needsUsername: !user.username,\n        image: user.image,\n      },\n    });\n\n    mockAuthStore.currentUser = user;\n    mockAuthStore.sessions.set(session.user.id, session);\n\n    return HttpResponse.json({\n      ok: true,\n      status: 200,\n      url: \"/dashboard\",\n    });\n  }),\n\n  // Session endpoint\n  http.get(\"/api/auth/session\", () => {\n    if (mockAuthStore.currentUser) {\n      const session = mockAuthStore.sessions.get(mockAuthStore.currentUser.id);\n      return HttpResponse.json(session);\n    }\n    return HttpResponse.json(null);\n  }),\n\n  // Sign out endpoint\n  http.post(\"/api/auth/signout\", () => {\n    mockAuthStore.currentUser = null;\n    return HttpResponse.json({ ok: true });\n  }),\n\n  // CSRF token endpoint\n  http.get(\"/api/auth/csrf\", () => {\n    return HttpResponse.json({ csrfToken: \"mock-csrf-token\" });\n  }),\n\n  // Providers endpoint\n  http.get(\"/api/auth/providers\", () => {\n    return HttpResponse.json({\n      discord: {\n        id: \"discord\",\n        name: \"Discord\",\n        type: \"oauth\",\n        signinUrl: \"/api/auth/signin/discord\",\n        callbackUrl: \"/api/auth/callback/discord\",\n      },\n      credentials: {\n        id: \"credentials\",\n        name: \"Credentials\",\n        type: \"credentials\",\n        signinUrl: \"/api/auth/signin/credentials\",\n        callbackUrl: \"/api/auth/callback/credentials\",\n      },\n    });\n  }),\n\n  // OAuth callback (Discord)\n  http.get(\"/api/auth/callback/discord\", ({ request }) => {\n    const url = new URL(request.url);\n    const code = url.searchParams.get(\"code\");\n\n    if (!code) {\n      return HttpResponse.json({ error: \"NoAuthCode\" }, { status: 400 });\n    }\n\n    // Mock OAuth user creation\n    const oauthUser = createMockUser({\n      email: \"oauth@example.com\",\n      name: \"OAuth User\",\n      username: null,\n      password: null,\n      image: \"https://cdn.discordapp.com/avatar.png\",\n    });\n\n    seedMockUser(oauthUser);\n    mockAuthStore.currentUser = oauthUser;\n\n    const session = createMockSession({\n      user: {\n        id: oauthUser.id,\n        email: oauthUser.email,\n        name: oauthUser.name,\n        username: oauthUser.username,\n        needsUsername: true,\n        image: oauthUser.image,\n      },\n    });\n\n    mockAuthStore.sessions.set(session.user.id, session);\n\n    return HttpResponse.redirect(\"/auth/new-user\", 302);\n  }),\n];\n\n// tRPC auth router handlers\nexport const trpcAuthHandlers = [\n  trpcMsw.auth.register.mutation(async ({ input }) => {\n    const existingUserByEmail = mockAuthStore.users.get(input.email);\n    if (existingUserByEmail) {\n      throw new Error(\"Email already in use\");\n    }\n\n    const existingUserByUsername = mockAuthStore.users.get(input.username);\n    if (existingUserByUsername) {\n      throw new Error(\"Username already taken\");\n    }\n\n    const hashedPassword = await bcrypt.hash(input.password, 10);\n    const newUser = createMockUser({\n      ...input,\n      password: hashedPassword,\n    });\n\n    seedMockUser(newUser);\n\n    return { success: true, userId: newUser.id };\n  }),\n\n  trpcMsw.auth.checkUsername.query(({ input }) => {\n    const user = mockAuthStore.users.get(input.username);\n    return { available: !user };\n  }),\n\n  trpcMsw.auth.setUsername.mutation(({ input }) => {\n    if (!mockAuthStore.currentUser) {\n      throw new Error(\"UNAUTHORIZED\");\n    }\n\n    const existingUser = mockAuthStore.users.get(input.username);\n    if (existingUser) {\n      throw new Error(\"Username already taken\");\n    }\n\n    // Update user\n    mockAuthStore.currentUser.username = input.username;\n    seedMockUser(mockAuthStore.currentUser);\n\n    // Update session\n    const session = mockAuthStore.sessions.get(mockAuthStore.currentUser.id);\n    if (session) {\n      session.user.username = input.username;\n      session.user.needsUsername = false;\n    }\n\n    return { success: true };\n  }),\n\n  trpcMsw.auth.requestPasswordReset.mutation(({ input }) => {\n    const user = mockAuthStore.users.get(input.email);\n\n    if (user) {\n      const token = `reset-token-${Date.now()}`;\n      const resetToken = {\n        id: `token-${Date.now()}`,\n        token,\n        userId: user.id,\n        expires: new Date(Date.now() + 3600000),\n      };\n\n      mockAuthStore.passwordResetTokens.set(token, resetToken);\n    }\n\n    return { success: true };\n  }),\n\n  trpcMsw.auth.resetPassword.mutation(async ({ input }) => {\n    const resetToken = mockAuthStore.passwordResetTokens.get(input.token);\n\n    if (!resetToken) {\n      throw new Error(\"Invalid or expired token\");\n    }\n\n    if (resetToken.expires < new Date()) {\n      mockAuthStore.passwordResetTokens.delete(input.token);\n      throw new Error(\"Token has expired\");\n    }\n\n    const hashedPassword = await bcrypt.hash(input.password, 10);\n\n    // Update user password\n    for (const [key, user] of mockAuthStore.users.entries()) {\n      if (user.id === resetToken.userId) {\n        user.password = hashedPassword;\n        mockAuthStore.users.set(key, user);\n      }\n    }\n\n    mockAuthStore.passwordResetTokens.delete(input.token);\n\n    return { success: true };\n  }),\n\n  trpcMsw.auth.updateProfile.mutation(({ input }) => {\n    if (!mockAuthStore.currentUser) {\n      throw new Error(\"UNAUTHORIZED\");\n    }\n\n    // Update user profile\n    if (input.name !== undefined) {\n      mockAuthStore.currentUser.name = input.name;\n    }\n    if (input.image !== undefined) {\n      mockAuthStore.currentUser.image = input.image;\n    }\n\n    seedMockUser(mockAuthStore.currentUser);\n\n    // Update session\n    const session = mockAuthStore.sessions.get(mockAuthStore.currentUser.id);\n    if (session) {\n      if (input.name !== undefined) {\n        session.user.name = input.name;\n      }\n      if (input.image !== undefined) {\n        session.user.image = input.image;\n      }\n    }\n\n    return { success: true };\n  }),\n];\n\n// Combined handlers\nexport const authHandlers = [...nextAuthHandlers, ...trpcAuthHandlers];\n\n// MSW server instance for tests\nexport const authMockServer = setupServer(...authHandlers);\n\n// Setup and teardown helpers\nexport const setupAuthMocks = () => {\n  authMockServer.listen({ onUnhandledRequest: \"bypass\" });\n};\n\nexport const resetAuthMocks = () => {\n  authMockServer.resetHandlers();\n  resetMockAuthStore();\n};\n\nexport const teardownAuthMocks = () => {\n  authMockServer.close();\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/test/mocks/next-auth-adapters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39,42],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39,42],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[56,59],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[56,59],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[80,83],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[80,83],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[126,129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[126,129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[146,149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[146,149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[167,170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[167,170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[213,216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[213,216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[240,243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[240,243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[263,266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[263,266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[286,289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[286,289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[319,322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[319,322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[349,352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[349,352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Adapter = {\n  createUser?: any;\n  getUser?: any;\n  getUserByEmail?: any;\n  getUserByAccount?: any;\n  updateUser?: any;\n  deleteUser?: any;\n  linkAccount?: any;\n  unlinkAccount?: any;\n  createSession?: any;\n  getSessionAndUser?: any;\n  updateSession?: any;\n  deleteSession?: any;\n  createVerificationToken?: any;\n  useVerificationToken?: any;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":35,"column":31,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":35,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":39,"column":31,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":39,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"@testing-library/jest-dom\";\nimport { cleanup } from \"@testing-library/react\";\nimport { afterEach, vi } from \"vitest\";\n\n// Cleanup after each test\nafterEach(() => {\n  cleanup();\n});\n\n// Mock Next.js router\nvi.mock(\"next/navigation\", () => ({\n  useRouter: () => ({\n    push: vi.fn(),\n    replace: vi.fn(),\n    refresh: vi.fn(),\n    back: vi.fn(),\n    forward: vi.fn(),\n    prefetch: vi.fn(),\n  }),\n  usePathname: () => \"/\",\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n// Mock NextAuth\nvi.mock(\"next-auth\", () => ({\n  getServerSession: vi.fn(),\n  default: vi.fn(),\n}));\n\nvi.mock(\"next-auth/adapters\", () => ({\n  Adapter: {},\n}));\n\nvi.mock(\"next-auth/providers/discord\", () => ({\n  default: vi.fn((config) => ({ ...config, id: \"discord\" })),\n}));\n\nvi.mock(\"next-auth/providers/credentials\", () => ({\n  default: vi.fn((config) => ({ ...config, id: \"credentials\" })),\n}));\n\nvi.mock(\"@auth/prisma-adapter\", () => ({\n  PrismaAdapter: vi.fn(() => ({})),\n}));\n\n// Mock window.matchMedia\nObject.defineProperty(window, \"matchMedia\", {\n  writable: true,\n  value: vi.fn().mockImplementation((query) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(),\n    removeListener: vi.fn(),\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/test/utils.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":39,"column":16,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":39,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":65,"column":16,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":65,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1755,1758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1755,1758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":69,"column":3,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":69,"endColumn":26}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { type ReactElement } from \"react\";\nimport { render, type RenderOptions } from \"@testing-library/react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { createTRPCMsw } from \"msw-trpc\";\nimport type { AppRouter } from \"~/server/api/root\";\nimport superjson from \"superjson\";\n\n// Create a custom render function that includes providers\nexport function renderWithProviders(\n  ui: ReactElement,\n  options?: Omit<RenderOptions, \"wrapper\">,\n) {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n  function Wrapper({ children }: { children: React.ReactNode }) {\n    return (\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    );\n  }\n\n  return render(ui, { wrapper: Wrapper, ...options });\n}\n\n// Create tRPC MSW instance for mocking API calls\nexport const trpcMsw = createTRPCMsw<AppRouter>({\n  transformer: superjson,\n});\n\n// Test data factories\nexport const createTestBoard = () => {\n  const board = Array(8)\n    .fill(null)\n    .map(() => Array(8).fill(null));\n\n  // Place black pieces (top)\n  for (let row = 0; row < 3; row++) {\n    for (let col = 0; col < 8; col++) {\n      if ((row + col) % 2 === 1) {\n        board[row][col] = { color: \"black\", type: \"regular\" };\n      }\n    }\n  }\n\n  // Place red pieces (bottom)\n  for (let row = 5; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if ((row + col) % 2 === 1) {\n        board[row][col] = { color: \"red\", type: \"regular\" };\n      }\n    }\n  }\n\n  return board;\n};\n\nexport const createEmptyBoard = () =>\n  Array(8)\n    .fill(null)\n    .map(() => Array(8).fill(null));\n\nexport const createBoardWithPiece = (row: number, col: number, piece: any) => {\n  const board = createEmptyBoard();\n  board[row][col] = piece;\n  return board;\n};\n\n// Re-export everything from React Testing Library\nexport * from \"@testing-library/react\";\nexport { default as userEvent } from \"@testing-library/user-event\";\n","usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/trpc/query-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/trpc/react.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/trpc/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/src/types/next-auth.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/groot/Documents/code/checkers/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
